
HallSenso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080040a0  080040a0  000050a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004154  08004154  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004154  08004154  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004154  08004154  00005154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004158  08004158  00005158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800415c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000068  080041c4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080041c4  00006378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118bb  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256e  00000000  00000000  0001794b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00019ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb0  00000000  00000000  0001aef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001613f  00000000  00000000  0001bba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001313e  00000000  00000000  00031cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb06  00000000  00000000  00044e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004154  00000000  00000000  000d0968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d4abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004088 	.word	0x08004088

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004088 	.word	0x08004088

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fc44 	bl	8000c86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f831 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000402:	f000 f987 	bl	8000714 <MX_DMA_Init>
  MX_GPIO_Init();
 8000406:	f000 f9a3 	bl	8000750 <MX_GPIO_Init>
  MX_ADC1_Init();
 800040a:	f000 f877 	bl	80004fc <MX_ADC1_Init>
  MX_TIM1_Init();
 800040e:	f000 f8d7 	bl	80005c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000412:	f000 f931 	bl	8000678 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Sistema avviato\r\n");
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <main+0x64>)
 8000418:	0018      	movs	r0, r3
 800041a:	f003 fa6b 	bl	80038f4 <puts>

      while (1)
      {
          // Legge lo stato del pin PA3 del sensore Hall
          GPIO_PinState hallState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800041e:	1dfc      	adds	r4, r7, #7
 8000420:	23a0      	movs	r3, #160	@ 0xa0
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2108      	movs	r1, #8
 8000426:	0018      	movs	r0, r3
 8000428:	f001 fd24 	bl	8001e74 <HAL_GPIO_ReadPin>
 800042c:	0003      	movs	r3, r0
 800042e:	7023      	strb	r3, [r4, #0]

          if (hallState == GPIO_PIN_SET)
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d104      	bne.n	8000442 <main+0x4e>
          {
              printf("Presente\r\n");
 8000438:	4b08      	ldr	r3, [pc, #32]	@ (800045c <main+0x68>)
 800043a:	0018      	movs	r0, r3
 800043c:	f003 fa5a 	bl	80038f4 <puts>
 8000440:	e003      	b.n	800044a <main+0x56>
          }
          else
          {
              printf("Assente\r\n");
 8000442:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <main+0x6c>)
 8000444:	0018      	movs	r0, r3
 8000446:	f003 fa55 	bl	80038f4 <puts>
          }

          HAL_Delay(500); // mezzo secondo tra letture
 800044a:	23fa      	movs	r3, #250	@ 0xfa
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fc96 	bl	8000d80 <HAL_Delay>
      {
 8000454:	e7e3      	b.n	800041e <main+0x2a>
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	080040a0 	.word	0x080040a0
 800045c:	080040b4 	.word	0x080040b4
 8000460:	080040c0 	.word	0x080040c0

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b08d      	sub	sp, #52	@ 0x34
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	2414      	movs	r4, #20
 800046c:	193b      	adds	r3, r7, r4
 800046e:	0018      	movs	r0, r3
 8000470:	231c      	movs	r3, #28
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f003 fb33 	bl	8003ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047a:	003b      	movs	r3, r7
 800047c:	0018      	movs	r0, r3
 800047e:	2314      	movs	r3, #20
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f003 fb2c 	bl	8003ae0 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8000488:	4b1b      	ldr	r3, [pc, #108]	@ (80004f8 <SystemClock_Config+0x94>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <SystemClock_Config+0x94>)
 800048e:	2107      	movs	r1, #7
 8000490:	438a      	bics	r2, r1
 8000492:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2202      	movs	r2, #2
 8000498:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2280      	movs	r2, #128	@ 0x80
 800049e:	0052      	lsls	r2, r2, #1
 80004a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2280      	movs	r2, #128	@ 0x80
 80004a6:	0152      	lsls	r2, r2, #5
 80004a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2240      	movs	r2, #64	@ 0x40
 80004ae:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fcfc 	bl	8001eb0 <HAL_RCC_OscConfig>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004bc:	f000 f990 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c0:	003b      	movs	r3, r7
 80004c2:	2207      	movs	r2, #7
 80004c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c6:	003b      	movs	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004cc:	003b      	movs	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004de:	003b      	movs	r3, r7
 80004e0:	2100      	movs	r1, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fec8 	bl	8002278 <HAL_RCC_ClockConfig>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80004ec:	f000 f978 	bl	80007e0 <Error_Handler>
  }
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b00d      	add	sp, #52	@ 0x34
 80004f6:	bd90      	pop	{r4, r7, pc}
 80004f8:	40022000 	.word	0x40022000

080004fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	0018      	movs	r0, r3
 8000506:	230c      	movs	r3, #12
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f003 fae8 	bl	8003ae0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000512:	4a2a      	ldr	r2, [pc, #168]	@ (80005bc <MX_ADC1_Init+0xc0>)
 8000514:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000516:	4b28      	ldr	r3, [pc, #160]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000518:	22c0      	movs	r2, #192	@ 0xc0
 800051a:	0612      	lsls	r2, r2, #24
 800051c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800051e:	4b26      	ldr	r3, [pc, #152]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b24      	ldr	r3, [pc, #144]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800052a:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 800052c:	2280      	movs	r2, #128	@ 0x80
 800052e:	0612      	lsls	r2, r2, #24
 8000530:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000532:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000534:	2204      	movs	r2, #4
 8000536:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000538:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 800053a:	2200      	movs	r2, #0
 800053c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800053e:	4b1e      	ldr	r3, [pc, #120]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000540:	2200      	movs	r2, #0
 8000542:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000544:	4b1c      	ldr	r3, [pc, #112]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000546:	2201      	movs	r2, #1
 8000548:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800054a:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 800054c:	2201      	movs	r2, #1
 800054e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000550:	4b19      	ldr	r3, [pc, #100]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000556:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800055c:	4b16      	ldr	r3, [pc, #88]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 800055e:	222c      	movs	r2, #44	@ 0x2c
 8000560:	2101      	movs	r1, #1
 8000562:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000564:	4b14      	ldr	r3, [pc, #80]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000566:	2200      	movs	r2, #0
 8000568:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800056a:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 800056c:	2200      	movs	r2, #0
 800056e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000570:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000572:	223c      	movs	r2, #60	@ 0x3c
 8000574:	2100      	movs	r1, #0
 8000576:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000578:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 800057a:	2200      	movs	r2, #0
 800057c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fd1f 	bl	8000fc4 <HAL_ADC_Init>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800058a:	f000 f929 	bl	80007e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2201      	movs	r2, #1
 8000598:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059a:	1d3a      	adds	r2, r7, #4
 800059c:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <MX_ADC1_Init+0xbc>)
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 feb5 	bl	8001310 <HAL_ADC_ConfigChannel>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005aa:	f000 f919 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b004      	add	sp, #16
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	20000084 	.word	0x20000084
 80005bc:	40012400 	.word	0x40012400

080005c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c6:	2310      	movs	r3, #16
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	2310      	movs	r3, #16
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f003 fa85 	bl	8003ae0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	0018      	movs	r0, r3
 80005da:	230c      	movs	r3, #12
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f003 fa7e 	bl	8003ae0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005e4:	4b21      	ldr	r3, [pc, #132]	@ (800066c <MX_TIM1_Init+0xac>)
 80005e6:	4a22      	ldr	r2, [pc, #136]	@ (8000670 <MX_TIM1_Init+0xb0>)
 80005e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005ea:	4b20      	ldr	r3, [pc, #128]	@ (800066c <MX_TIM1_Init+0xac>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <MX_TIM1_Init+0xac>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <MX_TIM1_Init+0xac>)
 80005f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000674 <MX_TIM1_Init+0xb4>)
 80005fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <MX_TIM1_Init+0xac>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000602:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_TIM1_Init+0xac>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_TIM1_Init+0xac>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800060e:	4b17      	ldr	r3, [pc, #92]	@ (800066c <MX_TIM1_Init+0xac>)
 8000610:	0018      	movs	r0, r3
 8000612:	f002 f895 	bl	8002740 <HAL_TIM_Base_Init>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800061a:	f000 f8e1 	bl	80007e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061e:	2110      	movs	r1, #16
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2280      	movs	r2, #128	@ 0x80
 8000624:	0152      	lsls	r2, r2, #5
 8000626:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000628:	187a      	adds	r2, r7, r1
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <MX_TIM1_Init+0xac>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f002 f8de 	bl	80027f0 <HAL_TIM_ConfigClockSource>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000638:	f000 f8d2 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800064e:	1d3a      	adds	r2, r7, #4
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_TIM1_Init+0xac>)
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f002 faaf 	bl	8002bb8 <HAL_TIMEx_MasterConfigSynchronization>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800065e:	f000 f8bf 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b008      	add	sp, #32
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	20000144 	.word	0x20000144
 8000670:	40012c00 	.word	0x40012c00
 8000674:	0000ffff 	.word	0x0000ffff

08000678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800067c:	4b23      	ldr	r3, [pc, #140]	@ (800070c <MX_USART1_UART_Init+0x94>)
 800067e:	4a24      	ldr	r2, [pc, #144]	@ (8000710 <MX_USART1_UART_Init+0x98>)
 8000680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000682:	4b22      	ldr	r3, [pc, #136]	@ (800070c <MX_USART1_UART_Init+0x94>)
 8000684:	22e1      	movs	r2, #225	@ 0xe1
 8000686:	0252      	lsls	r2, r2, #9
 8000688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b20      	ldr	r3, [pc, #128]	@ (800070c <MX_USART1_UART_Init+0x94>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <MX_USART1_UART_Init+0x94>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <MX_USART1_UART_Init+0x94>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_USART1_UART_Init+0x94>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <MX_USART1_UART_Init+0x94>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <MX_USART1_UART_Init+0x94>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_USART1_UART_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_USART1_UART_Init+0x94>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ba:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_USART1_UART_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_USART1_UART_Init+0x94>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f002 fada 	bl	8002c7c <HAL_UART_Init>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006cc:	f000 f888 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART1_UART_Init+0x94>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 ff13 	bl	8003500 <HAL_UARTEx_SetTxFifoThreshold>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006de:	f000 f87f 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e2:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <MX_USART1_UART_Init+0x94>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 ff4a 	bl	8003580 <HAL_UARTEx_SetRxFifoThreshold>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006f0:	f000 f876 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <MX_USART1_UART_Init+0x94>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 fec8 	bl	800348c <HAL_UARTEx_DisableFifoMode>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000700:	f000 f86e 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	20000190 	.word	0x20000190
 8000710:	40013800 	.word	0x40013800

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_DMA_Init+0x38>)
 800071c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_DMA_Init+0x38>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_DMA_Init+0x38>)
 8000728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	200a      	movs	r0, #10
 8000738:	f001 f86c 	bl	8001814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800073c:	200a      	movs	r0, #10
 800073e:	f001 f87e 	bl	800183e <HAL_NVIC_EnableIRQ>

}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	40021000 	.word	0x40021000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b089      	sub	sp, #36	@ 0x24
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	240c      	movs	r4, #12
 8000758:	193b      	adds	r3, r7, r4
 800075a:	0018      	movs	r0, r3
 800075c:	2314      	movs	r3, #20
 800075e:	001a      	movs	r2, r3
 8000760:	2100      	movs	r1, #0
 8000762:	f003 f9bd 	bl	8003ae0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_GPIO_Init+0x84>)
 8000768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_GPIO_Init+0x84>)
 800076c:	2104      	movs	r1, #4
 800076e:	430a      	orrs	r2, r1
 8000770:	635a      	str	r2, [r3, #52]	@ 0x34
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_GPIO_Init+0x84>)
 8000774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000776:	2204      	movs	r2, #4
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_GPIO_Init+0x84>)
 8000780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_GPIO_Init+0x84>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	635a      	str	r2, [r3, #52]	@ 0x34
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_GPIO_Init+0x84>)
 800078c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_GPIO_Init+0x84>)
 8000798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_GPIO_Init+0x84>)
 800079c:	2108      	movs	r1, #8
 800079e:	430a      	orrs	r2, r1
 80007a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_GPIO_Init+0x84>)
 80007a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007a6:	2208      	movs	r2, #8
 80007a8:	4013      	ands	r3, r2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : HallSensor_Pin */
  GPIO_InitStruct.Pin = HallSensor_Pin;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <MX_GPIO_Init+0x88>)
 80007b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2202      	movs	r2, #2
 80007be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HallSensor_GPIO_Port, &GPIO_InitStruct);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	4a06      	ldr	r2, [pc, #24]	@ (80007dc <MX_GPIO_Init+0x8c>)
 80007c4:	0019      	movs	r1, r3
 80007c6:	0010      	movs	r0, r2
 80007c8:	f001 f9e2 	bl	8001b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b009      	add	sp, #36	@ 0x24
 80007d2:	bd90      	pop	{r4, r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	10110000 	.word	0x10110000
 80007dc:	50000c00 	.word	0x50000c00

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  /* USER CODE END Error_Handler_Debug */
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_MspInit+0x44>)
 80007f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <HAL_MspInit+0x44>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	641a      	str	r2, [r3, #64]	@ 0x40
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_MspInit+0x44>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	2201      	movs	r2, #1
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_MspInit+0x44>)
 8000810:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <HAL_MspInit+0x44>)
 8000814:	2180      	movs	r1, #128	@ 0x80
 8000816:	0549      	lsls	r1, r1, #21
 8000818:	430a      	orrs	r2, r1
 800081a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <HAL_MspInit+0x44>)
 800081e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	055b      	lsls	r3, r3, #21
 8000824:	4013      	ands	r3, r2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b091      	sub	sp, #68	@ 0x44
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	232c      	movs	r3, #44	@ 0x2c
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	0018      	movs	r0, r3
 8000846:	2314      	movs	r3, #20
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f003 f948 	bl	8003ae0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000850:	2410      	movs	r4, #16
 8000852:	193b      	adds	r3, r7, r4
 8000854:	0018      	movs	r0, r3
 8000856:	231c      	movs	r3, #28
 8000858:	001a      	movs	r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	f003 f940 	bl	8003ae0 <memset>
  if(hadc->Instance==ADC1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a35      	ldr	r2, [pc, #212]	@ (800093c <HAL_ADC_MspInit+0x104>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d164      	bne.n	8000934 <HAL_ADC_MspInit+0xfc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2220      	movs	r2, #32
 800086e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fe75 	bl	8002568 <HAL_RCCEx_PeriphCLKConfig>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8000882:	f7ff ffad 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000886:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <HAL_ADC_MspInit+0x108>)
 8000888:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <HAL_ADC_MspInit+0x108>)
 800088c:	2180      	movs	r1, #128	@ 0x80
 800088e:	0349      	lsls	r1, r1, #13
 8000890:	430a      	orrs	r2, r1
 8000892:	641a      	str	r2, [r3, #64]	@ 0x40
 8000894:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <HAL_ADC_MspInit+0x108>)
 8000896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	035b      	lsls	r3, r3, #13
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <HAL_ADC_MspInit+0x108>)
 80008a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008a6:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <HAL_ADC_MspInit+0x108>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ae:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <HAL_ADC_MspInit+0x108>)
 80008b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008b2:	2201      	movs	r2, #1
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ba:	212c      	movs	r1, #44	@ 0x2c
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2203      	movs	r2, #3
 80008c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	23a0      	movs	r3, #160	@ 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 f95a 	bl	8001b90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 80008de:	4a1a      	ldr	r2, [pc, #104]	@ (8000948 <HAL_ADC_MspInit+0x110>)
 80008e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 80008e4:	2205      	movs	r2, #5
 80008e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e8:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 80008f6:	2280      	movs	r2, #128	@ 0x80
 80008f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	0052      	lsls	r2, r2, #1
 8000900:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	00d2      	lsls	r2, r2, #3
 8000908:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 800090c:	2220      	movs	r2, #32
 800090e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 8000912:	2280      	movs	r2, #128	@ 0x80
 8000914:	0152      	lsls	r2, r2, #5
 8000916:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000918:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 800091a:	0018      	movs	r0, r3
 800091c:	f000 ffac 	bl	8001878 <HAL_DMA_Init>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8000924:	f7ff ff5c 	bl	80007e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a06      	ldr	r2, [pc, #24]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 800092c:	651a      	str	r2, [r3, #80]	@ 0x50
 800092e:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_ADC_MspInit+0x10c>)
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b011      	add	sp, #68	@ 0x44
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	40012400 	.word	0x40012400
 8000940:	40021000 	.word	0x40021000
 8000944:	200000e8 	.word	0x200000e8
 8000948:	4002001c 	.word	0x4002001c

0800094c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <HAL_TIM_Base_MspInit+0x38>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10d      	bne.n	800097a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <HAL_TIM_Base_MspInit+0x3c>)
 8000960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_TIM_Base_MspInit+0x3c>)
 8000964:	2180      	movs	r1, #128	@ 0x80
 8000966:	0109      	lsls	r1, r1, #4
 8000968:	430a      	orrs	r2, r1
 800096a:	641a      	str	r2, [r3, #64]	@ 0x40
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_TIM_Base_MspInit+0x3c>)
 800096e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	40012c00 	.word	0x40012c00
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b093      	sub	sp, #76	@ 0x4c
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	2334      	movs	r3, #52	@ 0x34
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	0018      	movs	r0, r3
 800099a:	2314      	movs	r3, #20
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f003 f89e 	bl	8003ae0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a4:	2418      	movs	r4, #24
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	0018      	movs	r0, r3
 80009aa:	231c      	movs	r3, #28
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f003 f896 	bl	8003ae0 <memset>
  if(huart->Instance==USART1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a34      	ldr	r2, [pc, #208]	@ (8000a8c <HAL_UART_MspInit+0x100>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d162      	bne.n	8000a84 <HAL_UART_MspInit+0xf8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fdcb 	bl	8002568 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009d6:	f7ff ff03 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <HAL_UART_MspInit+0x104>)
 80009dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009de:	4b2c      	ldr	r3, [pc, #176]	@ (8000a90 <HAL_UART_MspInit+0x104>)
 80009e0:	2180      	movs	r1, #128	@ 0x80
 80009e2:	01c9      	lsls	r1, r1, #7
 80009e4:	430a      	orrs	r2, r1
 80009e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80009e8:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <HAL_UART_MspInit+0x104>)
 80009ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	01db      	lsls	r3, r3, #7
 80009f0:	4013      	ands	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <HAL_UART_MspInit+0x104>)
 80009f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <HAL_UART_MspInit+0x104>)
 80009fc:	2104      	movs	r1, #4
 80009fe:	430a      	orrs	r2, r1
 8000a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a02:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <HAL_UART_MspInit+0x104>)
 8000a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a06:	2204      	movs	r2, #4
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <HAL_UART_MspInit+0x104>)
 8000a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_UART_MspInit+0x104>)
 8000a14:	2101      	movs	r1, #1
 8000a16:	430a      	orrs	r2, r1
 8000a18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <HAL_UART_MspInit+0x104>)
 8000a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a26:	2134      	movs	r1, #52	@ 0x34
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2280      	movs	r2, #128	@ 0x80
 8000a2c:	01d2      	lsls	r2, r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	000c      	movs	r4, r1
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2202      	movs	r2, #2
 8000a36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	4a11      	ldr	r2, [pc, #68]	@ (8000a94 <HAL_UART_MspInit+0x108>)
 8000a4e:	0019      	movs	r1, r3
 8000a50:	0010      	movs	r0, r2
 8000a52:	f001 f89d 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a56:	0021      	movs	r1, r4
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2204      	movs	r2, #4
 8000a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	187a      	adds	r2, r7, r1
 8000a78:	23a0      	movs	r3, #160	@ 0xa0
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f001 f886 	bl	8001b90 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b013      	add	sp, #76	@ 0x4c
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	40013800 	.word	0x40013800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	50000800 	.word	0x50000800

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f942 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 ff5a 	bl	800198c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	200000e8 	.word	0x200000e8

08000ae4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e00a      	b.n	8000b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af6:	e000      	b.n	8000afa <_read+0x16>
 8000af8:	bf00      	nop
 8000afa:	0001      	movs	r1, r0
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	b2ca      	uxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf0      	blt.n	8000af6 <_read+0x12>
  }

  return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b006      	add	sp, #24
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e009      	b.n	8000b44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	e000      	b.n	8000b3e <_write+0x20>
 8000b3c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf1      	blt.n	8000b30 <_write+0x12>
  }
  return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b006      	add	sp, #24
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_close>:

int _close(int file)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	425b      	negs	r3, r3
}
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	0192      	lsls	r2, r2, #6
 8000b7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	0018      	movs	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_isatty>:

int _isatty(int file)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f002 ffd4 	bl	8003b8c <__errno>
 8000be4:	0003      	movs	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	425b      	negs	r3, r3
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	18d2      	adds	r2, r2, r3
 8000bfe:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <_sbrk+0x64>)
 8000c00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b006      	add	sp, #24
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20003000 	.word	0x20003000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	20000224 	.word	0x20000224
 8000c18:	20000378 	.word	0x20000378

08000c1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <SystemInit+0x14>)
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	0512      	lsls	r2, r2, #20
 8000c26:	609a      	str	r2, [r3, #8]
#endif
}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c34:	480d      	ldr	r0, [pc, #52]	@ (8000c6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c38:	f7ff fff0 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c3e:	e003      	b.n	8000c48 <LoopCopyDataInit>

08000c40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000c42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c46:	3104      	adds	r1, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c48:	480a      	ldr	r0, [pc, #40]	@ (8000c74 <LoopForever+0xa>)
  ldr r3, =_edata
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <LoopForever+0xe>)
  adds r2, r0, r1
 8000c4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c50:	d3f6      	bcc.n	8000c40 <CopyDataInit>
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <LoopForever+0x12>)
  b LoopFillZerobss
 8000c54:	e002      	b.n	8000c5c <LoopFillZerobss>

08000c56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c58:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5a:	3204      	adds	r2, #4

08000c5c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <LoopForever+0x16>)
  cmp r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c60:	d3f9      	bcc.n	8000c56 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c62:	f002 ff99 	bl	8003b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c66:	f7ff fbc5 	bl	80003f4 <main>

08000c6a <LoopForever>:

LoopForever:
    b LoopForever
 8000c6a:	e7fe      	b.n	8000c6a <LoopForever>
  ldr   r0, =_estack
 8000c6c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000c70:	0800415c 	.word	0x0800415c
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c78:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000c7c:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000c80:	20000378 	.word	0x20000378

08000c84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_IRQHandler>

08000c86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2003      	movs	r0, #3
 8000c94:	f000 f80e 	bl	8000cb4 <HAL_InitTick>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca4:	f7ff fda4 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	781b      	ldrb	r3, [r3, #0]
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <HAL_InitTick+0x88>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d02b      	beq.n	8000d24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <HAL_InitTick+0x8c>)
 8000cce:	681c      	ldr	r4, [r3, #0]
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <HAL_InitTick+0x88>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	23fa      	movs	r3, #250	@ 0xfa
 8000cd8:	0098      	lsls	r0, r3, #2
 8000cda:	f7ff fa15 	bl	8000108 <__udivsi3>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	0020      	movs	r0, r4
 8000ce4:	f7ff fa10 	bl	8000108 <__udivsi3>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 fdb7 	bl	800185e <HAL_SYSTICK_Config>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d112      	bne.n	8000d1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d80a      	bhi.n	8000d10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	425b      	negs	r3, r3
 8000d00:	2200      	movs	r2, #0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 fd86 	bl	8001814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_InitTick+0x90>)
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e00d      	b.n	8000d2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d10:	230f      	movs	r3, #15
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	e008      	b.n	8000d2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e003      	b.n	8000d2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d24:	230f      	movs	r3, #15
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	781b      	ldrb	r3, [r3, #0]
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b005      	add	sp, #20
 8000d38:	bd90      	pop	{r4, r7, pc}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x1c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	001a      	movs	r2, r3
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	18d2      	adds	r2, r2, r3
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d5a:	601a      	str	r2, [r3, #0]
}
 8000d5c:	46c0      	nop			@ (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000228 	.word	0x20000228

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b02      	ldr	r3, [pc, #8]	@ (8000d7c <HAL_GetTick+0x10>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	20000228 	.word	0x20000228

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff fff0 	bl	8000d6c <HAL_GetTick>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	001a      	movs	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	189b      	adds	r3, r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	f7ff ffe0 	bl	8000d6c <HAL_GetTick>
 8000dac:	0002      	movs	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	46c0      	nop			@ (mov r8, r8)
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b004      	add	sp, #16
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	ff3fffff 	.word	0xff3fffff

08000df0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	23c0      	movs	r3, #192	@ 0xc0
 8000dfe:	041b      	lsls	r3, r3, #16
 8000e00:	4013      	ands	r3, r2
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	400a      	ands	r2, r1
 8000e20:	2107      	movs	r1, #7
 8000e22:	4091      	lsls	r1, r2
 8000e24:	000a      	movs	r2, r1
 8000e26:	43d2      	mvns	r2, r2
 8000e28:	401a      	ands	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	400b      	ands	r3, r1
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	4099      	lsls	r1, r3
 8000e34:	000b      	movs	r3, r1
 8000e36:	431a      	orrs	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b004      	add	sp, #16
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	2104      	movs	r1, #4
 8000e56:	400a      	ands	r2, r1
 8000e58:	2107      	movs	r1, #7
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2104      	movs	r1, #4
 8000e64:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e66:	40da      	lsrs	r2, r3
 8000e68:	0013      	movs	r3, r2
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	211f      	movs	r1, #31
 8000e86:	400a      	ands	r2, r1
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4091      	lsls	r1, r2
 8000e8c:	000a      	movs	r2, r1
 8000e8e:	43d2      	mvns	r2, r2
 8000e90:	401a      	ands	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	0e9b      	lsrs	r3, r3, #26
 8000e96:	210f      	movs	r1, #15
 8000e98:	4019      	ands	r1, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	201f      	movs	r0, #31
 8000e9e:	4003      	ands	r3, r0
 8000ea0:	4099      	lsls	r1, r3
 8000ea2:	000b      	movs	r3, r1
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	025b      	lsls	r3, r3, #9
 8000ec4:	0a5b      	lsrs	r3, r3, #9
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	0252      	lsls	r2, r2, #9
 8000ee6:	0a52      	lsrs	r2, r2, #9
 8000ee8:	43d2      	mvns	r2, r2
 8000eea:	401a      	ands	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef0:	46c0      	nop			@ (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	0212      	lsls	r2, r2, #8
 8000f0c:	43d2      	mvns	r2, r2
 8000f0e:	401a      	ands	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	400b      	ands	r3, r1
 8000f18:	4904      	ldr	r1, [pc, #16]	@ (8000f2c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	7fffff00 	.word	0x7fffff00

08000f30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2280      	movs	r2, #128	@ 0x80
 8000f42:	0552      	lsls	r2, r2, #21
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	6fffffe8 	.word	0x6fffffe8

08000f58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	055b      	lsls	r3, r3, #21
 8000f68:	401a      	ands	r2, r3
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	055b      	lsls	r3, r3, #21
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d101      	bne.n	8000f76 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <LL_ADC_IsEnabled+0x18>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <LL_ADC_IsEnabled+0x1a>
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d101      	bne.n	8000fba <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b002      	add	sp, #8
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fcc:	231f      	movs	r3, #31
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e17e      	b.n	80012e8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10a      	bne.n	8001008 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff fc1f 	bl	8000838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2254      	movs	r2, #84	@ 0x54
 8001004:	2100      	movs	r1, #0
 8001006:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff ffa3 	bl	8000f58 <LL_ADC_IsInternalRegulatorEnabled>
 8001012:	1e03      	subs	r3, r0, #0
 8001014:	d114      	bne.n	8001040 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff ff88 	bl	8000f30 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001020:	4bb3      	ldr	r3, [pc, #716]	@ (80012f0 <HAL_ADC_Init+0x32c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	49b3      	ldr	r1, [pc, #716]	@ (80012f4 <HAL_ADC_Init+0x330>)
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff f86e 	bl	8000108 <__udivsi3>
 800102c:	0003      	movs	r3, r0
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001032:	e002      	b.n	800103a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3b01      	subs	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f9      	bne.n	8001034 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ff87 	bl	8000f58 <LL_ADC_IsInternalRegulatorEnabled>
 800104a:	1e03      	subs	r3, r0, #0
 800104c:	d10f      	bne.n	800106e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	2210      	movs	r2, #16
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800105e:	2201      	movs	r2, #1
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001066:	231f      	movs	r3, #31
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff ff95 	bl	8000fa2 <LL_ADC_REG_IsConversionOngoing>
 8001078:	0003      	movs	r3, r0
 800107a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	2210      	movs	r2, #16
 8001082:	4013      	ands	r3, r2
 8001084:	d000      	beq.n	8001088 <HAL_ADC_Init+0xc4>
 8001086:	e122      	b.n	80012ce <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d000      	beq.n	8001090 <HAL_ADC_Init+0xcc>
 800108e:	e11e      	b.n	80012ce <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001094:	4a98      	ldr	r2, [pc, #608]	@ (80012f8 <HAL_ADC_Init+0x334>)
 8001096:	4013      	ands	r3, r2
 8001098:	2202      	movs	r2, #2
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff ff6b 	bl	8000f80 <LL_ADC_IsEnabled>
 80010aa:	1e03      	subs	r3, r0, #0
 80010ac:	d000      	beq.n	80010b0 <HAL_ADC_Init+0xec>
 80010ae:	e0ad      	b.n	800120c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e1b      	ldrb	r3, [r3, #24]
 80010b8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010ba:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7e5b      	ldrb	r3, [r3, #25]
 80010c0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010c2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7e9b      	ldrb	r3, [r3, #26]
 80010c8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010ca:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <HAL_ADC_Init+0x116>
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	015b      	lsls	r3, r3, #5
 80010d8:	e000      	b.n	80010dc <HAL_ADC_Init+0x118>
 80010da:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010dc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010e2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da04      	bge.n	80010f6 <HAL_ADC_Init+0x132>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	085b      	lsrs	r3, r3, #1
 80010f4:	e001      	b.n	80010fa <HAL_ADC_Init+0x136>
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80010fa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	212c      	movs	r1, #44	@ 0x2c
 8001100:	5c5b      	ldrb	r3, [r3, r1]
 8001102:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001104:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2220      	movs	r2, #32
 8001110:	5c9b      	ldrb	r3, [r3, r2]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d115      	bne.n	8001142 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7e9b      	ldrb	r3, [r3, #26]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d105      	bne.n	800112a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	0252      	lsls	r2, r2, #9
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	e00b      	b.n	8001142 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	2220      	movs	r2, #32
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800113a:	2201      	movs	r2, #1
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800114e:	23e0      	movs	r3, #224	@ 0xe0
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001158:	4313      	orrs	r3, r2
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	4a65      	ldr	r2, [pc, #404]	@ (80012fc <HAL_ADC_Init+0x338>)
 8001168:	4013      	ands	r3, r2
 800116a:	0019      	movs	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	430a      	orrs	r2, r1
 8001174:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	0f9b      	lsrs	r3, r3, #30
 800117c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001182:	4313      	orrs	r3, r2
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4313      	orrs	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	223c      	movs	r2, #60	@ 0x3c
 800118e:	5c9b      	ldrb	r3, [r3, r2]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d111      	bne.n	80011b8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	0f9b      	lsrs	r3, r3, #30
 800119a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011a0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80011a6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80011ac:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	2201      	movs	r2, #1
 80011b4:	4313      	orrs	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	4a50      	ldr	r2, [pc, #320]	@ (8001300 <HAL_ADC_Init+0x33c>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	0019      	movs	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	23c0      	movs	r3, #192	@ 0xc0
 80011d4:	061b      	lsls	r3, r3, #24
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d018      	beq.n	800120c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011de:	2380      	movs	r3, #128	@ 0x80
 80011e0:	05db      	lsls	r3, r3, #23
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d012      	beq.n	800120c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	061b      	lsls	r3, r3, #24
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d00c      	beq.n	800120c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011f2:	4b44      	ldr	r3, [pc, #272]	@ (8001304 <HAL_ADC_Init+0x340>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a44      	ldr	r2, [pc, #272]	@ (8001308 <HAL_ADC_Init+0x344>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	0019      	movs	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	23f0      	movs	r3, #240	@ 0xf0
 8001202:	039b      	lsls	r3, r3, #14
 8001204:	401a      	ands	r2, r3
 8001206:	4b3f      	ldr	r3, [pc, #252]	@ (8001304 <HAL_ADC_Init+0x340>)
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001214:	001a      	movs	r2, r3
 8001216:	2100      	movs	r1, #0
 8001218:	f7ff fdf7 	bl	8000e0a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001224:	4939      	ldr	r1, [pc, #228]	@ (800130c <HAL_ADC_Init+0x348>)
 8001226:	001a      	movs	r2, r3
 8001228:	f7ff fdef 	bl	8000e0a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d109      	bne.n	8001248 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2110      	movs	r1, #16
 8001240:	4249      	negs	r1, r1
 8001242:	430a      	orrs	r2, r1
 8001244:	629a      	str	r2, [r3, #40]	@ 0x28
 8001246:	e018      	b.n	800127a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	039b      	lsls	r3, r3, #14
 8001250:	429a      	cmp	r2, r3
 8001252:	d112      	bne.n	800127a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	3b01      	subs	r3, #1
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	221c      	movs	r2, #28
 8001264:	4013      	ands	r3, r2
 8001266:	2210      	movs	r2, #16
 8001268:	4252      	negs	r2, r2
 800126a:	409a      	lsls	r2, r3
 800126c:	0011      	movs	r1, r2
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2100      	movs	r1, #0
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff fddf 	bl	8000e44 <LL_ADC_GetSamplingTimeCommonChannels>
 8001286:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800128c:	429a      	cmp	r2, r3
 800128e:	d10b      	bne.n	80012a8 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	2203      	movs	r2, #3
 800129c:	4393      	bics	r3, r2
 800129e:	2201      	movs	r2, #1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012a6:	e01c      	b.n	80012e2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ac:	2212      	movs	r2, #18
 80012ae:	4393      	bics	r3, r2
 80012b0:	2210      	movs	r2, #16
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012bc:	2201      	movs	r2, #1
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80012c4:	231f      	movs	r3, #31
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012cc:	e009      	b.n	80012e2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d2:	2210      	movs	r2, #16
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012da:	231f      	movs	r3, #31
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80012e2:	231f      	movs	r3, #31
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	781b      	ldrb	r3, [r3, #0]
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b008      	add	sp, #32
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	00030d40 	.word	0x00030d40
 80012f8:	fffffefd 	.word	0xfffffefd
 80012fc:	ffde0201 	.word	0xffde0201
 8001300:	1ffffc02 	.word	0x1ffffc02
 8001304:	40012708 	.word	0x40012708
 8001308:	ffc3ffff 	.word	0xffc3ffff
 800130c:	7fffff04 	.word	0x7fffff04

08001310 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131a:	2317      	movs	r3, #23
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2254      	movs	r2, #84	@ 0x54
 800132a:	5c9b      	ldrb	r3, [r3, r2]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x24>
 8001330:	2302      	movs	r3, #2
 8001332:	e1be      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x3a2>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2254      	movs	r2, #84	@ 0x54
 8001338:	2101      	movs	r1, #1
 800133a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff fe2e 	bl	8000fa2 <LL_ADC_REG_IsConversionOngoing>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d000      	beq.n	800134c <HAL_ADC_ConfigChannel+0x3c>
 800134a:	e1a1      	b.n	8001690 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d100      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x46>
 8001354:	e152      	b.n	80015fc <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	429a      	cmp	r2, r3
 8001360:	d004      	beq.n	800136c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001366:	4ac2      	ldr	r2, [pc, #776]	@ (8001670 <HAL_ADC_ConfigChannel+0x360>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d108      	bne.n	800137e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0019      	movs	r1, r3
 8001376:	0010      	movs	r0, r2
 8001378:	f7ff fd9b 	bl	8000eb2 <LL_ADC_REG_SetSequencerChAdd>
 800137c:	e0ed      	b.n	800155a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	211f      	movs	r1, #31
 8001388:	400b      	ands	r3, r1
 800138a:	210f      	movs	r1, #15
 800138c:	4099      	lsls	r1, r3
 800138e:	000b      	movs	r3, r1
 8001390:	43db      	mvns	r3, r3
 8001392:	4013      	ands	r3, r2
 8001394:	0019      	movs	r1, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	025b      	lsls	r3, r3, #9
 800139c:	0a5b      	lsrs	r3, r3, #9
 800139e:	d105      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x9c>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0e9b      	lsrs	r3, r3, #26
 80013a6:	221f      	movs	r2, #31
 80013a8:	4013      	ands	r3, r2
 80013aa:	e0bc      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	d000      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0xa8>
 80013b6:	e0b5      	b.n	8001524 <HAL_ADC_ConfigChannel+0x214>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0xb4>
 80013c2:	e0ad      	b.n	8001520 <HAL_ADC_ConfigChannel+0x210>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2204      	movs	r2, #4
 80013ca:	4013      	ands	r3, r2
 80013cc:	d000      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0xc0>
 80013ce:	e0a5      	b.n	800151c <HAL_ADC_ConfigChannel+0x20c>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2208      	movs	r2, #8
 80013d6:	4013      	ands	r3, r2
 80013d8:	d000      	beq.n	80013dc <HAL_ADC_ConfigChannel+0xcc>
 80013da:	e09d      	b.n	8001518 <HAL_ADC_ConfigChannel+0x208>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2210      	movs	r2, #16
 80013e2:	4013      	ands	r3, r2
 80013e4:	d000      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0xd8>
 80013e6:	e095      	b.n	8001514 <HAL_ADC_ConfigChannel+0x204>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2220      	movs	r2, #32
 80013ee:	4013      	ands	r3, r2
 80013f0:	d000      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0xe4>
 80013f2:	e08d      	b.n	8001510 <HAL_ADC_ConfigChannel+0x200>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2240      	movs	r2, #64	@ 0x40
 80013fa:	4013      	ands	r3, r2
 80013fc:	d000      	beq.n	8001400 <HAL_ADC_ConfigChannel+0xf0>
 80013fe:	e085      	b.n	800150c <HAL_ADC_ConfigChannel+0x1fc>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	4013      	ands	r3, r2
 8001408:	d000      	beq.n	800140c <HAL_ADC_ConfigChannel+0xfc>
 800140a:	e07d      	b.n	8001508 <HAL_ADC_ConfigChannel+0x1f8>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4013      	ands	r3, r2
 8001416:	d000      	beq.n	800141a <HAL_ADC_ConfigChannel+0x10a>
 8001418:	e074      	b.n	8001504 <HAL_ADC_ConfigChannel+0x1f4>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4013      	ands	r3, r2
 8001424:	d000      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x118>
 8001426:	e06b      	b.n	8001500 <HAL_ADC_ConfigChannel+0x1f0>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4013      	ands	r3, r2
 8001432:	d000      	beq.n	8001436 <HAL_ADC_ConfigChannel+0x126>
 8001434:	e062      	b.n	80014fc <HAL_ADC_ConfigChannel+0x1ec>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	@ 0x80
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	4013      	ands	r3, r2
 8001440:	d000      	beq.n	8001444 <HAL_ADC_ConfigChannel+0x134>
 8001442:	e059      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x1e8>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	015b      	lsls	r3, r3, #5
 800144c:	4013      	ands	r3, r2
 800144e:	d151      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x1e4>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	019b      	lsls	r3, r3, #6
 8001458:	4013      	ands	r3, r2
 800145a:	d149      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1e0>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	01db      	lsls	r3, r3, #7
 8001464:	4013      	ands	r3, r2
 8001466:	d141      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1dc>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	4013      	ands	r3, r2
 8001472:	d139      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1d8>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	4013      	ands	r3, r2
 800147e:	d131      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x1d4>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	d129      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d0>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	02db      	lsls	r3, r3, #11
 8001494:	4013      	ands	r3, r2
 8001496:	d121      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1cc>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	031b      	lsls	r3, r3, #12
 80014a0:	4013      	ands	r3, r2
 80014a2:	d119      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x1c8>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	035b      	lsls	r3, r3, #13
 80014ac:	4013      	ands	r3, r2
 80014ae:	d111      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1c4>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	039b      	lsls	r3, r3, #14
 80014b8:	4013      	ands	r3, r2
 80014ba:	d109      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1c0>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	03db      	lsls	r3, r3, #15
 80014c4:	4013      	ands	r3, r2
 80014c6:	d001      	beq.n	80014cc <HAL_ADC_ConfigChannel+0x1bc>
 80014c8:	2316      	movs	r3, #22
 80014ca:	e02c      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014cc:	2300      	movs	r3, #0
 80014ce:	e02a      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014d0:	2315      	movs	r3, #21
 80014d2:	e028      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014d4:	2314      	movs	r3, #20
 80014d6:	e026      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014d8:	2313      	movs	r3, #19
 80014da:	e024      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014dc:	2312      	movs	r3, #18
 80014de:	e022      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014e0:	2311      	movs	r3, #17
 80014e2:	e020      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014e4:	2310      	movs	r3, #16
 80014e6:	e01e      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014e8:	230f      	movs	r3, #15
 80014ea:	e01c      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014ec:	230e      	movs	r3, #14
 80014ee:	e01a      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014f0:	230d      	movs	r3, #13
 80014f2:	e018      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014f4:	230c      	movs	r3, #12
 80014f6:	e016      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014f8:	230b      	movs	r3, #11
 80014fa:	e014      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 80014fc:	230a      	movs	r3, #10
 80014fe:	e012      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 8001500:	2309      	movs	r3, #9
 8001502:	e010      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 8001504:	2308      	movs	r3, #8
 8001506:	e00e      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 8001508:	2307      	movs	r3, #7
 800150a:	e00c      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 800150c:	2306      	movs	r3, #6
 800150e:	e00a      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 8001510:	2305      	movs	r3, #5
 8001512:	e008      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 8001514:	2304      	movs	r3, #4
 8001516:	e006      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 8001518:	2303      	movs	r3, #3
 800151a:	e004      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 800151c:	2302      	movs	r3, #2
 800151e:	e002      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_ADC_ConfigChannel+0x216>
 8001524:	2300      	movs	r3, #0
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	6852      	ldr	r2, [r2, #4]
 800152a:	201f      	movs	r0, #31
 800152c:	4002      	ands	r2, r0
 800152e:	4093      	lsls	r3, r2
 8001530:	000a      	movs	r2, r1
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	429a      	cmp	r2, r3
 8001546:	d808      	bhi.n	800155a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	001a      	movs	r2, r3
 8001556:	f7ff fc8c 	bl	8000e72 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	6819      	ldr	r1, [r3, #0]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	001a      	movs	r2, r3
 8001568:	f7ff fcc6 	bl	8000ef8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db00      	blt.n	8001576 <HAL_ADC_ConfigChannel+0x266>
 8001574:	e096      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001576:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <HAL_ADC_ConfigChannel+0x364>)
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff fc39 	bl	8000df0 <LL_ADC_GetCommonPathInternalCh>
 800157e:	0003      	movs	r3, r0
 8001580:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a3c      	ldr	r2, [pc, #240]	@ (8001678 <HAL_ADC_ConfigChannel+0x368>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d123      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001594:	d11e      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	2280      	movs	r2, #128	@ 0x80
 800159a:	0412      	lsls	r2, r2, #16
 800159c:	4313      	orrs	r3, r2
 800159e:	4a35      	ldr	r2, [pc, #212]	@ (8001674 <HAL_ADC_ConfigChannel+0x364>)
 80015a0:	0019      	movs	r1, r3
 80015a2:	0010      	movs	r0, r2
 80015a4:	f7ff fc10 	bl	8000dc8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80015a8:	4b34      	ldr	r3, [pc, #208]	@ (800167c <HAL_ADC_ConfigChannel+0x36c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4934      	ldr	r1, [pc, #208]	@ (8001680 <HAL_ADC_ConfigChannel+0x370>)
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7fe fdaa 	bl	8000108 <__udivsi3>
 80015b4:	0003      	movs	r3, r0
 80015b6:	001a      	movs	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	189b      	adds	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	3301      	adds	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015c4:	e002      	b.n	80015cc <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f9      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015d2:	e067      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001684 <HAL_ADC_ConfigChannel+0x374>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d162      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	03db      	lsls	r3, r3, #15
 80015e4:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015e6:	d15d      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	03d2      	lsls	r2, r2, #15
 80015ee:	4313      	orrs	r3, r2
 80015f0:	4a20      	ldr	r2, [pc, #128]	@ (8001674 <HAL_ADC_ConfigChannel+0x364>)
 80015f2:	0019      	movs	r1, r3
 80015f4:	0010      	movs	r0, r2
 80015f6:	f7ff fbe7 	bl	8000dc8 <LL_ADC_SetCommonPathInternalCh>
 80015fa:	e053      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	061b      	lsls	r3, r3, #24
 8001604:	429a      	cmp	r2, r3
 8001606:	d004      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800160c:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <HAL_ADC_ConfigChannel+0x360>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d107      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0019      	movs	r1, r3
 800161c:	0010      	movs	r0, r2
 800161e:	f7ff fc59 	bl	8000ed4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	da3c      	bge.n	80016a4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_ADC_ConfigChannel+0x364>)
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fbdf 	bl	8000df0 <LL_ADC_GetCommonPathInternalCh>
 8001632:	0003      	movs	r3, r0
 8001634:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <HAL_ADC_ConfigChannel+0x368>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d108      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <HAL_ADC_ConfigChannel+0x378>)
 8001644:	4013      	ands	r3, r2
 8001646:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_ADC_ConfigChannel+0x364>)
 8001648:	0019      	movs	r1, r3
 800164a:	0010      	movs	r0, r2
 800164c:	f7ff fbbc 	bl	8000dc8 <LL_ADC_SetCommonPathInternalCh>
 8001650:	e028      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0b      	ldr	r2, [pc, #44]	@ (8001684 <HAL_ADC_ConfigChannel+0x374>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d123      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4a0b      	ldr	r2, [pc, #44]	@ (800168c <HAL_ADC_ConfigChannel+0x37c>)
 8001660:	4013      	ands	r3, r2
 8001662:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <HAL_ADC_ConfigChannel+0x364>)
 8001664:	0019      	movs	r1, r3
 8001666:	0010      	movs	r0, r2
 8001668:	f7ff fbae 	bl	8000dc8 <LL_ADC_SetCommonPathInternalCh>
 800166c:	e01a      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x394>
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	80000004 	.word	0x80000004
 8001674:	40012708 	.word	0x40012708
 8001678:	a4000200 	.word	0xa4000200
 800167c:	20000000 	.word	0x20000000
 8001680:	00030d40 	.word	0x00030d40
 8001684:	a8000400 	.word	0xa8000400
 8001688:	ff7fffff 	.word	0xff7fffff
 800168c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001694:	2220      	movs	r2, #32
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800169c:	2317      	movs	r3, #23
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2254      	movs	r2, #84	@ 0x54
 80016a8:	2100      	movs	r1, #0
 80016aa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80016ac:	2317      	movs	r3, #23
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	781b      	ldrb	r3, [r3, #0]
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b006      	add	sp, #24
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	0002      	movs	r2, r0
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80016ce:	d809      	bhi.n	80016e4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d0:	1dfb      	adds	r3, r7, #7
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	001a      	movs	r2, r3
 80016d6:	231f      	movs	r3, #31
 80016d8:	401a      	ands	r2, r3
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <__NVIC_EnableIRQ+0x30>)
 80016dc:	2101      	movs	r1, #1
 80016de:	4091      	lsls	r1, r2
 80016e0:	000a      	movs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80016e4:	46c0      	nop			@ (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	0002      	movs	r2, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b7f      	cmp	r3, #127	@ 0x7f
 8001704:	d828      	bhi.n	8001758 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001706:	4a2f      	ldr	r2, [pc, #188]	@ (80017c4 <__NVIC_SetPriority+0xd4>)
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	33c0      	adds	r3, #192	@ 0xc0
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	589b      	ldr	r3, [r3, r2]
 8001716:	1dfa      	adds	r2, r7, #7
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	0011      	movs	r1, r2
 800171c:	2203      	movs	r2, #3
 800171e:	400a      	ands	r2, r1
 8001720:	00d2      	lsls	r2, r2, #3
 8001722:	21ff      	movs	r1, #255	@ 0xff
 8001724:	4091      	lsls	r1, r2
 8001726:	000a      	movs	r2, r1
 8001728:	43d2      	mvns	r2, r2
 800172a:	401a      	ands	r2, r3
 800172c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	019b      	lsls	r3, r3, #6
 8001732:	22ff      	movs	r2, #255	@ 0xff
 8001734:	401a      	ands	r2, r3
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	0018      	movs	r0, r3
 800173c:	2303      	movs	r3, #3
 800173e:	4003      	ands	r3, r0
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001744:	481f      	ldr	r0, [pc, #124]	@ (80017c4 <__NVIC_SetPriority+0xd4>)
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b25b      	sxtb	r3, r3
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	430a      	orrs	r2, r1
 8001750:	33c0      	adds	r3, #192	@ 0xc0
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001756:	e031      	b.n	80017bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001758:	4a1b      	ldr	r2, [pc, #108]	@ (80017c8 <__NVIC_SetPriority+0xd8>)
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	0019      	movs	r1, r3
 8001760:	230f      	movs	r3, #15
 8001762:	400b      	ands	r3, r1
 8001764:	3b08      	subs	r3, #8
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3306      	adds	r3, #6
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	18d3      	adds	r3, r2, r3
 800176e:	3304      	adds	r3, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1dfa      	adds	r2, r7, #7
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	0011      	movs	r1, r2
 8001778:	2203      	movs	r2, #3
 800177a:	400a      	ands	r2, r1
 800177c:	00d2      	lsls	r2, r2, #3
 800177e:	21ff      	movs	r1, #255	@ 0xff
 8001780:	4091      	lsls	r1, r2
 8001782:	000a      	movs	r2, r1
 8001784:	43d2      	mvns	r2, r2
 8001786:	401a      	ands	r2, r3
 8001788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	22ff      	movs	r2, #255	@ 0xff
 8001790:	401a      	ands	r2, r3
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	0018      	movs	r0, r3
 8001798:	2303      	movs	r3, #3
 800179a:	4003      	ands	r3, r0
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017a0:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <__NVIC_SetPriority+0xd8>)
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	001c      	movs	r4, r3
 80017a8:	230f      	movs	r3, #15
 80017aa:	4023      	ands	r3, r4
 80017ac:	3b08      	subs	r3, #8
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	430a      	orrs	r2, r1
 80017b2:	3306      	adds	r3, #6
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	18c3      	adds	r3, r0, r3
 80017b8:	3304      	adds	r3, #4
 80017ba:	601a      	str	r2, [r3, #0]
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b003      	add	sp, #12
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	045b      	lsls	r3, r3, #17
 80017dc:	429a      	cmp	r2, r3
 80017de:	d301      	bcc.n	80017e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e0:	2301      	movs	r3, #1
 80017e2:	e010      	b.n	8001806 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <SysTick_Config+0x44>)
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	3a01      	subs	r2, #1
 80017ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ec:	2301      	movs	r3, #1
 80017ee:	425b      	negs	r3, r3
 80017f0:	2103      	movs	r1, #3
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff ff7c 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <SysTick_Config+0x44>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <SysTick_Config+0x44>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	210f      	movs	r1, #15
 8001820:	187b      	adds	r3, r7, r1
 8001822:	1c02      	adds	r2, r0, #0
 8001824:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	187b      	adds	r3, r7, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b004      	add	sp, #16
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	0002      	movs	r2, r0
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b25b      	sxtb	r3, r3
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff ff33 	bl	80016bc <__NVIC_EnableIRQ>
}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff ffaf 	bl	80017cc <SysTick_Config>
 800186e:	0003      	movs	r3, r0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e077      	b.n	800197a <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a3d      	ldr	r2, [pc, #244]	@ (8001984 <HAL_DMA_Init+0x10c>)
 8001890:	4694      	mov	ip, r2
 8001892:	4463      	add	r3, ip
 8001894:	2114      	movs	r1, #20
 8001896:	0018      	movs	r0, r3
 8001898:	f7fe fc36 	bl	8000108 <__udivsi3>
 800189c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800189e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2225      	movs	r2, #37	@ 0x25
 80018a8:	2102      	movs	r1, #2
 80018aa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4934      	ldr	r1, [pc, #208]	@ (8001988 <HAL_DMA_Init+0x110>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6819      	ldr	r1, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 f8fb 	bl	8001af0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	01db      	lsls	r3, r3, #7
 8001902:	429a      	cmp	r2, r3
 8001904:	d102      	bne.n	800190c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001914:	21ff      	movs	r1, #255	@ 0xff
 8001916:	400a      	ands	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001922:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d011      	beq.n	8001950 <HAL_DMA_Init+0xd8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d80d      	bhi.n	8001950 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 f906 	bl	8001b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	e008      	b.n	8001962 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2225      	movs	r2, #37	@ 0x25
 800196c:	2101      	movs	r1, #1
 800196e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2224      	movs	r2, #36	@ 0x24
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	bffdfff8 	.word	0xbffdfff8
 8001988:	ffff800f 	.word	0xffff800f

0800198c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001994:	4b55      	ldr	r3, [pc, #340]	@ (8001aec <HAL_DMA_IRQHandler+0x160>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	221c      	movs	r2, #28
 80019a8:	4013      	ands	r3, r2
 80019aa:	2204      	movs	r2, #4
 80019ac:	409a      	lsls	r2, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	d027      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x7a>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2204      	movs	r2, #4
 80019ba:	4013      	ands	r3, r2
 80019bc:	d023      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2220      	movs	r2, #32
 80019c6:	4013      	ands	r3, r2
 80019c8:	d107      	bne.n	80019da <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2104      	movs	r1, #4
 80019d6:	438a      	bics	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80019da:	4b44      	ldr	r3, [pc, #272]	@ (8001aec <HAL_DMA_IRQHandler+0x160>)
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	221c      	movs	r2, #28
 80019e4:	4013      	ands	r3, r2
 80019e6:	2204      	movs	r2, #4
 80019e8:	409a      	lsls	r2, r3
 80019ea:	4b40      	ldr	r3, [pc, #256]	@ (8001aec <HAL_DMA_IRQHandler+0x160>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d100      	bne.n	80019fa <HAL_DMA_IRQHandler+0x6e>
 80019f8:	e073      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	0010      	movs	r0, r2
 8001a02:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a04:	e06d      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	221c      	movs	r2, #28
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2202      	movs	r2, #2
 8001a10:	409a      	lsls	r2, r3
 8001a12:	0013      	movs	r3, r2
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	d02e      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xec>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d02a      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d10b      	bne.n	8001a46 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	210a      	movs	r1, #10
 8001a3a:	438a      	bics	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2225      	movs	r2, #37	@ 0x25
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001a46:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <HAL_DMA_IRQHandler+0x160>)
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	221c      	movs	r2, #28
 8001a50:	4013      	ands	r3, r2
 8001a52:	2202      	movs	r2, #2
 8001a54:	409a      	lsls	r2, r3
 8001a56:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <HAL_DMA_IRQHandler+0x160>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2224      	movs	r2, #36	@ 0x24
 8001a60:	2100      	movs	r1, #0
 8001a62:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d03a      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	0010      	movs	r0, r2
 8001a74:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a76:	e034      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	221c      	movs	r2, #28
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2208      	movs	r2, #8
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d02b      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x158>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2208      	movs	r2, #8
 8001a90:	4013      	ands	r3, r2
 8001a92:	d027      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	210e      	movs	r1, #14
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_DMA_IRQHandler+0x160>)
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	221c      	movs	r2, #28
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <HAL_DMA_IRQHandler+0x160>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2225      	movs	r2, #37	@ 0x25
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2224      	movs	r2, #36	@ 0x24
 8001acc:	2100      	movs	r1, #0
 8001ace:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	0010      	movs	r0, r2
 8001ae0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	46c0      	nop			@ (mov r8, r8)
}
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b004      	add	sp, #16
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40020000 	.word	0x40020000

08001af0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	001a      	movs	r2, r3
 8001afe:	23ff      	movs	r3, #255	@ 0xff
 8001b00:	4013      	ands	r3, r2
 8001b02:	3b08      	subs	r3, #8
 8001b04:	2114      	movs	r1, #20
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7fe fafe 	bl	8000108 <__udivsi3>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001b18:	4694      	mov	ip, r2
 8001b1a:	4463      	add	r3, ip
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	001a      	movs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001b28:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	221c      	movs	r2, #28
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2201      	movs	r2, #1
 8001b32:	409a      	lsls	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001b38:	46c0      	nop			@ (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b004      	add	sp, #16
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	10008200 	.word	0x10008200
 8001b44:	40020880 	.word	0x40020880

08001b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	22ff      	movs	r2, #255	@ 0xff
 8001b56:	4013      	ands	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b5e:	4694      	mov	ip, r2
 8001b60:	4463      	add	r3, ip
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	001a      	movs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	4013      	ands	r3, r2
 8001b78:	2201      	movs	r2, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001b80:	46c0      	nop			@ (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b004      	add	sp, #16
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	1000823f 	.word	0x1000823f
 8001b8c:	40020940 	.word	0x40020940

08001b90 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b9e:	e153      	b.n	8001e48 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4091      	lsls	r1, r2
 8001baa:	000a      	movs	r2, r1
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d100      	bne.n	8001bb8 <HAL_GPIO_Init+0x28>
 8001bb6:	e144      	b.n	8001e42 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x38>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b12      	cmp	r3, #18
 8001bc6:	d125      	bne.n	8001c14 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	58d3      	ldr	r3, [r2, r3]
 8001bd4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2207      	movs	r2, #7
 8001bda:	4013      	ands	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	409a      	lsls	r2, r3
 8001be2:	0013      	movs	r3, r2
 8001be4:	43da      	mvns	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2107      	movs	r1, #7
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	6979      	ldr	r1, [r7, #20]
 8001c12:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	409a      	lsls	r2, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	43da      	mvns	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2203      	movs	r2, #3
 8001c32:	401a      	ands	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d00b      	beq.n	8001c68 <HAL_GPIO_Init+0xd8>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d007      	beq.n	8001c68 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5c:	2b11      	cmp	r3, #17
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b12      	cmp	r3, #18
 8001c66:	d130      	bne.n	8001cca <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	409a      	lsls	r2, r3
 8001c76:	0013      	movs	r3, r2
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4013      	ands	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d017      	beq.n	8001d02 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	055b      	lsls	r3, r3, #21
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d100      	bne.n	8001d10 <HAL_GPIO_Init+0x180>
 8001d0e:	e098      	b.n	8001e42 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d10:	4a53      	ldr	r2, [pc, #332]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3318      	adds	r3, #24
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	589b      	ldr	r3, [r3, r2]
 8001d1c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2203      	movs	r2, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	220f      	movs	r2, #15
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	0013      	movs	r3, r2
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4013      	ands	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	23a0      	movs	r3, #160	@ 0xa0
 8001d38:	05db      	lsls	r3, r3, #23
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0x1e2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a48      	ldr	r2, [pc, #288]	@ (8001e64 <HAL_GPIO_Init+0x2d4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0x1de>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a47      	ldr	r2, [pc, #284]	@ (8001e68 <HAL_GPIO_Init+0x2d8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00d      	beq.n	8001d6a <HAL_GPIO_Init+0x1da>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a46      	ldr	r2, [pc, #280]	@ (8001e6c <HAL_GPIO_Init+0x2dc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x1d6>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a45      	ldr	r2, [pc, #276]	@ (8001e70 <HAL_GPIO_Init+0x2e0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x1d2>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x1e4>
 8001d62:	2306      	movs	r3, #6
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x1e4>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x1e4>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x1e4>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x1e4>
 8001d72:	2300      	movs	r3, #0
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	2103      	movs	r1, #3
 8001d78:	400a      	ands	r2, r1
 8001d7a:	00d2      	lsls	r2, r2, #3
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d84:	4936      	ldr	r1, [pc, #216]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001d92:	4a33      	ldr	r2, [pc, #204]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001d94:	2380      	movs	r3, #128	@ 0x80
 8001d96:	58d3      	ldr	r3, [r2, r3]
 8001d98:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	025b      	lsls	r3, r3, #9
 8001dac:	4013      	ands	r3, r2
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001db8:	4929      	ldr	r1, [pc, #164]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dba:	2280      	movs	r2, #128	@ 0x80
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001dc0:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	2384      	movs	r3, #132	@ 0x84
 8001dc4:	58d3      	ldr	r3, [r2, r3]
 8001dc6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001de6:	491e      	ldr	r1, [pc, #120]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001de8:	2284      	movs	r2, #132	@ 0x84
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	035b      	lsls	r3, r3, #13
 8001e06:	4013      	ands	r3, r2
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43da      	mvns	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	4013      	ands	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	039b      	lsls	r3, r3, #14
 8001e30:	4013      	ands	r3, r2
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	3301      	adds	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	40da      	lsrs	r2, r3
 8001e50:	1e13      	subs	r3, r2, #0
 8001e52:	d000      	beq.n	8001e56 <HAL_GPIO_Init+0x2c6>
 8001e54:	e6a4      	b.n	8001ba0 <HAL_GPIO_Init+0x10>
  }
}
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	46c0      	nop			@ (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021800 	.word	0x40021800
 8001e64:	50000400 	.word	0x50000400
 8001e68:	50000800 	.word	0x50000800
 8001e6c:	50000c00 	.word	0x50000c00
 8001e70:	50001400 	.word	0x50001400

08001e74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	000a      	movs	r2, r1
 8001e7e:	1cbb      	adds	r3, r7, #2
 8001e80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	1cba      	adds	r2, r7, #2
 8001e88:	8812      	ldrh	r2, [r2, #0]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e8e:	230f      	movs	r3, #15
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e003      	b.n	8001ea0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e98:	230f      	movs	r3, #15
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b004      	add	sp, #16
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e1d0      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d100      	bne.n	8001ece <HAL_RCC_OscConfig+0x1e>
 8001ecc:	e069      	b.n	8001fa2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ece:	4bc8      	ldr	r3, [pc, #800]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2238      	movs	r2, #56	@ 0x38
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d15d      	bne.n	8001fa2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e1bc      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	025b      	lsls	r3, r3, #9
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_OscConfig+0x56>
 8001ef6:	4bbe      	ldr	r3, [pc, #760]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4bbd      	ldr	r3, [pc, #756]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	0249      	lsls	r1, r1, #9
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e020      	b.n	8001f48 <HAL_RCC_OscConfig+0x98>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	23a0      	movs	r3, #160	@ 0xa0
 8001f0c:	02db      	lsls	r3, r3, #11
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d10e      	bne.n	8001f30 <HAL_RCC_OscConfig+0x80>
 8001f12:	4bb7      	ldr	r3, [pc, #732]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4bb6      	ldr	r3, [pc, #728]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f18:	2180      	movs	r1, #128	@ 0x80
 8001f1a:	02c9      	lsls	r1, r1, #11
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	4bb3      	ldr	r3, [pc, #716]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4bb2      	ldr	r3, [pc, #712]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f26:	2180      	movs	r1, #128	@ 0x80
 8001f28:	0249      	lsls	r1, r1, #9
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0x98>
 8001f30:	4baf      	ldr	r3, [pc, #700]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4bae      	ldr	r3, [pc, #696]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f36:	49af      	ldr	r1, [pc, #700]	@ (80021f4 <HAL_RCC_OscConfig+0x344>)
 8001f38:	400a      	ands	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	4bac      	ldr	r3, [pc, #688]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4bab      	ldr	r3, [pc, #684]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f42:	49ad      	ldr	r1, [pc, #692]	@ (80021f8 <HAL_RCC_OscConfig+0x348>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d014      	beq.n	8001f7a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe ff0c 	bl	8000d6c <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f5a:	f7fe ff07 	bl	8000d6c <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	@ 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e17b      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6c:	4ba0      	ldr	r3, [pc, #640]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	029b      	lsls	r3, r3, #10
 8001f74:	4013      	ands	r3, r2
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0xaa>
 8001f78:	e013      	b.n	8001fa2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fef7 	bl	8000d6c <HAL_GetTick>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f84:	f7fe fef2 	bl	8000d6c <HAL_GetTick>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	@ 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e166      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f96:	4b96      	ldr	r3, [pc, #600]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	029b      	lsls	r3, r3, #10
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d100      	bne.n	8001fae <HAL_RCC_OscConfig+0xfe>
 8001fac:	e086      	b.n	80020bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fae:	4b90      	ldr	r3, [pc, #576]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2238      	movs	r2, #56	@ 0x38
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d12f      	bne.n	800201e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e14c      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b89      	ldr	r3, [pc, #548]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a8b      	ldr	r2, [pc, #556]	@ (80021fc <HAL_RCC_OscConfig+0x34c>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	021a      	lsls	r2, r3, #8
 8001fda:	4b85      	ldr	r3, [pc, #532]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d112      	bne.n	800200c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fe6:	4b82      	ldr	r3, [pc, #520]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a85      	ldr	r2, [pc, #532]	@ (8002200 <HAL_RCC_OscConfig+0x350>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	4b7e      	ldr	r3, [pc, #504]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0adb      	lsrs	r3, r3, #11
 8002000:	2207      	movs	r2, #7
 8002002:	4013      	ands	r3, r2
 8002004:	4a7f      	ldr	r2, [pc, #508]	@ (8002204 <HAL_RCC_OscConfig+0x354>)
 8002006:	40da      	lsrs	r2, r3
 8002008:	4b7f      	ldr	r3, [pc, #508]	@ (8002208 <HAL_RCC_OscConfig+0x358>)
 800200a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800200c:	4b7f      	ldr	r3, [pc, #508]	@ (800220c <HAL_RCC_OscConfig+0x35c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0018      	movs	r0, r3
 8002012:	f7fe fe4f 	bl	8000cb4 <HAL_InitTick>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d050      	beq.n	80020bc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e122      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d030      	beq.n	8002088 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002026:	4b72      	ldr	r3, [pc, #456]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a75      	ldr	r2, [pc, #468]	@ (8002200 <HAL_RCC_OscConfig+0x350>)
 800202c:	4013      	ands	r3, r2
 800202e:	0019      	movs	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	4b6e      	ldr	r3, [pc, #440]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800203a:	4b6d      	ldr	r3, [pc, #436]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b6c      	ldr	r3, [pc, #432]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002040:	2180      	movs	r1, #128	@ 0x80
 8002042:	0049      	lsls	r1, r1, #1
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe fe90 	bl	8000d6c <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002052:	f7fe fe8b 	bl	8000d6c <HAL_GetTick>
 8002056:	0002      	movs	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0ff      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002064:	4b62      	ldr	r3, [pc, #392]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4013      	ands	r3, r2
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4a61      	ldr	r2, [pc, #388]	@ (80021fc <HAL_RCC_OscConfig+0x34c>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	021a      	lsls	r2, r3, #8
 8002080:	4b5b      	ldr	r3, [pc, #364]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002082:	430a      	orrs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	e019      	b.n	80020bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002088:	4b59      	ldr	r3, [pc, #356]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b58      	ldr	r3, [pc, #352]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 800208e:	4960      	ldr	r1, [pc, #384]	@ (8002210 <HAL_RCC_OscConfig+0x360>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe fe6a 	bl	8000d6c <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800209e:	f7fe fe65 	bl	8000d6c <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e0d9      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b0:	4b4f      	ldr	r3, [pc, #316]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4013      	ands	r3, r2
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2208      	movs	r2, #8
 80020c2:	4013      	ands	r3, r2
 80020c4:	d042      	beq.n	800214c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80020c6:	4b4a      	ldr	r3, [pc, #296]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2238      	movs	r2, #56	@ 0x38
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b18      	cmp	r3, #24
 80020d0:	d105      	bne.n	80020de <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d138      	bne.n	800214c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0c2      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d019      	beq.n	800211a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020e6:	4b42      	ldr	r3, [pc, #264]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80020e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020ea:	4b41      	ldr	r3, [pc, #260]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	430a      	orrs	r2, r1
 80020f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe fe3b 	bl	8000d6c <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80020fc:	f7fe fe36 	bl	8000d6c <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0aa      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800210e:	4b38      	ldr	r3, [pc, #224]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d0f1      	beq.n	80020fc <HAL_RCC_OscConfig+0x24c>
 8002118:	e018      	b.n	800214c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800211a:	4b35      	ldr	r3, [pc, #212]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 800211c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800211e:	4b34      	ldr	r3, [pc, #208]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002120:	2101      	movs	r1, #1
 8002122:	438a      	bics	r2, r1
 8002124:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fe21 	bl	8000d6c <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002130:	f7fe fe1c 	bl	8000d6c <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e090      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002142:	4b2b      	ldr	r3, [pc, #172]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d1f1      	bne.n	8002130 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2204      	movs	r2, #4
 8002152:	4013      	ands	r3, r2
 8002154:	d100      	bne.n	8002158 <HAL_RCC_OscConfig+0x2a8>
 8002156:	e084      	b.n	8002262 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002158:	230f      	movs	r3, #15
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002160:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2238      	movs	r2, #56	@ 0x38
 8002166:	4013      	ands	r3, r2
 8002168:	2b20      	cmp	r3, #32
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d000      	beq.n	8002176 <HAL_RCC_OscConfig+0x2c6>
 8002174:	e075      	b.n	8002262 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e074      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d106      	bne.n	8002190 <HAL_RCC_OscConfig+0x2e0>
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002184:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 8002188:	2101      	movs	r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800218e:	e01c      	b.n	80021ca <HAL_RCC_OscConfig+0x31a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b05      	cmp	r3, #5
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x302>
 8002198:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 800219a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 800219e:	2104      	movs	r1, #4
 80021a0:	430a      	orrs	r2, r1
 80021a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80021a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021b0:	e00b      	b.n	80021ca <HAL_RCC_OscConfig+0x31a>
 80021b2:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80021b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	438a      	bics	r2, r1
 80021bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80021c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_RCC_OscConfig+0x340>)
 80021c4:	2104      	movs	r1, #4
 80021c6:	438a      	bics	r2, r1
 80021c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d028      	beq.n	8002224 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7fe fdcb 	bl	8000d6c <HAL_GetTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021da:	e01d      	b.n	8002218 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7fe fdc6 	bl	8000d6c <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002214 <HAL_RCC_OscConfig+0x364>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d915      	bls.n	8002218 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e039      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
 80021f0:	40021000 	.word	0x40021000
 80021f4:	fffeffff 	.word	0xfffeffff
 80021f8:	fffbffff 	.word	0xfffbffff
 80021fc:	ffff80ff 	.word	0xffff80ff
 8002200:	ffffc7ff 	.word	0xffffc7ff
 8002204:	02dc6c00 	.word	0x02dc6c00
 8002208:	20000000 	.word	0x20000000
 800220c:	20000004 	.word	0x20000004
 8002210:	fffffeff 	.word	0xfffffeff
 8002214:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002218:	4b14      	ldr	r3, [pc, #80]	@ (800226c <HAL_RCC_OscConfig+0x3bc>)
 800221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d0dc      	beq.n	80021dc <HAL_RCC_OscConfig+0x32c>
 8002222:	e013      	b.n	800224c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe fda2 	bl	8000d6c <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800222c:	e009      	b.n	8002242 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe fd9d 	bl	8000d6c <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	4a0d      	ldr	r2, [pc, #52]	@ (8002270 <HAL_RCC_OscConfig+0x3c0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e010      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_RCC_OscConfig+0x3bc>)
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	2202      	movs	r2, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800224c:	230f      	movs	r3, #15
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d105      	bne.n	8002262 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002256:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_RCC_OscConfig+0x3bc>)
 8002258:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800225a:	4b04      	ldr	r3, [pc, #16]	@ (800226c <HAL_RCC_OscConfig+0x3bc>)
 800225c:	4905      	ldr	r1, [pc, #20]	@ (8002274 <HAL_RCC_OscConfig+0x3c4>)
 800225e:	400a      	ands	r2, r1
 8002260:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b006      	add	sp, #24
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	00001388 	.word	0x00001388
 8002274:	efffffff 	.word	0xefffffff

08002278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0df      	b.n	800244c <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b71      	ldr	r3, [pc, #452]	@ (8002454 <HAL_RCC_ClockConfig+0x1dc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2207      	movs	r2, #7
 8002292:	4013      	ands	r3, r2
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d91e      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b6e      	ldr	r3, [pc, #440]	@ (8002454 <HAL_RCC_ClockConfig+0x1dc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2207      	movs	r2, #7
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002454 <HAL_RCC_ClockConfig+0x1dc>)
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fd5e 	bl	8000d6c <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022b4:	e009      	b.n	80022ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022b6:	f7fe fd59 	bl	8000d6c <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	4a65      	ldr	r2, [pc, #404]	@ (8002458 <HAL_RCC_ClockConfig+0x1e0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0c0      	b.n	800244c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022ca:	4b62      	ldr	r3, [pc, #392]	@ (8002454 <HAL_RCC_ClockConfig+0x1dc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2207      	movs	r2, #7
 80022d0:	4013      	ands	r3, r2
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1ee      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2202      	movs	r2, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	d017      	beq.n	8002312 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2204      	movs	r2, #4
 80022e8:	4013      	ands	r3, r2
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022ec:	4b5b      	ldr	r3, [pc, #364]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a5b      	ldr	r2, [pc, #364]	@ (8002460 <HAL_RCC_ClockConfig+0x1e8>)
 80022f2:	401a      	ands	r2, r3
 80022f4:	4b59      	ldr	r3, [pc, #356]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 80022f6:	21b0      	movs	r1, #176	@ 0xb0
 80022f8:	0109      	lsls	r1, r1, #4
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fe:	4b57      	ldr	r3, [pc, #348]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4a58      	ldr	r2, [pc, #352]	@ (8002464 <HAL_RCC_ClockConfig+0x1ec>)
 8002304:	4013      	ands	r3, r2
 8002306:	0019      	movs	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	4b53      	ldr	r3, [pc, #332]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2201      	movs	r2, #1
 8002318:	4013      	ands	r3, r2
 800231a:	d04b      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002324:	4b4d      	ldr	r3, [pc, #308]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	029b      	lsls	r3, r3, #10
 800232c:	4013      	ands	r3, r2
 800232e:	d11f      	bne.n	8002370 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e08b      	b.n	800244c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233c:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4013      	ands	r3, r2
 8002346:	d113      	bne.n	8002370 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e07f      	b.n	800244c <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d106      	bne.n	8002362 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002354:	4b41      	ldr	r3, [pc, #260]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 8002356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d108      	bne.n	8002370 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e074      	b.n	800244c <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002362:	4b3e      	ldr	r3, [pc, #248]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	2202      	movs	r2, #2
 8002368:	4013      	ands	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e06d      	b.n	800244c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002370:	4b3a      	ldr	r3, [pc, #232]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2207      	movs	r2, #7
 8002376:	4393      	bics	r3, r2
 8002378:	0019      	movs	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4b37      	ldr	r3, [pc, #220]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002384:	f7fe fcf2 	bl	8000d6c <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238c:	e009      	b.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800238e:	f7fe fced 	bl	8000d6c <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	4a2f      	ldr	r2, [pc, #188]	@ (8002458 <HAL_RCC_ClockConfig+0x1e0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e054      	b.n	800244c <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	4b2e      	ldr	r3, [pc, #184]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2238      	movs	r2, #56	@ 0x38
 80023a8:	401a      	ands	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1ec      	bne.n	800238e <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b4:	4b27      	ldr	r3, [pc, #156]	@ (8002454 <HAL_RCC_ClockConfig+0x1dc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2207      	movs	r2, #7
 80023ba:	4013      	ands	r3, r2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d21e      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <HAL_RCC_ClockConfig+0x1dc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2207      	movs	r2, #7
 80023c8:	4393      	bics	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <HAL_RCC_ClockConfig+0x1dc>)
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023d4:	f7fe fcca 	bl	8000d6c <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023dc:	e009      	b.n	80023f2 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023de:	f7fe fcc5 	bl	8000d6c <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002458 <HAL_RCC_ClockConfig+0x1e0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e02c      	b.n	800244c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023f2:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <HAL_RCC_ClockConfig+0x1dc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2207      	movs	r2, #7
 80023f8:	4013      	ands	r3, r2
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1ee      	bne.n	80023de <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2204      	movs	r2, #4
 8002406:	4013      	ands	r3, r2
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800240a:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4a16      	ldr	r2, [pc, #88]	@ (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	4013      	ands	r3, r2
 8002412:	0019      	movs	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800241e:	f000 f82b 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002422:	0001      	movs	r1, r0
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_RCC_ClockConfig+0x1e4>)
 8002426:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	220f      	movs	r2, #15
 800242c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800242e:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <HAL_RCC_ClockConfig+0x1f4>)
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002434:	221f      	movs	r2, #31
 8002436:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002438:	000a      	movs	r2, r1
 800243a:	40da      	lsrs	r2, r3
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_RCC_ClockConfig+0x1f8>)
 800243e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <HAL_RCC_ClockConfig+0x1fc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0018      	movs	r0, r3
 8002446:	f7fe fc35 	bl	8000cb4 <HAL_InitTick>
 800244a:	0003      	movs	r3, r0
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	b004      	add	sp, #16
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40022000 	.word	0x40022000
 8002458:	00001388 	.word	0x00001388
 800245c:	40021000 	.word	0x40021000
 8002460:	ffff84ff 	.word	0xffff84ff
 8002464:	fffff0ff 	.word	0xfffff0ff
 8002468:	ffff8fff 	.word	0xffff8fff
 800246c:	080040cc 	.word	0x080040cc
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800247e:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2238      	movs	r2, #56	@ 0x38
 8002484:	4013      	ands	r3, r2
 8002486:	d10f      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x78>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0adb      	lsrs	r3, r3, #11
 800248e:	2207      	movs	r2, #7
 8002490:	4013      	ands	r3, r2
 8002492:	2201      	movs	r2, #1
 8002494:	409a      	lsls	r2, r3
 8002496:	0013      	movs	r3, r2
 8002498:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	4815      	ldr	r0, [pc, #84]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800249e:	f7fd fe33 	bl	8000108 <__udivsi3>
 80024a2:	0003      	movs	r3, r0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	e01e      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x78>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2238      	movs	r2, #56	@ 0x38
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b4:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x80>)
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	e015      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80024ba:	4b0d      	ldr	r3, [pc, #52]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x78>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2238      	movs	r2, #56	@ 0x38
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d103      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	e00b      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80024ce:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x78>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2238      	movs	r2, #56	@ 0x38
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b18      	cmp	r3, #24
 80024d8:	d103      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024da:	23fa      	movs	r3, #250	@ 0xfa
 80024dc:	01db      	lsls	r3, r3, #7
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	e001      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80024e6:	687b      	ldr	r3, [r7, #4]
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	02dc6c00 	.word	0x02dc6c00
 80024f8:	007a1200 	.word	0x007a1200

080024fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002500:	f7ff ffba 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002504:	0001      	movs	r1, r0
 8002506:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HAL_RCC_GetHCLKFreq+0x30>)
 8002508:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	220f      	movs	r2, #15
 800250e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002510:	4b07      	ldr	r3, [pc, #28]	@ (8002530 <HAL_RCC_GetHCLKFreq+0x34>)
 8002512:	0092      	lsls	r2, r2, #2
 8002514:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002516:	221f      	movs	r2, #31
 8002518:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800251a:	000a      	movs	r2, r1
 800251c:	40da      	lsrs	r2, r3
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_RCC_GetHCLKFreq+0x38>)
 8002520:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002522:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <HAL_RCC_GetHCLKFreq+0x38>)
 8002524:	681b      	ldr	r3, [r3, #0]
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	080040cc 	.word	0x080040cc
 8002534:	20000000 	.word	0x20000000

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800253c:	f7ff ffde 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002540:	0001      	movs	r1, r0
 8002542:	4b07      	ldr	r3, [pc, #28]	@ (8002560 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0b1b      	lsrs	r3, r3, #12
 8002548:	2207      	movs	r2, #7
 800254a:	401a      	ands	r2, r3
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800254e:	0092      	lsls	r2, r2, #2
 8002550:	58d3      	ldr	r3, [r2, r3]
 8002552:	221f      	movs	r2, #31
 8002554:	4013      	ands	r3, r2
 8002556:	40d9      	lsrs	r1, r3
 8002558:	000b      	movs	r3, r1
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	0800410c 	.word	0x0800410c

08002568 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002570:	2313      	movs	r3, #19
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002578:	2312      	movs	r3, #18
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2240      	movs	r2, #64	@ 0x40
 8002586:	4013      	ands	r3, r2
 8002588:	d100      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x24>
 800258a:	e079      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258c:	2011      	movs	r0, #17
 800258e:	183b      	adds	r3, r7, r0
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002594:	4b63      	ldr	r3, [pc, #396]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	055b      	lsls	r3, r3, #21
 800259c:	4013      	ands	r3, r2
 800259e:	d110      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a0:	4b60      	ldr	r3, [pc, #384]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025a6:	2180      	movs	r1, #128	@ 0x80
 80025a8:	0549      	lsls	r1, r1, #21
 80025aa:	430a      	orrs	r2, r1
 80025ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025b2:	2380      	movs	r3, #128	@ 0x80
 80025b4:	055b      	lsls	r3, r3, #21
 80025b6:	4013      	ands	r3, r2
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025bc:	183b      	adds	r3, r7, r0
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80025c2:	4b58      	ldr	r3, [pc, #352]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025c6:	23c0      	movs	r3, #192	@ 0xc0
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4013      	ands	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d019      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d014      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80025de:	4b51      	ldr	r3, [pc, #324]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e2:	4a51      	ldr	r2, [pc, #324]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025ee:	2180      	movs	r1, #128	@ 0x80
 80025f0:	0249      	lsls	r1, r1, #9
 80025f2:	430a      	orrs	r2, r1
 80025f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025fc:	494b      	ldr	r1, [pc, #300]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025fe:	400a      	ands	r2, r1
 8002600:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002602:	4b48      	ldr	r3, [pc, #288]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2201      	movs	r2, #1
 800260c:	4013      	ands	r3, r2
 800260e:	d016      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fbac 	bl	8000d6c <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002618:	e00c      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe fba7 	bl	8000d6c <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	4a42      	ldr	r2, [pc, #264]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d904      	bls.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800262a:	2313      	movs	r3, #19
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2203      	movs	r2, #3
 8002630:	701a      	strb	r2, [r3, #0]
          break;
 8002632:	e004      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002634:	4b3b      	ldr	r3, [pc, #236]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d0ed      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800263e:	2313      	movs	r3, #19
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002648:	4b36      	ldr	r3, [pc, #216]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	4a36      	ldr	r2, [pc, #216]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800264e:	4013      	ands	r3, r2
 8002650:	0019      	movs	r1, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	4b33      	ldr	r3, [pc, #204]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002658:	430a      	orrs	r2, r1
 800265a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800265c:	e005      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265e:	2312      	movs	r3, #18
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2213      	movs	r2, #19
 8002664:	18ba      	adds	r2, r7, r2
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800266a:	2311      	movs	r3, #17
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002678:	4b2a      	ldr	r3, [pc, #168]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800267a:	492e      	ldr	r1, [pc, #184]	@ (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800267c:	400a      	ands	r2, r1
 800267e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	4013      	ands	r3, r2
 8002688:	d009      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800268a:	4b26      	ldr	r3, [pc, #152]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	2203      	movs	r2, #3
 8002690:	4393      	bics	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	4b22      	ldr	r3, [pc, #136]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800269a:	430a      	orrs	r2, r1
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	4a22      	ldr	r2, [pc, #136]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2220      	movs	r2, #32
 80026c2:	4013      	ands	r3, r2
 80026c4:	d008      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c6:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	0899      	lsrs	r1, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026d4:	430a      	orrs	r2, r1
 80026d6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	d009      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	4a15      	ldr	r2, [pc, #84]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026f2:	430a      	orrs	r2, r1
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2280      	movs	r2, #128	@ 0x80
 80026fc:	4013      	ands	r3, r2
 80026fe:	d009      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	22e0      	movs	r2, #224	@ 0xe0
 8002706:	4393      	bics	r3, r2
 8002708:	0019      	movs	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002714:	2312      	movs	r3, #18
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	781b      	ldrb	r3, [r3, #0]
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b006      	add	sp, #24
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	40021000 	.word	0x40021000
 8002728:	fffffcff 	.word	0xfffffcff
 800272c:	fffeffff 	.word	0xfffeffff
 8002730:	00001388 	.word	0x00001388
 8002734:	efffffff 	.word	0xefffffff
 8002738:	ffffcfff 	.word	0xffffcfff
 800273c:	ffff3fff 	.word	0xffff3fff

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e04a      	b.n	80027e8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223d      	movs	r2, #61	@ 0x3d
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223c      	movs	r2, #60	@ 0x3c
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f7fe f8ef 	bl	800094c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223d      	movs	r2, #61	@ 0x3d
 8002772:	2102      	movs	r1, #2
 8002774:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f000 f90b 	bl	800299c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2248      	movs	r2, #72	@ 0x48
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	223e      	movs	r2, #62	@ 0x3e
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223f      	movs	r2, #63	@ 0x3f
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2240      	movs	r2, #64	@ 0x40
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2241      	movs	r2, #65	@ 0x41
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2242      	movs	r2, #66	@ 0x42
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2243      	movs	r2, #67	@ 0x43
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2244      	movs	r2, #68	@ 0x44
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2245      	movs	r2, #69	@ 0x45
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2246      	movs	r2, #70	@ 0x46
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2247      	movs	r2, #71	@ 0x47
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223d      	movs	r2, #61	@ 0x3d
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	230f      	movs	r3, #15
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	223c      	movs	r2, #60	@ 0x3c
 8002806:	5c9b      	ldrb	r3, [r3, r2]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIM_ConfigClockSource+0x20>
 800280c:	2302      	movs	r3, #2
 800280e:	e0bc      	b.n	800298a <HAL_TIM_ConfigClockSource+0x19a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	223c      	movs	r2, #60	@ 0x3c
 8002814:	2101      	movs	r1, #1
 8002816:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	223d      	movs	r2, #61	@ 0x3d
 800281c:	2102      	movs	r1, #2
 800281e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4a5a      	ldr	r2, [pc, #360]	@ (8002994 <HAL_TIM_ConfigClockSource+0x1a4>)
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4a59      	ldr	r2, [pc, #356]	@ (8002998 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2280      	movs	r2, #128	@ 0x80
 8002846:	0192      	lsls	r2, r2, #6
 8002848:	4293      	cmp	r3, r2
 800284a:	d040      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xde>
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	0192      	lsls	r2, r2, #6
 8002850:	4293      	cmp	r3, r2
 8002852:	d900      	bls.n	8002856 <HAL_TIM_ConfigClockSource+0x66>
 8002854:	e088      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002856:	2280      	movs	r2, #128	@ 0x80
 8002858:	0152      	lsls	r2, r2, #5
 800285a:	4293      	cmp	r3, r2
 800285c:	d100      	bne.n	8002860 <HAL_TIM_ConfigClockSource+0x70>
 800285e:	e088      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x182>
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	0152      	lsls	r2, r2, #5
 8002864:	4293      	cmp	r3, r2
 8002866:	d900      	bls.n	800286a <HAL_TIM_ConfigClockSource+0x7a>
 8002868:	e07e      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 800286a:	2b70      	cmp	r3, #112	@ 0x70
 800286c:	d018      	beq.n	80028a0 <HAL_TIM_ConfigClockSource+0xb0>
 800286e:	d900      	bls.n	8002872 <HAL_TIM_ConfigClockSource+0x82>
 8002870:	e07a      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002872:	2b60      	cmp	r3, #96	@ 0x60
 8002874:	d04f      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x126>
 8002876:	d900      	bls.n	800287a <HAL_TIM_ConfigClockSource+0x8a>
 8002878:	e076      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 800287a:	2b50      	cmp	r3, #80	@ 0x50
 800287c:	d03b      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x106>
 800287e:	d900      	bls.n	8002882 <HAL_TIM_ConfigClockSource+0x92>
 8002880:	e072      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002882:	2b40      	cmp	r3, #64	@ 0x40
 8002884:	d057      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x146>
 8002886:	d900      	bls.n	800288a <HAL_TIM_ConfigClockSource+0x9a>
 8002888:	e06e      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 800288a:	2b30      	cmp	r3, #48	@ 0x30
 800288c:	d063      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x166>
 800288e:	d86b      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002890:	2b20      	cmp	r3, #32
 8002892:	d060      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x166>
 8002894:	d868      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d05d      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x166>
 800289a:	2b10      	cmp	r3, #16
 800289c:	d05b      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x166>
 800289e:	e063      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028b0:	f000 f962 	bl	8002b78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2277      	movs	r2, #119	@ 0x77
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e052      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028de:	f000 f94b 	bl	8002b78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2180      	movs	r1, #128	@ 0x80
 80028ee:	01c9      	lsls	r1, r1, #7
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
      break;
 80028f4:	e03e      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	001a      	movs	r2, r3
 8002904:	f000 f8bc 	bl	8002a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2150      	movs	r1, #80	@ 0x50
 800290e:	0018      	movs	r0, r3
 8002910:	f000 f916 	bl	8002b40 <TIM_ITRx_SetConfig>
      break;
 8002914:	e02e      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002922:	001a      	movs	r2, r3
 8002924:	f000 f8da 	bl	8002adc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2160      	movs	r1, #96	@ 0x60
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f906 	bl	8002b40 <TIM_ITRx_SetConfig>
      break;
 8002934:	e01e      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002942:	001a      	movs	r2, r3
 8002944:	f000 f89c 	bl	8002a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2140      	movs	r1, #64	@ 0x40
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f8f6 	bl	8002b40 <TIM_ITRx_SetConfig>
      break;
 8002954:	e00e      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0019      	movs	r1, r3
 8002960:	0010      	movs	r0, r2
 8002962:	f000 f8ed 	bl	8002b40 <TIM_ITRx_SetConfig>
      break;
 8002966:	e005      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002968:	230f      	movs	r3, #15
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
      break;
 8002970:	e000      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002972:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	223d      	movs	r2, #61	@ 0x3d
 8002978:	2101      	movs	r1, #1
 800297a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	223c      	movs	r2, #60	@ 0x3c
 8002980:	2100      	movs	r1, #0
 8002982:	5499      	strb	r1, [r3, r2]

  return status;
 8002984:	230f      	movs	r3, #15
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	781b      	ldrb	r3, [r3, #0]
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b004      	add	sp, #16
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	ffceff88 	.word	0xffceff88
 8002998:	ffff00ff 	.word	0xffff00ff

0800299c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002a68 <TIM_Base_SetConfig+0xcc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <TIM_Base_SetConfig+0x20>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a2d      	ldr	r2, [pc, #180]	@ (8002a6c <TIM_Base_SetConfig+0xd0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d108      	bne.n	80029ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2270      	movs	r2, #112	@ 0x70
 80029c0:	4393      	bics	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a25      	ldr	r2, [pc, #148]	@ (8002a68 <TIM_Base_SetConfig+0xcc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00f      	beq.n	80029f6 <TIM_Base_SetConfig+0x5a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a24      	ldr	r2, [pc, #144]	@ (8002a6c <TIM_Base_SetConfig+0xd0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_Base_SetConfig+0x5a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a23      	ldr	r2, [pc, #140]	@ (8002a70 <TIM_Base_SetConfig+0xd4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0x5a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a22      	ldr	r2, [pc, #136]	@ (8002a74 <TIM_Base_SetConfig+0xd8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0x5a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a21      	ldr	r2, [pc, #132]	@ (8002a78 <TIM_Base_SetConfig+0xdc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a20      	ldr	r2, [pc, #128]	@ (8002a7c <TIM_Base_SetConfig+0xe0>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2280      	movs	r2, #128	@ 0x80
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	001a      	movs	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a68 <TIM_Base_SetConfig+0xcc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d007      	beq.n	8002a40 <TIM_Base_SetConfig+0xa4>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a10      	ldr	r2, [pc, #64]	@ (8002a74 <TIM_Base_SetConfig+0xd8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d003      	beq.n	8002a40 <TIM_Base_SetConfig+0xa4>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a78 <TIM_Base_SetConfig+0xdc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d103      	bne.n	8002a48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40002000 	.word	0x40002000
 8002a74:	40014400 	.word	0x40014400
 8002a78:	40014800 	.word	0x40014800
 8002a7c:	fffffcff 	.word	0xfffffcff

08002a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4393      	bics	r3, r2
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	22f0      	movs	r2, #240	@ 0xf0
 8002aaa:	4393      	bics	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	220a      	movs	r2, #10
 8002abc:	4393      	bics	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	621a      	str	r2, [r3, #32]
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b006      	add	sp, #24
 8002ada:	bd80      	pop	{r7, pc}

08002adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	2210      	movs	r2, #16
 8002af4:	4393      	bics	r3, r2
 8002af6:	001a      	movs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4a0d      	ldr	r2, [pc, #52]	@ (8002b3c <TIM_TI2_ConfigInputStage+0x60>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	031b      	lsls	r3, r3, #12
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	22a0      	movs	r2, #160	@ 0xa0
 8002b18:	4393      	bics	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	621a      	str	r2, [r3, #32]
}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b006      	add	sp, #24
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	ffff0fff 	.word	0xffff0fff

08002b40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <TIM_ITRx_SetConfig+0x34>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	2207      	movs	r2, #7
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	609a      	str	r2, [r3, #8]
}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b004      	add	sp, #16
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	ffcfff8f 	.word	0xffcfff8f

08002b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	4a09      	ldr	r2, [pc, #36]	@ (8002bb4 <TIM_ETR_SetConfig+0x3c>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	021a      	lsls	r2, r3, #8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	609a      	str	r2, [r3, #8]
}
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b006      	add	sp, #24
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	ffff00ff 	.word	0xffff00ff

08002bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223c      	movs	r2, #60	@ 0x3c
 8002bc6:	5c9b      	ldrb	r3, [r3, r2]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e04a      	b.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	223c      	movs	r2, #60	@ 0x3c
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	223d      	movs	r2, #61	@ 0x3d
 8002bdc:	2102      	movs	r1, #2
 8002bde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d108      	bne.n	8002c0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2270      	movs	r2, #112	@ 0x70
 8002c10:	4393      	bics	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a11      	ldr	r2, [pc, #68]	@ (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a10      	ldr	r2, [pc, #64]	@ (8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10c      	bne.n	8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	4393      	bics	r3, r2
 8002c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	223d      	movs	r2, #61	@ 0x3d
 8002c58:	2101      	movs	r1, #1
 8002c5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	223c      	movs	r2, #60	@ 0x3c
 8002c60:	2100      	movs	r1, #0
 8002c62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	0018      	movs	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b004      	add	sp, #16
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	ff0fffff 	.word	0xff0fffff
 8002c78:	40000400 	.word	0x40000400

08002c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e046      	b.n	8002d1c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2288      	movs	r2, #136	@ 0x88
 8002c92:	589b      	ldr	r3, [r3, r2]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2284      	movs	r2, #132	@ 0x84
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7fd fe72 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2288      	movs	r2, #136	@ 0x88
 8002cac:	2124      	movs	r1, #36	@ 0x24
 8002cae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 f9aa 	bl	8003024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 f828 	bl	8002d28 <UART_SetConfig>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e01c      	b.n	8002d1c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	490d      	ldr	r1, [pc, #52]	@ (8002d24 <HAL_UART_Init+0xa8>)
 8002cee:	400a      	ands	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	212a      	movs	r1, #42	@ 0x2a
 8002cfe:	438a      	bics	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 fa39 	bl	800318c <UART_CheckIdleState>
 8002d1a:	0003      	movs	r3, r0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	ffffb7ff 	.word	0xffffb7ff

08002d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d30:	231e      	movs	r3, #30
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4aab      	ldr	r2, [pc, #684]	@ (8003004 <UART_SetConfig+0x2dc>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4aa6      	ldr	r2, [pc, #664]	@ (8003008 <UART_SetConfig+0x2e0>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a9d      	ldr	r2, [pc, #628]	@ (800300c <UART_SetConfig+0x2e4>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	0019      	movs	r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	220f      	movs	r2, #15
 8002dac:	4393      	bics	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a93      	ldr	r2, [pc, #588]	@ (8003010 <UART_SetConfig+0x2e8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d127      	bne.n	8002e16 <UART_SetConfig+0xee>
 8002dc6:	4b93      	ldr	r3, [pc, #588]	@ (8003014 <UART_SetConfig+0x2ec>)
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dca:	2203      	movs	r2, #3
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d017      	beq.n	8002e02 <UART_SetConfig+0xda>
 8002dd2:	d81b      	bhi.n	8002e0c <UART_SetConfig+0xe4>
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d00a      	beq.n	8002dee <UART_SetConfig+0xc6>
 8002dd8:	d818      	bhi.n	8002e0c <UART_SetConfig+0xe4>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <UART_SetConfig+0xbc>
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d00a      	beq.n	8002df8 <UART_SetConfig+0xd0>
 8002de2:	e013      	b.n	8002e0c <UART_SetConfig+0xe4>
 8002de4:	231f      	movs	r3, #31
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e021      	b.n	8002e32 <UART_SetConfig+0x10a>
 8002dee:	231f      	movs	r3, #31
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	2202      	movs	r2, #2
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e01c      	b.n	8002e32 <UART_SetConfig+0x10a>
 8002df8:	231f      	movs	r3, #31
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e017      	b.n	8002e32 <UART_SetConfig+0x10a>
 8002e02:	231f      	movs	r3, #31
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2208      	movs	r2, #8
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e012      	b.n	8002e32 <UART_SetConfig+0x10a>
 8002e0c:	231f      	movs	r3, #31
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2210      	movs	r2, #16
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e00d      	b.n	8002e32 <UART_SetConfig+0x10a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a7f      	ldr	r2, [pc, #508]	@ (8003018 <UART_SetConfig+0x2f0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d104      	bne.n	8002e2a <UART_SetConfig+0x102>
 8002e20:	231f      	movs	r3, #31
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e003      	b.n	8002e32 <UART_SetConfig+0x10a>
 8002e2a:	231f      	movs	r3, #31
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	2210      	movs	r2, #16
 8002e30:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d000      	beq.n	8002e40 <UART_SetConfig+0x118>
 8002e3e:	e06f      	b.n	8002f20 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002e40:	231f      	movs	r3, #31
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d01f      	beq.n	8002e8a <UART_SetConfig+0x162>
 8002e4a:	dc22      	bgt.n	8002e92 <UART_SetConfig+0x16a>
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d017      	beq.n	8002e80 <UART_SetConfig+0x158>
 8002e50:	dc1f      	bgt.n	8002e92 <UART_SetConfig+0x16a>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <UART_SetConfig+0x134>
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d005      	beq.n	8002e66 <UART_SetConfig+0x13e>
 8002e5a:	e01a      	b.n	8002e92 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f7ff fb6c 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8002e60:	0003      	movs	r3, r0
 8002e62:	61bb      	str	r3, [r7, #24]
        break;
 8002e64:	e01c      	b.n	8002ea0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002e66:	4b6b      	ldr	r3, [pc, #428]	@ (8003014 <UART_SetConfig+0x2ec>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	4013      	ands	r3, r2
 8002e70:	3301      	adds	r3, #1
 8002e72:	0019      	movs	r1, r3
 8002e74:	4869      	ldr	r0, [pc, #420]	@ (800301c <UART_SetConfig+0x2f4>)
 8002e76:	f7fd f947 	bl	8000108 <__udivsi3>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	61bb      	str	r3, [r7, #24]
        break;
 8002e7e:	e00f      	b.n	8002ea0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e80:	f7ff fafa 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002e84:	0003      	movs	r3, r0
 8002e86:	61bb      	str	r3, [r7, #24]
        break;
 8002e88:	e00a      	b.n	8002ea0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8a:	2380      	movs	r3, #128	@ 0x80
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	61bb      	str	r3, [r7, #24]
        break;
 8002e90:	e006      	b.n	8002ea0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e96:	231e      	movs	r3, #30
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
        break;
 8002e9e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d100      	bne.n	8002ea8 <UART_SetConfig+0x180>
 8002ea6:	e097      	b.n	8002fd8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eac:	4b5c      	ldr	r3, [pc, #368]	@ (8003020 <UART_SetConfig+0x2f8>)
 8002eae:	0052      	lsls	r2, r2, #1
 8002eb0:	5ad3      	ldrh	r3, [r2, r3]
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	69b8      	ldr	r0, [r7, #24]
 8002eb6:	f7fd f927 	bl	8000108 <__udivsi3>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	005a      	lsls	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	18d2      	adds	r2, r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	0019      	movs	r1, r3
 8002ecc:	0010      	movs	r0, r2
 8002ece:	f7fd f91b 	bl	8000108 <__udivsi3>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b0f      	cmp	r3, #15
 8002eda:	d91c      	bls.n	8002f16 <UART_SetConfig+0x1ee>
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d217      	bcs.n	8002f16 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	200e      	movs	r0, #14
 8002eec:	183b      	adds	r3, r7, r0
 8002eee:	210f      	movs	r1, #15
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2207      	movs	r2, #7
 8002efc:	4013      	ands	r3, r2
 8002efe:	b299      	uxth	r1, r3
 8002f00:	183b      	adds	r3, r7, r0
 8002f02:	183a      	adds	r2, r7, r0
 8002f04:	8812      	ldrh	r2, [r2, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	183a      	adds	r2, r7, r0
 8002f10:	8812      	ldrh	r2, [r2, #0]
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	e060      	b.n	8002fd8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f16:	231e      	movs	r3, #30
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	e05b      	b.n	8002fd8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f20:	231f      	movs	r3, #31
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d01f      	beq.n	8002f6a <UART_SetConfig+0x242>
 8002f2a:	dc22      	bgt.n	8002f72 <UART_SetConfig+0x24a>
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d017      	beq.n	8002f60 <UART_SetConfig+0x238>
 8002f30:	dc1f      	bgt.n	8002f72 <UART_SetConfig+0x24a>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <UART_SetConfig+0x214>
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d005      	beq.n	8002f46 <UART_SetConfig+0x21e>
 8002f3a:	e01a      	b.n	8002f72 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f7ff fafc 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8002f40:	0003      	movs	r3, r0
 8002f42:	61bb      	str	r3, [r7, #24]
        break;
 8002f44:	e01c      	b.n	8002f80 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002f46:	4b33      	ldr	r3, [pc, #204]	@ (8003014 <UART_SetConfig+0x2ec>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	4013      	ands	r3, r2
 8002f50:	3301      	adds	r3, #1
 8002f52:	0019      	movs	r1, r3
 8002f54:	4831      	ldr	r0, [pc, #196]	@ (800301c <UART_SetConfig+0x2f4>)
 8002f56:	f7fd f8d7 	bl	8000108 <__udivsi3>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	61bb      	str	r3, [r7, #24]
        break;
 8002f5e:	e00f      	b.n	8002f80 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f60:	f7ff fa8a 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002f64:	0003      	movs	r3, r0
 8002f66:	61bb      	str	r3, [r7, #24]
        break;
 8002f68:	e00a      	b.n	8002f80 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f6a:	2380      	movs	r3, #128	@ 0x80
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	61bb      	str	r3, [r7, #24]
        break;
 8002f70:	e006      	b.n	8002f80 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f76:	231e      	movs	r3, #30
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
        break;
 8002f7e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d028      	beq.n	8002fd8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f8a:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <UART_SetConfig+0x2f8>)
 8002f8c:	0052      	lsls	r2, r2, #1
 8002f8e:	5ad3      	ldrh	r3, [r2, r3]
 8002f90:	0019      	movs	r1, r3
 8002f92:	69b8      	ldr	r0, [r7, #24]
 8002f94:	f7fd f8b8 	bl	8000108 <__udivsi3>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	18d2      	adds	r2, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0019      	movs	r1, r3
 8002faa:	0010      	movs	r0, r2
 8002fac:	f7fd f8ac 	bl	8000108 <__udivsi3>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b0f      	cmp	r3, #15
 8002fb8:	d90a      	bls.n	8002fd0 <UART_SetConfig+0x2a8>
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d205      	bcs.n	8002fd0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	e003      	b.n	8002fd8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002fd0:	231e      	movs	r3, #30
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	226a      	movs	r2, #106	@ 0x6a
 8002fdc:	2101      	movs	r1, #1
 8002fde:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2268      	movs	r2, #104	@ 0x68
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ff4:	231e      	movs	r3, #30
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b008      	add	sp, #32
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	cfff69f3 	.word	0xcfff69f3
 8003008:	ffffcfff 	.word	0xffffcfff
 800300c:	11fff4ff 	.word	0x11fff4ff
 8003010:	40013800 	.word	0x40013800
 8003014:	40021000 	.word	0x40021000
 8003018:	40004400 	.word	0x40004400
 800301c:	02dc6c00 	.word	0x02dc6c00
 8003020:	0800412c 	.word	0x0800412c

08003024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003030:	2208      	movs	r2, #8
 8003032:	4013      	ands	r3, r2
 8003034:	d00b      	beq.n	800304e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a4a      	ldr	r2, [pc, #296]	@ (8003168 <UART_AdvFeatureConfig+0x144>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	2201      	movs	r2, #1
 8003054:	4013      	ands	r3, r2
 8003056:	d00b      	beq.n	8003070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a43      	ldr	r2, [pc, #268]	@ (800316c <UART_AdvFeatureConfig+0x148>)
 8003060:	4013      	ands	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	2202      	movs	r2, #2
 8003076:	4013      	ands	r3, r2
 8003078:	d00b      	beq.n	8003092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a3b      	ldr	r2, [pc, #236]	@ (8003170 <UART_AdvFeatureConfig+0x14c>)
 8003082:	4013      	ands	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	2204      	movs	r2, #4
 8003098:	4013      	ands	r3, r2
 800309a:	d00b      	beq.n	80030b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a34      	ldr	r2, [pc, #208]	@ (8003174 <UART_AdvFeatureConfig+0x150>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	2210      	movs	r2, #16
 80030ba:	4013      	ands	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003178 <UART_AdvFeatureConfig+0x154>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	2220      	movs	r2, #32
 80030dc:	4013      	ands	r3, r2
 80030de:	d00b      	beq.n	80030f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	4a25      	ldr	r2, [pc, #148]	@ (800317c <UART_AdvFeatureConfig+0x158>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	2240      	movs	r2, #64	@ 0x40
 80030fe:	4013      	ands	r3, r2
 8003100:	d01d      	beq.n	800313e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a1d      	ldr	r2, [pc, #116]	@ (8003180 <UART_AdvFeatureConfig+0x15c>)
 800310a:	4013      	ands	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	035b      	lsls	r3, r3, #13
 8003122:	429a      	cmp	r2, r3
 8003124:	d10b      	bne.n	800313e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a15      	ldr	r2, [pc, #84]	@ (8003184 <UART_AdvFeatureConfig+0x160>)
 800312e:	4013      	ands	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	2280      	movs	r2, #128	@ 0x80
 8003144:	4013      	ands	r3, r2
 8003146:	d00b      	beq.n	8003160 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4a0e      	ldr	r2, [pc, #56]	@ (8003188 <UART_AdvFeatureConfig+0x164>)
 8003150:	4013      	ands	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  }
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b002      	add	sp, #8
 8003166:	bd80      	pop	{r7, pc}
 8003168:	ffff7fff 	.word	0xffff7fff
 800316c:	fffdffff 	.word	0xfffdffff
 8003170:	fffeffff 	.word	0xfffeffff
 8003174:	fffbffff 	.word	0xfffbffff
 8003178:	ffffefff 	.word	0xffffefff
 800317c:	ffffdfff 	.word	0xffffdfff
 8003180:	ffefffff 	.word	0xffefffff
 8003184:	ff9fffff 	.word	0xff9fffff
 8003188:	fff7ffff 	.word	0xfff7ffff

0800318c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b092      	sub	sp, #72	@ 0x48
 8003190:	af02      	add	r7, sp, #8
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2290      	movs	r2, #144	@ 0x90
 8003198:	2100      	movs	r1, #0
 800319a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800319c:	f7fd fde6 	bl	8000d6c <HAL_GetTick>
 80031a0:	0003      	movs	r3, r0
 80031a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2208      	movs	r2, #8
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d12d      	bne.n	800320e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b4:	2280      	movs	r2, #128	@ 0x80
 80031b6:	0391      	lsls	r1, r2, #14
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4a47      	ldr	r2, [pc, #284]	@ (80032d8 <UART_CheckIdleState+0x14c>)
 80031bc:	9200      	str	r2, [sp, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	f000 f88e 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 80031c4:	1e03      	subs	r3, r0, #0
 80031c6:	d022      	beq.n	800320e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031c8:	f3ef 8310 	mrs	r3, PRIMASK
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80031d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031d2:	2301      	movs	r3, #1
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d8:	f383 8810 	msr	PRIMASK, r3
}
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2180      	movs	r1, #128	@ 0x80
 80031ea:	438a      	bics	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2288      	movs	r2, #136	@ 0x88
 80031fe:	2120      	movs	r1, #32
 8003200:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2284      	movs	r2, #132	@ 0x84
 8003206:	2100      	movs	r1, #0
 8003208:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e060      	b.n	80032d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2204      	movs	r2, #4
 8003216:	4013      	ands	r3, r2
 8003218:	2b04      	cmp	r3, #4
 800321a:	d146      	bne.n	80032aa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800321c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321e:	2280      	movs	r2, #128	@ 0x80
 8003220:	03d1      	lsls	r1, r2, #15
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4a2c      	ldr	r2, [pc, #176]	@ (80032d8 <UART_CheckIdleState+0x14c>)
 8003226:	9200      	str	r2, [sp, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	f000 f859 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d03b      	beq.n	80032aa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003232:	f3ef 8310 	mrs	r3, PRIMASK
 8003236:	60fb      	str	r3, [r7, #12]
  return(result);
 8003238:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800323a:	637b      	str	r3, [r7, #52]	@ 0x34
 800323c:	2301      	movs	r3, #1
 800323e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f383 8810 	msr	PRIMASK, r3
}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4922      	ldr	r1, [pc, #136]	@ (80032dc <UART_CheckIdleState+0x150>)
 8003254:	400a      	ands	r2, r1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f383 8810 	msr	PRIMASK, r3
}
 8003262:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003264:	f3ef 8310 	mrs	r3, PRIMASK
 8003268:	61bb      	str	r3, [r7, #24]
  return(result);
 800326a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326c:	633b      	str	r3, [r7, #48]	@ 0x30
 800326e:	2301      	movs	r3, #1
 8003270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f383 8810 	msr	PRIMASK, r3
}
 8003278:	46c0      	nop			@ (mov r8, r8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	438a      	bics	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f383 8810 	msr	PRIMASK, r3
}
 8003294:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	228c      	movs	r2, #140	@ 0x8c
 800329a:	2120      	movs	r1, #32
 800329c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2284      	movs	r2, #132	@ 0x84
 80032a2:	2100      	movs	r1, #0
 80032a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e012      	b.n	80032d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2288      	movs	r2, #136	@ 0x88
 80032ae:	2120      	movs	r1, #32
 80032b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	228c      	movs	r2, #140	@ 0x8c
 80032b6:	2120      	movs	r1, #32
 80032b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2284      	movs	r2, #132	@ 0x84
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b010      	add	sp, #64	@ 0x40
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	01ffffff 	.word	0x01ffffff
 80032dc:	fffffedf 	.word	0xfffffedf

080032e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f0:	e051      	b.n	8003396 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3301      	adds	r3, #1
 80032f6:	d04e      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f8:	f7fd fd38 	bl	8000d6c <HAL_GetTick>
 80032fc:	0002      	movs	r2, r0
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	d302      	bcc.n	800330e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e051      	b.n	80033b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2204      	movs	r2, #4
 800331a:	4013      	ands	r3, r2
 800331c:	d03b      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0xb6>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b80      	cmp	r3, #128	@ 0x80
 8003322:	d038      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b40      	cmp	r3, #64	@ 0x40
 8003328:	d035      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2208      	movs	r2, #8
 8003332:	4013      	ands	r3, r2
 8003334:	2b08      	cmp	r3, #8
 8003336:	d111      	bne.n	800335c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2208      	movs	r2, #8
 800333e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f83c 	bl	80033c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2290      	movs	r2, #144	@ 0x90
 800334c:	2108      	movs	r1, #8
 800334e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2284      	movs	r2, #132	@ 0x84
 8003354:	2100      	movs	r1, #0
 8003356:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e02c      	b.n	80033b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	401a      	ands	r2, r3
 8003368:	2380      	movs	r3, #128	@ 0x80
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	429a      	cmp	r2, r3
 800336e:	d112      	bne.n	8003396 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2280      	movs	r2, #128	@ 0x80
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	0018      	movs	r0, r3
 800337e:	f000 f81f 	bl	80033c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2290      	movs	r2, #144	@ 0x90
 8003386:	2120      	movs	r1, #32
 8003388:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2284      	movs	r2, #132	@ 0x84
 800338e:	2100      	movs	r1, #0
 8003390:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e00f      	b.n	80033b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	425a      	negs	r2, r3
 80033a6:	4153      	adcs	r3, r2
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	001a      	movs	r2, r3
 80033ac:	1dfb      	adds	r3, r7, #7
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d09e      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08e      	sub	sp, #56	@ 0x38
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033c8:	f3ef 8310 	mrs	r3, PRIMASK
 80033cc:	617b      	str	r3, [r7, #20]
  return(result);
 80033ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80033d2:	2301      	movs	r3, #1
 80033d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f383 8810 	msr	PRIMASK, r3
}
 80033dc:	46c0      	nop			@ (mov r8, r8)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4926      	ldr	r1, [pc, #152]	@ (8003484 <UART_EndRxTransfer+0xc4>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f383 8810 	msr	PRIMASK, r3
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033fa:	f3ef 8310 	mrs	r3, PRIMASK
 80033fe:	623b      	str	r3, [r7, #32]
  return(result);
 8003400:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003402:	633b      	str	r3, [r7, #48]	@ 0x30
 8003404:	2301      	movs	r3, #1
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	f383 8810 	msr	PRIMASK, r3
}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	491b      	ldr	r1, [pc, #108]	@ (8003488 <UART_EndRxTransfer+0xc8>)
 800341c:	400a      	ands	r2, r1
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	f383 8810 	msr	PRIMASK, r3
}
 800342a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d118      	bne.n	8003466 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003434:	f3ef 8310 	mrs	r3, PRIMASK
 8003438:	60bb      	str	r3, [r7, #8]
  return(result);
 800343a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800343e:	2301      	movs	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f383 8810 	msr	PRIMASK, r3
}
 8003448:	46c0      	nop			@ (mov r8, r8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2110      	movs	r1, #16
 8003456:	438a      	bics	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f383 8810 	msr	PRIMASK, r3
}
 8003464:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	228c      	movs	r2, #140	@ 0x8c
 800346a:	2120      	movs	r1, #32
 800346c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b00e      	add	sp, #56	@ 0x38
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	fffffedf 	.word	0xfffffedf
 8003488:	effffffe 	.word	0xeffffffe

0800348c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2284      	movs	r2, #132	@ 0x84
 8003498:	5c9b      	ldrb	r3, [r3, r2]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800349e:	2302      	movs	r3, #2
 80034a0:	e027      	b.n	80034f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2284      	movs	r2, #132	@ 0x84
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2288      	movs	r2, #136	@ 0x88
 80034ae:	2124      	movs	r1, #36	@ 0x24
 80034b0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	438a      	bics	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a0b      	ldr	r2, [pc, #44]	@ (80034fc <HAL_UARTEx_DisableFifoMode+0x70>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2288      	movs	r2, #136	@ 0x88
 80034e4:	2120      	movs	r1, #32
 80034e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2284      	movs	r2, #132	@ 0x84
 80034ec:	2100      	movs	r1, #0
 80034ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b004      	add	sp, #16
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			@ (mov r8, r8)
 80034fc:	dfffffff 	.word	0xdfffffff

08003500 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2284      	movs	r2, #132	@ 0x84
 800350e:	5c9b      	ldrb	r3, [r3, r2]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003514:	2302      	movs	r3, #2
 8003516:	e02e      	b.n	8003576 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2284      	movs	r2, #132	@ 0x84
 800351c:	2101      	movs	r1, #1
 800351e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2288      	movs	r2, #136	@ 0x88
 8003524:	2124      	movs	r1, #36	@ 0x24
 8003526:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2101      	movs	r1, #1
 800353c:	438a      	bics	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	08d9      	lsrs	r1, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	0018      	movs	r0, r3
 8003558:	f000 f854 	bl	8003604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2288      	movs	r2, #136	@ 0x88
 8003568:	2120      	movs	r1, #32
 800356a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2284      	movs	r2, #132	@ 0x84
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b004      	add	sp, #16
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2284      	movs	r2, #132	@ 0x84
 800358e:	5c9b      	ldrb	r3, [r3, r2]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003594:	2302      	movs	r3, #2
 8003596:	e02f      	b.n	80035f8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2284      	movs	r2, #132	@ 0x84
 800359c:	2101      	movs	r1, #1
 800359e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2288      	movs	r2, #136	@ 0x88
 80035a4:	2124      	movs	r1, #36	@ 0x24
 80035a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2101      	movs	r1, #1
 80035bc:	438a      	bics	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003600 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 f813 	bl	8003604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2288      	movs	r2, #136	@ 0x88
 80035ea:	2120      	movs	r1, #32
 80035ec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2284      	movs	r2, #132	@ 0x84
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b004      	add	sp, #16
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	f1ffffff 	.word	0xf1ffffff

08003604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003610:	2b00      	cmp	r3, #0
 8003612:	d108      	bne.n	8003626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	226a      	movs	r2, #106	@ 0x6a
 8003618:	2101      	movs	r1, #1
 800361a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2268      	movs	r2, #104	@ 0x68
 8003620:	2101      	movs	r1, #1
 8003622:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003624:	e043      	b.n	80036ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003626:	260f      	movs	r6, #15
 8003628:	19bb      	adds	r3, r7, r6
 800362a:	2208      	movs	r2, #8
 800362c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800362e:	200e      	movs	r0, #14
 8003630:	183b      	adds	r3, r7, r0
 8003632:	2208      	movs	r2, #8
 8003634:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	0e5b      	lsrs	r3, r3, #25
 800363e:	b2da      	uxtb	r2, r3
 8003640:	240d      	movs	r4, #13
 8003642:	193b      	adds	r3, r7, r4
 8003644:	2107      	movs	r1, #7
 8003646:	400a      	ands	r2, r1
 8003648:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	0f5b      	lsrs	r3, r3, #29
 8003652:	b2da      	uxtb	r2, r3
 8003654:	250c      	movs	r5, #12
 8003656:	197b      	adds	r3, r7, r5
 8003658:	2107      	movs	r1, #7
 800365a:	400a      	ands	r2, r1
 800365c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800365e:	183b      	adds	r3, r7, r0
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	197a      	adds	r2, r7, r5
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	4914      	ldr	r1, [pc, #80]	@ (80036b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003668:	5c8a      	ldrb	r2, [r1, r2]
 800366a:	435a      	muls	r2, r3
 800366c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800366e:	197b      	adds	r3, r7, r5
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	4a12      	ldr	r2, [pc, #72]	@ (80036bc <UARTEx_SetNbDataToProcess+0xb8>)
 8003674:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003676:	0019      	movs	r1, r3
 8003678:	f7fc fdd0 	bl	800021c <__divsi3>
 800367c:	0003      	movs	r3, r0
 800367e:	b299      	uxth	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	226a      	movs	r2, #106	@ 0x6a
 8003684:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003686:	19bb      	adds	r3, r7, r6
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	193a      	adds	r2, r7, r4
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	490a      	ldr	r1, [pc, #40]	@ (80036b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003690:	5c8a      	ldrb	r2, [r1, r2]
 8003692:	435a      	muls	r2, r3
 8003694:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003696:	193b      	adds	r3, r7, r4
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <UARTEx_SetNbDataToProcess+0xb8>)
 800369c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800369e:	0019      	movs	r1, r3
 80036a0:	f7fc fdbc 	bl	800021c <__divsi3>
 80036a4:	0003      	movs	r3, r0
 80036a6:	b299      	uxth	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2268      	movs	r2, #104	@ 0x68
 80036ac:	5299      	strh	r1, [r3, r2]
}
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b005      	add	sp, #20
 80036b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	08004144 	.word	0x08004144
 80036bc:	0800414c 	.word	0x0800414c

080036c0 <std>:
 80036c0:	2300      	movs	r3, #0
 80036c2:	b510      	push	{r4, lr}
 80036c4:	0004      	movs	r4, r0
 80036c6:	6003      	str	r3, [r0, #0]
 80036c8:	6043      	str	r3, [r0, #4]
 80036ca:	6083      	str	r3, [r0, #8]
 80036cc:	8181      	strh	r1, [r0, #12]
 80036ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80036d0:	81c2      	strh	r2, [r0, #14]
 80036d2:	6103      	str	r3, [r0, #16]
 80036d4:	6143      	str	r3, [r0, #20]
 80036d6:	6183      	str	r3, [r0, #24]
 80036d8:	0019      	movs	r1, r3
 80036da:	2208      	movs	r2, #8
 80036dc:	305c      	adds	r0, #92	@ 0x5c
 80036de:	f000 f9ff 	bl	8003ae0 <memset>
 80036e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <std+0x50>)
 80036e4:	6224      	str	r4, [r4, #32]
 80036e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80036e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <std+0x54>)
 80036ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <std+0x58>)
 80036ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036f0:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <std+0x5c>)
 80036f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80036f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <std+0x60>)
 80036f6:	429c      	cmp	r4, r3
 80036f8:	d005      	beq.n	8003706 <std+0x46>
 80036fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <std+0x64>)
 80036fc:	429c      	cmp	r4, r3
 80036fe:	d002      	beq.n	8003706 <std+0x46>
 8003700:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <std+0x68>)
 8003702:	429c      	cmp	r4, r3
 8003704:	d103      	bne.n	800370e <std+0x4e>
 8003706:	0020      	movs	r0, r4
 8003708:	3058      	adds	r0, #88	@ 0x58
 800370a:	f000 fa69 	bl	8003be0 <__retarget_lock_init_recursive>
 800370e:	bd10      	pop	{r4, pc}
 8003710:	08003909 	.word	0x08003909
 8003714:	08003931 	.word	0x08003931
 8003718:	08003969 	.word	0x08003969
 800371c:	08003995 	.word	0x08003995
 8003720:	2000022c 	.word	0x2000022c
 8003724:	20000294 	.word	0x20000294
 8003728:	200002fc 	.word	0x200002fc

0800372c <stdio_exit_handler>:
 800372c:	b510      	push	{r4, lr}
 800372e:	4a03      	ldr	r2, [pc, #12]	@ (800373c <stdio_exit_handler+0x10>)
 8003730:	4903      	ldr	r1, [pc, #12]	@ (8003740 <stdio_exit_handler+0x14>)
 8003732:	4804      	ldr	r0, [pc, #16]	@ (8003744 <stdio_exit_handler+0x18>)
 8003734:	f000 f86c 	bl	8003810 <_fwalk_sglue>
 8003738:	bd10      	pop	{r4, pc}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	2000000c 	.word	0x2000000c
 8003740:	08003eed 	.word	0x08003eed
 8003744:	2000001c 	.word	0x2000001c

08003748 <cleanup_stdio>:
 8003748:	6841      	ldr	r1, [r0, #4]
 800374a:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <cleanup_stdio+0x30>)
 800374c:	b510      	push	{r4, lr}
 800374e:	0004      	movs	r4, r0
 8003750:	4299      	cmp	r1, r3
 8003752:	d001      	beq.n	8003758 <cleanup_stdio+0x10>
 8003754:	f000 fbca 	bl	8003eec <_fflush_r>
 8003758:	68a1      	ldr	r1, [r4, #8]
 800375a:	4b08      	ldr	r3, [pc, #32]	@ (800377c <cleanup_stdio+0x34>)
 800375c:	4299      	cmp	r1, r3
 800375e:	d002      	beq.n	8003766 <cleanup_stdio+0x1e>
 8003760:	0020      	movs	r0, r4
 8003762:	f000 fbc3 	bl	8003eec <_fflush_r>
 8003766:	68e1      	ldr	r1, [r4, #12]
 8003768:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <cleanup_stdio+0x38>)
 800376a:	4299      	cmp	r1, r3
 800376c:	d002      	beq.n	8003774 <cleanup_stdio+0x2c>
 800376e:	0020      	movs	r0, r4
 8003770:	f000 fbbc 	bl	8003eec <_fflush_r>
 8003774:	bd10      	pop	{r4, pc}
 8003776:	46c0      	nop			@ (mov r8, r8)
 8003778:	2000022c 	.word	0x2000022c
 800377c:	20000294 	.word	0x20000294
 8003780:	200002fc 	.word	0x200002fc

08003784 <global_stdio_init.part.0>:
 8003784:	b510      	push	{r4, lr}
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <global_stdio_init.part.0+0x28>)
 8003788:	4a09      	ldr	r2, [pc, #36]	@ (80037b0 <global_stdio_init.part.0+0x2c>)
 800378a:	2104      	movs	r1, #4
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	4809      	ldr	r0, [pc, #36]	@ (80037b4 <global_stdio_init.part.0+0x30>)
 8003790:	2200      	movs	r2, #0
 8003792:	f7ff ff95 	bl	80036c0 <std>
 8003796:	2201      	movs	r2, #1
 8003798:	2109      	movs	r1, #9
 800379a:	4807      	ldr	r0, [pc, #28]	@ (80037b8 <global_stdio_init.part.0+0x34>)
 800379c:	f7ff ff90 	bl	80036c0 <std>
 80037a0:	2202      	movs	r2, #2
 80037a2:	2112      	movs	r1, #18
 80037a4:	4805      	ldr	r0, [pc, #20]	@ (80037bc <global_stdio_init.part.0+0x38>)
 80037a6:	f7ff ff8b 	bl	80036c0 <std>
 80037aa:	bd10      	pop	{r4, pc}
 80037ac:	20000364 	.word	0x20000364
 80037b0:	0800372d 	.word	0x0800372d
 80037b4:	2000022c 	.word	0x2000022c
 80037b8:	20000294 	.word	0x20000294
 80037bc:	200002fc 	.word	0x200002fc

080037c0 <__sfp_lock_acquire>:
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4802      	ldr	r0, [pc, #8]	@ (80037cc <__sfp_lock_acquire+0xc>)
 80037c4:	f000 fa0d 	bl	8003be2 <__retarget_lock_acquire_recursive>
 80037c8:	bd10      	pop	{r4, pc}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	2000036d 	.word	0x2000036d

080037d0 <__sfp_lock_release>:
 80037d0:	b510      	push	{r4, lr}
 80037d2:	4802      	ldr	r0, [pc, #8]	@ (80037dc <__sfp_lock_release+0xc>)
 80037d4:	f000 fa06 	bl	8003be4 <__retarget_lock_release_recursive>
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	2000036d 	.word	0x2000036d

080037e0 <__sinit>:
 80037e0:	b510      	push	{r4, lr}
 80037e2:	0004      	movs	r4, r0
 80037e4:	f7ff ffec 	bl	80037c0 <__sfp_lock_acquire>
 80037e8:	6a23      	ldr	r3, [r4, #32]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <__sinit+0x14>
 80037ee:	f7ff ffef 	bl	80037d0 <__sfp_lock_release>
 80037f2:	bd10      	pop	{r4, pc}
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <__sinit+0x28>)
 80037f6:	6223      	str	r3, [r4, #32]
 80037f8:	4b04      	ldr	r3, [pc, #16]	@ (800380c <__sinit+0x2c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f6      	bne.n	80037ee <__sinit+0xe>
 8003800:	f7ff ffc0 	bl	8003784 <global_stdio_init.part.0>
 8003804:	e7f3      	b.n	80037ee <__sinit+0xe>
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	08003749 	.word	0x08003749
 800380c:	20000364 	.word	0x20000364

08003810 <_fwalk_sglue>:
 8003810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003812:	0014      	movs	r4, r2
 8003814:	2600      	movs	r6, #0
 8003816:	9000      	str	r0, [sp, #0]
 8003818:	9101      	str	r1, [sp, #4]
 800381a:	68a5      	ldr	r5, [r4, #8]
 800381c:	6867      	ldr	r7, [r4, #4]
 800381e:	3f01      	subs	r7, #1
 8003820:	d504      	bpl.n	800382c <_fwalk_sglue+0x1c>
 8003822:	6824      	ldr	r4, [r4, #0]
 8003824:	2c00      	cmp	r4, #0
 8003826:	d1f8      	bne.n	800381a <_fwalk_sglue+0xa>
 8003828:	0030      	movs	r0, r6
 800382a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800382c:	89ab      	ldrh	r3, [r5, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d908      	bls.n	8003844 <_fwalk_sglue+0x34>
 8003832:	220e      	movs	r2, #14
 8003834:	5eab      	ldrsh	r3, [r5, r2]
 8003836:	3301      	adds	r3, #1
 8003838:	d004      	beq.n	8003844 <_fwalk_sglue+0x34>
 800383a:	0029      	movs	r1, r5
 800383c:	9800      	ldr	r0, [sp, #0]
 800383e:	9b01      	ldr	r3, [sp, #4]
 8003840:	4798      	blx	r3
 8003842:	4306      	orrs	r6, r0
 8003844:	3568      	adds	r5, #104	@ 0x68
 8003846:	e7ea      	b.n	800381e <_fwalk_sglue+0xe>

08003848 <_puts_r>:
 8003848:	6a03      	ldr	r3, [r0, #32]
 800384a:	b570      	push	{r4, r5, r6, lr}
 800384c:	0005      	movs	r5, r0
 800384e:	000e      	movs	r6, r1
 8003850:	6884      	ldr	r4, [r0, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <_puts_r+0x12>
 8003856:	f7ff ffc3 	bl	80037e0 <__sinit>
 800385a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800385c:	07db      	lsls	r3, r3, #31
 800385e:	d405      	bmi.n	800386c <_puts_r+0x24>
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	059b      	lsls	r3, r3, #22
 8003864:	d402      	bmi.n	800386c <_puts_r+0x24>
 8003866:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003868:	f000 f9bb 	bl	8003be2 <__retarget_lock_acquire_recursive>
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	071b      	lsls	r3, r3, #28
 8003870:	d502      	bpl.n	8003878 <_puts_r+0x30>
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d11f      	bne.n	80038b8 <_puts_r+0x70>
 8003878:	0021      	movs	r1, r4
 800387a:	0028      	movs	r0, r5
 800387c:	f000 f8d2 	bl	8003a24 <__swsetup_r>
 8003880:	2800      	cmp	r0, #0
 8003882:	d019      	beq.n	80038b8 <_puts_r+0x70>
 8003884:	2501      	movs	r5, #1
 8003886:	426d      	negs	r5, r5
 8003888:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800388a:	07db      	lsls	r3, r3, #31
 800388c:	d405      	bmi.n	800389a <_puts_r+0x52>
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	059b      	lsls	r3, r3, #22
 8003892:	d402      	bmi.n	800389a <_puts_r+0x52>
 8003894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003896:	f000 f9a5 	bl	8003be4 <__retarget_lock_release_recursive>
 800389a:	0028      	movs	r0, r5
 800389c:	bd70      	pop	{r4, r5, r6, pc}
 800389e:	3601      	adds	r6, #1
 80038a0:	60a3      	str	r3, [r4, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da04      	bge.n	80038b0 <_puts_r+0x68>
 80038a6:	69a2      	ldr	r2, [r4, #24]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	dc16      	bgt.n	80038da <_puts_r+0x92>
 80038ac:	290a      	cmp	r1, #10
 80038ae:	d014      	beq.n	80038da <_puts_r+0x92>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	6022      	str	r2, [r4, #0]
 80038b6:	7019      	strb	r1, [r3, #0]
 80038b8:	68a3      	ldr	r3, [r4, #8]
 80038ba:	7831      	ldrb	r1, [r6, #0]
 80038bc:	3b01      	subs	r3, #1
 80038be:	2900      	cmp	r1, #0
 80038c0:	d1ed      	bne.n	800389e <_puts_r+0x56>
 80038c2:	60a3      	str	r3, [r4, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	da0f      	bge.n	80038e8 <_puts_r+0xa0>
 80038c8:	0022      	movs	r2, r4
 80038ca:	0028      	movs	r0, r5
 80038cc:	310a      	adds	r1, #10
 80038ce:	f000 f867 	bl	80039a0 <__swbuf_r>
 80038d2:	3001      	adds	r0, #1
 80038d4:	d0d6      	beq.n	8003884 <_puts_r+0x3c>
 80038d6:	250a      	movs	r5, #10
 80038d8:	e7d6      	b.n	8003888 <_puts_r+0x40>
 80038da:	0022      	movs	r2, r4
 80038dc:	0028      	movs	r0, r5
 80038de:	f000 f85f 	bl	80039a0 <__swbuf_r>
 80038e2:	3001      	adds	r0, #1
 80038e4:	d1e8      	bne.n	80038b8 <_puts_r+0x70>
 80038e6:	e7cd      	b.n	8003884 <_puts_r+0x3c>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	6022      	str	r2, [r4, #0]
 80038ee:	220a      	movs	r2, #10
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e7f0      	b.n	80038d6 <_puts_r+0x8e>

080038f4 <puts>:
 80038f4:	b510      	push	{r4, lr}
 80038f6:	4b03      	ldr	r3, [pc, #12]	@ (8003904 <puts+0x10>)
 80038f8:	0001      	movs	r1, r0
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	f7ff ffa4 	bl	8003848 <_puts_r>
 8003900:	bd10      	pop	{r4, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	20000018 	.word	0x20000018

08003908 <__sread>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	000c      	movs	r4, r1
 800390c:	250e      	movs	r5, #14
 800390e:	5f49      	ldrsh	r1, [r1, r5]
 8003910:	f000 f914 	bl	8003b3c <_read_r>
 8003914:	2800      	cmp	r0, #0
 8003916:	db03      	blt.n	8003920 <__sread+0x18>
 8003918:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800391a:	181b      	adds	r3, r3, r0
 800391c:	6563      	str	r3, [r4, #84]	@ 0x54
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	4a02      	ldr	r2, [pc, #8]	@ (800392c <__sread+0x24>)
 8003924:	4013      	ands	r3, r2
 8003926:	81a3      	strh	r3, [r4, #12]
 8003928:	e7f9      	b.n	800391e <__sread+0x16>
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	ffffefff 	.word	0xffffefff

08003930 <__swrite>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	001f      	movs	r7, r3
 8003934:	898b      	ldrh	r3, [r1, #12]
 8003936:	0005      	movs	r5, r0
 8003938:	000c      	movs	r4, r1
 800393a:	0016      	movs	r6, r2
 800393c:	05db      	lsls	r3, r3, #23
 800393e:	d505      	bpl.n	800394c <__swrite+0x1c>
 8003940:	230e      	movs	r3, #14
 8003942:	5ec9      	ldrsh	r1, [r1, r3]
 8003944:	2200      	movs	r2, #0
 8003946:	2302      	movs	r3, #2
 8003948:	f000 f8e4 	bl	8003b14 <_lseek_r>
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	4a05      	ldr	r2, [pc, #20]	@ (8003964 <__swrite+0x34>)
 8003950:	0028      	movs	r0, r5
 8003952:	4013      	ands	r3, r2
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	0032      	movs	r2, r6
 8003958:	230e      	movs	r3, #14
 800395a:	5ee1      	ldrsh	r1, [r4, r3]
 800395c:	003b      	movs	r3, r7
 800395e:	f000 f901 	bl	8003b64 <_write_r>
 8003962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003964:	ffffefff 	.word	0xffffefff

08003968 <__sseek>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	000c      	movs	r4, r1
 800396c:	250e      	movs	r5, #14
 800396e:	5f49      	ldrsh	r1, [r1, r5]
 8003970:	f000 f8d0 	bl	8003b14 <_lseek_r>
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	1c42      	adds	r2, r0, #1
 8003978:	d103      	bne.n	8003982 <__sseek+0x1a>
 800397a:	4a05      	ldr	r2, [pc, #20]	@ (8003990 <__sseek+0x28>)
 800397c:	4013      	ands	r3, r2
 800397e:	81a3      	strh	r3, [r4, #12]
 8003980:	bd70      	pop	{r4, r5, r6, pc}
 8003982:	2280      	movs	r2, #128	@ 0x80
 8003984:	0152      	lsls	r2, r2, #5
 8003986:	4313      	orrs	r3, r2
 8003988:	81a3      	strh	r3, [r4, #12]
 800398a:	6560      	str	r0, [r4, #84]	@ 0x54
 800398c:	e7f8      	b.n	8003980 <__sseek+0x18>
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	ffffefff 	.word	0xffffefff

08003994 <__sclose>:
 8003994:	b510      	push	{r4, lr}
 8003996:	230e      	movs	r3, #14
 8003998:	5ec9      	ldrsh	r1, [r1, r3]
 800399a:	f000 f8a9 	bl	8003af0 <_close_r>
 800399e:	bd10      	pop	{r4, pc}

080039a0 <__swbuf_r>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	0006      	movs	r6, r0
 80039a4:	000d      	movs	r5, r1
 80039a6:	0014      	movs	r4, r2
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d004      	beq.n	80039b6 <__swbuf_r+0x16>
 80039ac:	6a03      	ldr	r3, [r0, #32]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <__swbuf_r+0x16>
 80039b2:	f7ff ff15 	bl	80037e0 <__sinit>
 80039b6:	69a3      	ldr	r3, [r4, #24]
 80039b8:	60a3      	str	r3, [r4, #8]
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	d502      	bpl.n	80039c6 <__swbuf_r+0x26>
 80039c0:	6923      	ldr	r3, [r4, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <__swbuf_r+0x3a>
 80039c6:	0021      	movs	r1, r4
 80039c8:	0030      	movs	r0, r6
 80039ca:	f000 f82b 	bl	8003a24 <__swsetup_r>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d003      	beq.n	80039da <__swbuf_r+0x3a>
 80039d2:	2501      	movs	r5, #1
 80039d4:	426d      	negs	r5, r5
 80039d6:	0028      	movs	r0, r5
 80039d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	b2ef      	uxtb	r7, r5
 80039e0:	1ac0      	subs	r0, r0, r3
 80039e2:	6963      	ldr	r3, [r4, #20]
 80039e4:	b2ed      	uxtb	r5, r5
 80039e6:	4283      	cmp	r3, r0
 80039e8:	dc05      	bgt.n	80039f6 <__swbuf_r+0x56>
 80039ea:	0021      	movs	r1, r4
 80039ec:	0030      	movs	r0, r6
 80039ee:	f000 fa7d 	bl	8003eec <_fflush_r>
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d1ed      	bne.n	80039d2 <__swbuf_r+0x32>
 80039f6:	68a3      	ldr	r3, [r4, #8]
 80039f8:	3001      	adds	r0, #1
 80039fa:	3b01      	subs	r3, #1
 80039fc:	60a3      	str	r3, [r4, #8]
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	6022      	str	r2, [r4, #0]
 8003a04:	701f      	strb	r7, [r3, #0]
 8003a06:	6963      	ldr	r3, [r4, #20]
 8003a08:	4283      	cmp	r3, r0
 8003a0a:	d004      	beq.n	8003a16 <__swbuf_r+0x76>
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	07db      	lsls	r3, r3, #31
 8003a10:	d5e1      	bpl.n	80039d6 <__swbuf_r+0x36>
 8003a12:	2d0a      	cmp	r5, #10
 8003a14:	d1df      	bne.n	80039d6 <__swbuf_r+0x36>
 8003a16:	0021      	movs	r1, r4
 8003a18:	0030      	movs	r0, r6
 8003a1a:	f000 fa67 	bl	8003eec <_fflush_r>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0d9      	beq.n	80039d6 <__swbuf_r+0x36>
 8003a22:	e7d6      	b.n	80039d2 <__swbuf_r+0x32>

08003a24 <__swsetup_r>:
 8003a24:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <__swsetup_r+0xb8>)
 8003a26:	b570      	push	{r4, r5, r6, lr}
 8003a28:	0005      	movs	r5, r0
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	000c      	movs	r4, r1
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d004      	beq.n	8003a3c <__swsetup_r+0x18>
 8003a32:	6a03      	ldr	r3, [r0, #32]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <__swsetup_r+0x18>
 8003a38:	f7ff fed2 	bl	80037e0 <__sinit>
 8003a3c:	220c      	movs	r2, #12
 8003a3e:	5ea3      	ldrsh	r3, [r4, r2]
 8003a40:	071a      	lsls	r2, r3, #28
 8003a42:	d423      	bmi.n	8003a8c <__swsetup_r+0x68>
 8003a44:	06da      	lsls	r2, r3, #27
 8003a46:	d407      	bmi.n	8003a58 <__swsetup_r+0x34>
 8003a48:	2209      	movs	r2, #9
 8003a4a:	602a      	str	r2, [r5, #0]
 8003a4c:	2240      	movs	r2, #64	@ 0x40
 8003a4e:	2001      	movs	r0, #1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	81a3      	strh	r3, [r4, #12]
 8003a54:	4240      	negs	r0, r0
 8003a56:	e03a      	b.n	8003ace <__swsetup_r+0xaa>
 8003a58:	075b      	lsls	r3, r3, #29
 8003a5a:	d513      	bpl.n	8003a84 <__swsetup_r+0x60>
 8003a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	d008      	beq.n	8003a74 <__swsetup_r+0x50>
 8003a62:	0023      	movs	r3, r4
 8003a64:	3344      	adds	r3, #68	@ 0x44
 8003a66:	4299      	cmp	r1, r3
 8003a68:	d002      	beq.n	8003a70 <__swsetup_r+0x4c>
 8003a6a:	0028      	movs	r0, r5
 8003a6c:	f000 f8bc 	bl	8003be8 <_free_r>
 8003a70:	2300      	movs	r3, #0
 8003a72:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a74:	2224      	movs	r2, #36	@ 0x24
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	4393      	bics	r3, r2
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	6063      	str	r3, [r4, #4]
 8003a80:	6923      	ldr	r3, [r4, #16]
 8003a82:	6023      	str	r3, [r4, #0]
 8003a84:	2308      	movs	r3, #8
 8003a86:	89a2      	ldrh	r2, [r4, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	81a3      	strh	r3, [r4, #12]
 8003a8c:	6923      	ldr	r3, [r4, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <__swsetup_r+0x86>
 8003a92:	21a0      	movs	r1, #160	@ 0xa0
 8003a94:	2280      	movs	r2, #128	@ 0x80
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	0089      	lsls	r1, r1, #2
 8003a9a:	0092      	lsls	r2, r2, #2
 8003a9c:	400b      	ands	r3, r1
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <__swsetup_r+0x86>
 8003aa2:	0021      	movs	r1, r4
 8003aa4:	0028      	movs	r0, r5
 8003aa6:	f000 fa77 	bl	8003f98 <__smakebuf_r>
 8003aaa:	220c      	movs	r2, #12
 8003aac:	5ea3      	ldrsh	r3, [r4, r2]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	420b      	tst	r3, r1
 8003ab6:	d00b      	beq.n	8003ad0 <__swsetup_r+0xac>
 8003ab8:	2200      	movs	r2, #0
 8003aba:	60a2      	str	r2, [r4, #8]
 8003abc:	6962      	ldr	r2, [r4, #20]
 8003abe:	4252      	negs	r2, r2
 8003ac0:	61a2      	str	r2, [r4, #24]
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	6922      	ldr	r2, [r4, #16]
 8003ac6:	4282      	cmp	r2, r0
 8003ac8:	d101      	bne.n	8003ace <__swsetup_r+0xaa>
 8003aca:	061a      	lsls	r2, r3, #24
 8003acc:	d4be      	bmi.n	8003a4c <__swsetup_r+0x28>
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	0799      	lsls	r1, r3, #30
 8003ad2:	d400      	bmi.n	8003ad6 <__swsetup_r+0xb2>
 8003ad4:	6962      	ldr	r2, [r4, #20]
 8003ad6:	60a2      	str	r2, [r4, #8]
 8003ad8:	e7f3      	b.n	8003ac2 <__swsetup_r+0x9e>
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	20000018 	.word	0x20000018

08003ae0 <memset>:
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	1882      	adds	r2, r0, r2
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d100      	bne.n	8003aea <memset+0xa>
 8003ae8:	4770      	bx	lr
 8003aea:	7019      	strb	r1, [r3, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	e7f9      	b.n	8003ae4 <memset+0x4>

08003af0 <_close_r>:
 8003af0:	2300      	movs	r3, #0
 8003af2:	b570      	push	{r4, r5, r6, lr}
 8003af4:	4d06      	ldr	r5, [pc, #24]	@ (8003b10 <_close_r+0x20>)
 8003af6:	0004      	movs	r4, r0
 8003af8:	0008      	movs	r0, r1
 8003afa:	602b      	str	r3, [r5, #0]
 8003afc:	f7fd f82b 	bl	8000b56 <_close>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d103      	bne.n	8003b0c <_close_r+0x1c>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d000      	beq.n	8003b0c <_close_r+0x1c>
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	20000368 	.word	0x20000368

08003b14 <_lseek_r>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	0004      	movs	r4, r0
 8003b18:	0008      	movs	r0, r1
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	2300      	movs	r3, #0
 8003b20:	4d05      	ldr	r5, [pc, #20]	@ (8003b38 <_lseek_r+0x24>)
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	f7fd f838 	bl	8000b98 <_lseek>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d103      	bne.n	8003b34 <_lseek_r+0x20>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d000      	beq.n	8003b34 <_lseek_r+0x20>
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	20000368 	.word	0x20000368

08003b3c <_read_r>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	0004      	movs	r4, r0
 8003b40:	0008      	movs	r0, r1
 8003b42:	0011      	movs	r1, r2
 8003b44:	001a      	movs	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	4d05      	ldr	r5, [pc, #20]	@ (8003b60 <_read_r+0x24>)
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	f7fc ffca 	bl	8000ae4 <_read>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d103      	bne.n	8003b5c <_read_r+0x20>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d000      	beq.n	8003b5c <_read_r+0x20>
 8003b5a:	6023      	str	r3, [r4, #0]
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	20000368 	.word	0x20000368

08003b64 <_write_r>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	0004      	movs	r4, r0
 8003b68:	0008      	movs	r0, r1
 8003b6a:	0011      	movs	r1, r2
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	2300      	movs	r3, #0
 8003b70:	4d05      	ldr	r5, [pc, #20]	@ (8003b88 <_write_r+0x24>)
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	f7fc ffd3 	bl	8000b1e <_write>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d103      	bne.n	8003b84 <_write_r+0x20>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d000      	beq.n	8003b84 <_write_r+0x20>
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	20000368 	.word	0x20000368

08003b8c <__errno>:
 8003b8c:	4b01      	ldr	r3, [pc, #4]	@ (8003b94 <__errno+0x8>)
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	4770      	bx	lr
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000018 	.word	0x20000018

08003b98 <__libc_init_array>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	2600      	movs	r6, #0
 8003b9c:	4c0c      	ldr	r4, [pc, #48]	@ (8003bd0 <__libc_init_array+0x38>)
 8003b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003bd4 <__libc_init_array+0x3c>)
 8003ba0:	1b64      	subs	r4, r4, r5
 8003ba2:	10a4      	asrs	r4, r4, #2
 8003ba4:	42a6      	cmp	r6, r4
 8003ba6:	d109      	bne.n	8003bbc <__libc_init_array+0x24>
 8003ba8:	2600      	movs	r6, #0
 8003baa:	f000 fa6d 	bl	8004088 <_init>
 8003bae:	4c0a      	ldr	r4, [pc, #40]	@ (8003bd8 <__libc_init_array+0x40>)
 8003bb0:	4d0a      	ldr	r5, [pc, #40]	@ (8003bdc <__libc_init_array+0x44>)
 8003bb2:	1b64      	subs	r4, r4, r5
 8003bb4:	10a4      	asrs	r4, r4, #2
 8003bb6:	42a6      	cmp	r6, r4
 8003bb8:	d105      	bne.n	8003bc6 <__libc_init_array+0x2e>
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	00b3      	lsls	r3, r6, #2
 8003bbe:	58eb      	ldr	r3, [r5, r3]
 8003bc0:	4798      	blx	r3
 8003bc2:	3601      	adds	r6, #1
 8003bc4:	e7ee      	b.n	8003ba4 <__libc_init_array+0xc>
 8003bc6:	00b3      	lsls	r3, r6, #2
 8003bc8:	58eb      	ldr	r3, [r5, r3]
 8003bca:	4798      	blx	r3
 8003bcc:	3601      	adds	r6, #1
 8003bce:	e7f2      	b.n	8003bb6 <__libc_init_array+0x1e>
 8003bd0:	08004154 	.word	0x08004154
 8003bd4:	08004154 	.word	0x08004154
 8003bd8:	08004158 	.word	0x08004158
 8003bdc:	08004154 	.word	0x08004154

08003be0 <__retarget_lock_init_recursive>:
 8003be0:	4770      	bx	lr

08003be2 <__retarget_lock_acquire_recursive>:
 8003be2:	4770      	bx	lr

08003be4 <__retarget_lock_release_recursive>:
 8003be4:	4770      	bx	lr
	...

08003be8 <_free_r>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	0005      	movs	r5, r0
 8003bec:	1e0c      	subs	r4, r1, #0
 8003bee:	d010      	beq.n	8003c12 <_free_r+0x2a>
 8003bf0:	3c04      	subs	r4, #4
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	da00      	bge.n	8003bfa <_free_r+0x12>
 8003bf8:	18e4      	adds	r4, r4, r3
 8003bfa:	0028      	movs	r0, r5
 8003bfc:	f000 f8e0 	bl	8003dc0 <__malloc_lock>
 8003c00:	4a1d      	ldr	r2, [pc, #116]	@ (8003c78 <_free_r+0x90>)
 8003c02:	6813      	ldr	r3, [r2, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <_free_r+0x2c>
 8003c08:	6063      	str	r3, [r4, #4]
 8003c0a:	6014      	str	r4, [r2, #0]
 8003c0c:	0028      	movs	r0, r5
 8003c0e:	f000 f8df 	bl	8003dd0 <__malloc_unlock>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	d908      	bls.n	8003c2a <_free_r+0x42>
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	1821      	adds	r1, r4, r0
 8003c1c:	428b      	cmp	r3, r1
 8003c1e:	d1f3      	bne.n	8003c08 <_free_r+0x20>
 8003c20:	6819      	ldr	r1, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	1809      	adds	r1, r1, r0
 8003c26:	6021      	str	r1, [r4, #0]
 8003c28:	e7ee      	b.n	8003c08 <_free_r+0x20>
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <_free_r+0x4e>
 8003c32:	42a3      	cmp	r3, r4
 8003c34:	d9f9      	bls.n	8003c2a <_free_r+0x42>
 8003c36:	6811      	ldr	r1, [r2, #0]
 8003c38:	1850      	adds	r0, r2, r1
 8003c3a:	42a0      	cmp	r0, r4
 8003c3c:	d10b      	bne.n	8003c56 <_free_r+0x6e>
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	1809      	adds	r1, r1, r0
 8003c42:	1850      	adds	r0, r2, r1
 8003c44:	6011      	str	r1, [r2, #0]
 8003c46:	4283      	cmp	r3, r0
 8003c48:	d1e0      	bne.n	8003c0c <_free_r+0x24>
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	1841      	adds	r1, r0, r1
 8003c50:	6011      	str	r1, [r2, #0]
 8003c52:	6053      	str	r3, [r2, #4]
 8003c54:	e7da      	b.n	8003c0c <_free_r+0x24>
 8003c56:	42a0      	cmp	r0, r4
 8003c58:	d902      	bls.n	8003c60 <_free_r+0x78>
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	602b      	str	r3, [r5, #0]
 8003c5e:	e7d5      	b.n	8003c0c <_free_r+0x24>
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	1821      	adds	r1, r4, r0
 8003c64:	428b      	cmp	r3, r1
 8003c66:	d103      	bne.n	8003c70 <_free_r+0x88>
 8003c68:	6819      	ldr	r1, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	1809      	adds	r1, r1, r0
 8003c6e:	6021      	str	r1, [r4, #0]
 8003c70:	6063      	str	r3, [r4, #4]
 8003c72:	6054      	str	r4, [r2, #4]
 8003c74:	e7ca      	b.n	8003c0c <_free_r+0x24>
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	20000374 	.word	0x20000374

08003c7c <sbrk_aligned>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	4e0f      	ldr	r6, [pc, #60]	@ (8003cbc <sbrk_aligned+0x40>)
 8003c80:	000d      	movs	r5, r1
 8003c82:	6831      	ldr	r1, [r6, #0]
 8003c84:	0004      	movs	r4, r0
 8003c86:	2900      	cmp	r1, #0
 8003c88:	d102      	bne.n	8003c90 <sbrk_aligned+0x14>
 8003c8a:	f000 f9eb 	bl	8004064 <_sbrk_r>
 8003c8e:	6030      	str	r0, [r6, #0]
 8003c90:	0029      	movs	r1, r5
 8003c92:	0020      	movs	r0, r4
 8003c94:	f000 f9e6 	bl	8004064 <_sbrk_r>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d103      	bne.n	8003ca4 <sbrk_aligned+0x28>
 8003c9c:	2501      	movs	r5, #1
 8003c9e:	426d      	negs	r5, r5
 8003ca0:	0028      	movs	r0, r5
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	1cc5      	adds	r5, r0, #3
 8003ca8:	439d      	bics	r5, r3
 8003caa:	42a8      	cmp	r0, r5
 8003cac:	d0f8      	beq.n	8003ca0 <sbrk_aligned+0x24>
 8003cae:	1a29      	subs	r1, r5, r0
 8003cb0:	0020      	movs	r0, r4
 8003cb2:	f000 f9d7 	bl	8004064 <_sbrk_r>
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d1f2      	bne.n	8003ca0 <sbrk_aligned+0x24>
 8003cba:	e7ef      	b.n	8003c9c <sbrk_aligned+0x20>
 8003cbc:	20000370 	.word	0x20000370

08003cc0 <_malloc_r>:
 8003cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	1ccb      	adds	r3, r1, #3
 8003cc6:	4393      	bics	r3, r2
 8003cc8:	3308      	adds	r3, #8
 8003cca:	0005      	movs	r5, r0
 8003ccc:	001f      	movs	r7, r3
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d234      	bcs.n	8003d3c <_malloc_r+0x7c>
 8003cd2:	270c      	movs	r7, #12
 8003cd4:	42b9      	cmp	r1, r7
 8003cd6:	d833      	bhi.n	8003d40 <_malloc_r+0x80>
 8003cd8:	0028      	movs	r0, r5
 8003cda:	f000 f871 	bl	8003dc0 <__malloc_lock>
 8003cde:	4e37      	ldr	r6, [pc, #220]	@ (8003dbc <_malloc_r+0xfc>)
 8003ce0:	6833      	ldr	r3, [r6, #0]
 8003ce2:	001c      	movs	r4, r3
 8003ce4:	2c00      	cmp	r4, #0
 8003ce6:	d12f      	bne.n	8003d48 <_malloc_r+0x88>
 8003ce8:	0039      	movs	r1, r7
 8003cea:	0028      	movs	r0, r5
 8003cec:	f7ff ffc6 	bl	8003c7c <sbrk_aligned>
 8003cf0:	0004      	movs	r4, r0
 8003cf2:	1c43      	adds	r3, r0, #1
 8003cf4:	d15f      	bne.n	8003db6 <_malloc_r+0xf6>
 8003cf6:	6834      	ldr	r4, [r6, #0]
 8003cf8:	9400      	str	r4, [sp, #0]
 8003cfa:	9b00      	ldr	r3, [sp, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d14a      	bne.n	8003d96 <_malloc_r+0xd6>
 8003d00:	2c00      	cmp	r4, #0
 8003d02:	d052      	beq.n	8003daa <_malloc_r+0xea>
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	0028      	movs	r0, r5
 8003d08:	18e3      	adds	r3, r4, r3
 8003d0a:	9900      	ldr	r1, [sp, #0]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	f000 f9a9 	bl	8004064 <_sbrk_r>
 8003d12:	9b01      	ldr	r3, [sp, #4]
 8003d14:	4283      	cmp	r3, r0
 8003d16:	d148      	bne.n	8003daa <_malloc_r+0xea>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	0028      	movs	r0, r5
 8003d1c:	1aff      	subs	r7, r7, r3
 8003d1e:	0039      	movs	r1, r7
 8003d20:	f7ff ffac 	bl	8003c7c <sbrk_aligned>
 8003d24:	3001      	adds	r0, #1
 8003d26:	d040      	beq.n	8003daa <_malloc_r+0xea>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	19db      	adds	r3, r3, r7
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	6833      	ldr	r3, [r6, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	2a00      	cmp	r2, #0
 8003d34:	d133      	bne.n	8003d9e <_malloc_r+0xde>
 8003d36:	9b00      	ldr	r3, [sp, #0]
 8003d38:	6033      	str	r3, [r6, #0]
 8003d3a:	e019      	b.n	8003d70 <_malloc_r+0xb0>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dac9      	bge.n	8003cd4 <_malloc_r+0x14>
 8003d40:	230c      	movs	r3, #12
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	2000      	movs	r0, #0
 8003d46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d48:	6821      	ldr	r1, [r4, #0]
 8003d4a:	1bc9      	subs	r1, r1, r7
 8003d4c:	d420      	bmi.n	8003d90 <_malloc_r+0xd0>
 8003d4e:	290b      	cmp	r1, #11
 8003d50:	d90a      	bls.n	8003d68 <_malloc_r+0xa8>
 8003d52:	19e2      	adds	r2, r4, r7
 8003d54:	6027      	str	r7, [r4, #0]
 8003d56:	42a3      	cmp	r3, r4
 8003d58:	d104      	bne.n	8003d64 <_malloc_r+0xa4>
 8003d5a:	6032      	str	r2, [r6, #0]
 8003d5c:	6863      	ldr	r3, [r4, #4]
 8003d5e:	6011      	str	r1, [r2, #0]
 8003d60:	6053      	str	r3, [r2, #4]
 8003d62:	e005      	b.n	8003d70 <_malloc_r+0xb0>
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	e7f9      	b.n	8003d5c <_malloc_r+0x9c>
 8003d68:	6862      	ldr	r2, [r4, #4]
 8003d6a:	42a3      	cmp	r3, r4
 8003d6c:	d10e      	bne.n	8003d8c <_malloc_r+0xcc>
 8003d6e:	6032      	str	r2, [r6, #0]
 8003d70:	0028      	movs	r0, r5
 8003d72:	f000 f82d 	bl	8003dd0 <__malloc_unlock>
 8003d76:	0020      	movs	r0, r4
 8003d78:	2207      	movs	r2, #7
 8003d7a:	300b      	adds	r0, #11
 8003d7c:	1d23      	adds	r3, r4, #4
 8003d7e:	4390      	bics	r0, r2
 8003d80:	1ac2      	subs	r2, r0, r3
 8003d82:	4298      	cmp	r0, r3
 8003d84:	d0df      	beq.n	8003d46 <_malloc_r+0x86>
 8003d86:	1a1b      	subs	r3, r3, r0
 8003d88:	50a3      	str	r3, [r4, r2]
 8003d8a:	e7dc      	b.n	8003d46 <_malloc_r+0x86>
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	e7ef      	b.n	8003d70 <_malloc_r+0xb0>
 8003d90:	0023      	movs	r3, r4
 8003d92:	6864      	ldr	r4, [r4, #4]
 8003d94:	e7a6      	b.n	8003ce4 <_malloc_r+0x24>
 8003d96:	9c00      	ldr	r4, [sp, #0]
 8003d98:	6863      	ldr	r3, [r4, #4]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	e7ad      	b.n	8003cfa <_malloc_r+0x3a>
 8003d9e:	001a      	movs	r2, r3
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	42a3      	cmp	r3, r4
 8003da4:	d1fb      	bne.n	8003d9e <_malloc_r+0xde>
 8003da6:	2300      	movs	r3, #0
 8003da8:	e7da      	b.n	8003d60 <_malloc_r+0xa0>
 8003daa:	230c      	movs	r3, #12
 8003dac:	0028      	movs	r0, r5
 8003dae:	602b      	str	r3, [r5, #0]
 8003db0:	f000 f80e 	bl	8003dd0 <__malloc_unlock>
 8003db4:	e7c6      	b.n	8003d44 <_malloc_r+0x84>
 8003db6:	6007      	str	r7, [r0, #0]
 8003db8:	e7da      	b.n	8003d70 <_malloc_r+0xb0>
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	20000374 	.word	0x20000374

08003dc0 <__malloc_lock>:
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4802      	ldr	r0, [pc, #8]	@ (8003dcc <__malloc_lock+0xc>)
 8003dc4:	f7ff ff0d 	bl	8003be2 <__retarget_lock_acquire_recursive>
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	46c0      	nop			@ (mov r8, r8)
 8003dcc:	2000036c 	.word	0x2000036c

08003dd0 <__malloc_unlock>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4802      	ldr	r0, [pc, #8]	@ (8003ddc <__malloc_unlock+0xc>)
 8003dd4:	f7ff ff06 	bl	8003be4 <__retarget_lock_release_recursive>
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	2000036c 	.word	0x2000036c

08003de0 <__sflush_r>:
 8003de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003de2:	220c      	movs	r2, #12
 8003de4:	5e8b      	ldrsh	r3, [r1, r2]
 8003de6:	0005      	movs	r5, r0
 8003de8:	000c      	movs	r4, r1
 8003dea:	071a      	lsls	r2, r3, #28
 8003dec:	d456      	bmi.n	8003e9c <__sflush_r+0xbc>
 8003dee:	684a      	ldr	r2, [r1, #4]
 8003df0:	2a00      	cmp	r2, #0
 8003df2:	dc02      	bgt.n	8003dfa <__sflush_r+0x1a>
 8003df4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003df6:	2a00      	cmp	r2, #0
 8003df8:	dd4e      	ble.n	8003e98 <__sflush_r+0xb8>
 8003dfa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003dfc:	2f00      	cmp	r7, #0
 8003dfe:	d04b      	beq.n	8003e98 <__sflush_r+0xb8>
 8003e00:	2200      	movs	r2, #0
 8003e02:	2080      	movs	r0, #128	@ 0x80
 8003e04:	682e      	ldr	r6, [r5, #0]
 8003e06:	602a      	str	r2, [r5, #0]
 8003e08:	001a      	movs	r2, r3
 8003e0a:	0140      	lsls	r0, r0, #5
 8003e0c:	6a21      	ldr	r1, [r4, #32]
 8003e0e:	4002      	ands	r2, r0
 8003e10:	4203      	tst	r3, r0
 8003e12:	d033      	beq.n	8003e7c <__sflush_r+0x9c>
 8003e14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	075b      	lsls	r3, r3, #29
 8003e1a:	d506      	bpl.n	8003e2a <__sflush_r+0x4a>
 8003e1c:	6863      	ldr	r3, [r4, #4]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <__sflush_r+0x4a>
 8003e26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e28:	1ad2      	subs	r2, r2, r3
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	0028      	movs	r0, r5
 8003e2e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003e30:	6a21      	ldr	r1, [r4, #32]
 8003e32:	47b8      	blx	r7
 8003e34:	89a2      	ldrh	r2, [r4, #12]
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	d106      	bne.n	8003e48 <__sflush_r+0x68>
 8003e3a:	6829      	ldr	r1, [r5, #0]
 8003e3c:	291d      	cmp	r1, #29
 8003e3e:	d846      	bhi.n	8003ece <__sflush_r+0xee>
 8003e40:	4b29      	ldr	r3, [pc, #164]	@ (8003ee8 <__sflush_r+0x108>)
 8003e42:	40cb      	lsrs	r3, r1
 8003e44:	07db      	lsls	r3, r3, #31
 8003e46:	d542      	bpl.n	8003ece <__sflush_r+0xee>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6063      	str	r3, [r4, #4]
 8003e4c:	6923      	ldr	r3, [r4, #16]
 8003e4e:	6023      	str	r3, [r4, #0]
 8003e50:	04d2      	lsls	r2, r2, #19
 8003e52:	d505      	bpl.n	8003e60 <__sflush_r+0x80>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d102      	bne.n	8003e5e <__sflush_r+0x7e>
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d100      	bne.n	8003e60 <__sflush_r+0x80>
 8003e5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e62:	602e      	str	r6, [r5, #0]
 8003e64:	2900      	cmp	r1, #0
 8003e66:	d017      	beq.n	8003e98 <__sflush_r+0xb8>
 8003e68:	0023      	movs	r3, r4
 8003e6a:	3344      	adds	r3, #68	@ 0x44
 8003e6c:	4299      	cmp	r1, r3
 8003e6e:	d002      	beq.n	8003e76 <__sflush_r+0x96>
 8003e70:	0028      	movs	r0, r5
 8003e72:	f7ff feb9 	bl	8003be8 <_free_r>
 8003e76:	2300      	movs	r3, #0
 8003e78:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e7a:	e00d      	b.n	8003e98 <__sflush_r+0xb8>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	0028      	movs	r0, r5
 8003e80:	47b8      	blx	r7
 8003e82:	0002      	movs	r2, r0
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d1c6      	bne.n	8003e16 <__sflush_r+0x36>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0c3      	beq.n	8003e16 <__sflush_r+0x36>
 8003e8e:	2b1d      	cmp	r3, #29
 8003e90:	d001      	beq.n	8003e96 <__sflush_r+0xb6>
 8003e92:	2b16      	cmp	r3, #22
 8003e94:	d11a      	bne.n	8003ecc <__sflush_r+0xec>
 8003e96:	602e      	str	r6, [r5, #0]
 8003e98:	2000      	movs	r0, #0
 8003e9a:	e01e      	b.n	8003eda <__sflush_r+0xfa>
 8003e9c:	690e      	ldr	r6, [r1, #16]
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	d0fa      	beq.n	8003e98 <__sflush_r+0xb8>
 8003ea2:	680f      	ldr	r7, [r1, #0]
 8003ea4:	600e      	str	r6, [r1, #0]
 8003ea6:	1bba      	subs	r2, r7, r6
 8003ea8:	9201      	str	r2, [sp, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	079b      	lsls	r3, r3, #30
 8003eae:	d100      	bne.n	8003eb2 <__sflush_r+0xd2>
 8003eb0:	694a      	ldr	r2, [r1, #20]
 8003eb2:	60a2      	str	r2, [r4, #8]
 8003eb4:	9b01      	ldr	r3, [sp, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	ddee      	ble.n	8003e98 <__sflush_r+0xb8>
 8003eba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003ebc:	0032      	movs	r2, r6
 8003ebe:	001f      	movs	r7, r3
 8003ec0:	0028      	movs	r0, r5
 8003ec2:	9b01      	ldr	r3, [sp, #4]
 8003ec4:	6a21      	ldr	r1, [r4, #32]
 8003ec6:	47b8      	blx	r7
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	dc07      	bgt.n	8003edc <__sflush_r+0xfc>
 8003ecc:	89a2      	ldrh	r2, [r4, #12]
 8003ece:	2340      	movs	r3, #64	@ 0x40
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	4240      	negs	r0, r0
 8003eda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003edc:	9b01      	ldr	r3, [sp, #4]
 8003ede:	1836      	adds	r6, r6, r0
 8003ee0:	1a1b      	subs	r3, r3, r0
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	e7e6      	b.n	8003eb4 <__sflush_r+0xd4>
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	20400001 	.word	0x20400001

08003eec <_fflush_r>:
 8003eec:	690b      	ldr	r3, [r1, #16]
 8003eee:	b570      	push	{r4, r5, r6, lr}
 8003ef0:	0005      	movs	r5, r0
 8003ef2:	000c      	movs	r4, r1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <_fflush_r+0x12>
 8003ef8:	2500      	movs	r5, #0
 8003efa:	0028      	movs	r0, r5
 8003efc:	bd70      	pop	{r4, r5, r6, pc}
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d004      	beq.n	8003f0c <_fflush_r+0x20>
 8003f02:	6a03      	ldr	r3, [r0, #32]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <_fflush_r+0x20>
 8003f08:	f7ff fc6a 	bl	80037e0 <__sinit>
 8003f0c:	220c      	movs	r2, #12
 8003f0e:	5ea3      	ldrsh	r3, [r4, r2]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f1      	beq.n	8003ef8 <_fflush_r+0xc>
 8003f14:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f16:	07d2      	lsls	r2, r2, #31
 8003f18:	d404      	bmi.n	8003f24 <_fflush_r+0x38>
 8003f1a:	059b      	lsls	r3, r3, #22
 8003f1c:	d402      	bmi.n	8003f24 <_fflush_r+0x38>
 8003f1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f20:	f7ff fe5f 	bl	8003be2 <__retarget_lock_acquire_recursive>
 8003f24:	0028      	movs	r0, r5
 8003f26:	0021      	movs	r1, r4
 8003f28:	f7ff ff5a 	bl	8003de0 <__sflush_r>
 8003f2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f2e:	0005      	movs	r5, r0
 8003f30:	07db      	lsls	r3, r3, #31
 8003f32:	d4e2      	bmi.n	8003efa <_fflush_r+0xe>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	059b      	lsls	r3, r3, #22
 8003f38:	d4df      	bmi.n	8003efa <_fflush_r+0xe>
 8003f3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f3c:	f7ff fe52 	bl	8003be4 <__retarget_lock_release_recursive>
 8003f40:	e7db      	b.n	8003efa <_fflush_r+0xe>
	...

08003f44 <__swhatbuf_r>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	000e      	movs	r6, r1
 8003f48:	001d      	movs	r5, r3
 8003f4a:	230e      	movs	r3, #14
 8003f4c:	5ec9      	ldrsh	r1, [r1, r3]
 8003f4e:	0014      	movs	r4, r2
 8003f50:	b096      	sub	sp, #88	@ 0x58
 8003f52:	2900      	cmp	r1, #0
 8003f54:	da0c      	bge.n	8003f70 <__swhatbuf_r+0x2c>
 8003f56:	89b2      	ldrh	r2, [r6, #12]
 8003f58:	2380      	movs	r3, #128	@ 0x80
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	4019      	ands	r1, r3
 8003f5e:	421a      	tst	r2, r3
 8003f60:	d114      	bne.n	8003f8c <__swhatbuf_r+0x48>
 8003f62:	2380      	movs	r3, #128	@ 0x80
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	2000      	movs	r0, #0
 8003f68:	6029      	str	r1, [r5, #0]
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	b016      	add	sp, #88	@ 0x58
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	466a      	mov	r2, sp
 8003f72:	f000 f853 	bl	800401c <_fstat_r>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	dbed      	blt.n	8003f56 <__swhatbuf_r+0x12>
 8003f7a:	23f0      	movs	r3, #240	@ 0xf0
 8003f7c:	9901      	ldr	r1, [sp, #4]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	4019      	ands	r1, r3
 8003f82:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <__swhatbuf_r+0x50>)
 8003f84:	18c9      	adds	r1, r1, r3
 8003f86:	424b      	negs	r3, r1
 8003f88:	4159      	adcs	r1, r3
 8003f8a:	e7ea      	b.n	8003f62 <__swhatbuf_r+0x1e>
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	2340      	movs	r3, #64	@ 0x40
 8003f90:	e7e9      	b.n	8003f66 <__swhatbuf_r+0x22>
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	ffffe000 	.word	0xffffe000

08003f98 <__smakebuf_r>:
 8003f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9a:	2602      	movs	r6, #2
 8003f9c:	898b      	ldrh	r3, [r1, #12]
 8003f9e:	0005      	movs	r5, r0
 8003fa0:	000c      	movs	r4, r1
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	4233      	tst	r3, r6
 8003fa6:	d007      	beq.n	8003fb8 <__smakebuf_r+0x20>
 8003fa8:	0023      	movs	r3, r4
 8003faa:	3347      	adds	r3, #71	@ 0x47
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	6123      	str	r3, [r4, #16]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	6163      	str	r3, [r4, #20]
 8003fb4:	b005      	add	sp, #20
 8003fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb8:	ab03      	add	r3, sp, #12
 8003fba:	aa02      	add	r2, sp, #8
 8003fbc:	f7ff ffc2 	bl	8003f44 <__swhatbuf_r>
 8003fc0:	9f02      	ldr	r7, [sp, #8]
 8003fc2:	9001      	str	r0, [sp, #4]
 8003fc4:	0039      	movs	r1, r7
 8003fc6:	0028      	movs	r0, r5
 8003fc8:	f7ff fe7a 	bl	8003cc0 <_malloc_r>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d108      	bne.n	8003fe2 <__smakebuf_r+0x4a>
 8003fd0:	220c      	movs	r2, #12
 8003fd2:	5ea3      	ldrsh	r3, [r4, r2]
 8003fd4:	059a      	lsls	r2, r3, #22
 8003fd6:	d4ed      	bmi.n	8003fb4 <__smakebuf_r+0x1c>
 8003fd8:	2203      	movs	r2, #3
 8003fda:	4393      	bics	r3, r2
 8003fdc:	431e      	orrs	r6, r3
 8003fde:	81a6      	strh	r6, [r4, #12]
 8003fe0:	e7e2      	b.n	8003fa8 <__smakebuf_r+0x10>
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	89a2      	ldrh	r2, [r4, #12]
 8003fe6:	6020      	str	r0, [r4, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	9b03      	ldr	r3, [sp, #12]
 8003fee:	6120      	str	r0, [r4, #16]
 8003ff0:	6167      	str	r7, [r4, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <__smakebuf_r+0x78>
 8003ff6:	0028      	movs	r0, r5
 8003ff8:	230e      	movs	r3, #14
 8003ffa:	5ee1      	ldrsh	r1, [r4, r3]
 8003ffc:	f000 f820 	bl	8004040 <_isatty_r>
 8004000:	2800      	cmp	r0, #0
 8004002:	d005      	beq.n	8004010 <__smakebuf_r+0x78>
 8004004:	2303      	movs	r3, #3
 8004006:	89a2      	ldrh	r2, [r4, #12]
 8004008:	439a      	bics	r2, r3
 800400a:	3b02      	subs	r3, #2
 800400c:	4313      	orrs	r3, r2
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	9a01      	ldr	r2, [sp, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	e7cc      	b.n	8003fb4 <__smakebuf_r+0x1c>
	...

0800401c <_fstat_r>:
 800401c:	2300      	movs	r3, #0
 800401e:	b570      	push	{r4, r5, r6, lr}
 8004020:	4d06      	ldr	r5, [pc, #24]	@ (800403c <_fstat_r+0x20>)
 8004022:	0004      	movs	r4, r0
 8004024:	0008      	movs	r0, r1
 8004026:	0011      	movs	r1, r2
 8004028:	602b      	str	r3, [r5, #0]
 800402a:	f7fc fd9e 	bl	8000b6a <_fstat>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d103      	bne.n	800403a <_fstat_r+0x1e>
 8004032:	682b      	ldr	r3, [r5, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d000      	beq.n	800403a <_fstat_r+0x1e>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	20000368 	.word	0x20000368

08004040 <_isatty_r>:
 8004040:	2300      	movs	r3, #0
 8004042:	b570      	push	{r4, r5, r6, lr}
 8004044:	4d06      	ldr	r5, [pc, #24]	@ (8004060 <_isatty_r+0x20>)
 8004046:	0004      	movs	r4, r0
 8004048:	0008      	movs	r0, r1
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fc fd9b 	bl	8000b86 <_isatty>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d103      	bne.n	800405c <_isatty_r+0x1c>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d000      	beq.n	800405c <_isatty_r+0x1c>
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	20000368 	.word	0x20000368

08004064 <_sbrk_r>:
 8004064:	2300      	movs	r3, #0
 8004066:	b570      	push	{r4, r5, r6, lr}
 8004068:	4d06      	ldr	r5, [pc, #24]	@ (8004084 <_sbrk_r+0x20>)
 800406a:	0004      	movs	r4, r0
 800406c:	0008      	movs	r0, r1
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	f7fc fd9e 	bl	8000bb0 <_sbrk>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d103      	bne.n	8004080 <_sbrk_r+0x1c>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d000      	beq.n	8004080 <_sbrk_r+0x1c>
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	bd70      	pop	{r4, r5, r6, pc}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	20000368 	.word	0x20000368

08004088 <_init>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr

08004094 <_fini>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr
