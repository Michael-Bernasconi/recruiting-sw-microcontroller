
Potenziomentri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002328  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080023e8  080023e8  000033e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002470  08002470  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002470  08002470  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002470  08002470  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002470  08002470  00003470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002474  08002474  00003474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002478  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08002484  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08002484  0000418c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f029  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002469  00000000  00000000  0001305d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  000154c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090c  00000000  00000000  00016098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014cd5  00000000  00000000  000169a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0d3  00000000  00000000  0002b679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000805eb  00000000  00000000  0003a74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bad37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002980  00000000  00000000  000bad7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000bd6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023d0 	.word	0x080023d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080023d0 	.word	0x080023d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
	HAL_Init();
 8000226:	f000 f9f7 	bl	8000618 <HAL_Init>
	    SystemClock_Config();
 800022a:	f000 f81d 	bl	8000268 <SystemClock_Config>
	    MX_GPIO_Init();
 800022e:	f000 f899 	bl	8000364 <MX_GPIO_Init>
	    MX_USART1_UART_Init();  // Assicurati che huart1 sia inizializzato
 8000232:	f000 f85f 	bl	80002f4 <MX_USART1_UART_Init>

	    char msg[] = "Test seriale!\r\n";
 8000236:	003b      	movs	r3, r7
 8000238:	4a09      	ldr	r2, [pc, #36]	@ (8000260 <main+0x40>)
 800023a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800023c:	c313      	stmia	r3!, {r0, r1, r4}
 800023e:	6812      	ldr	r2, [r2, #0]
 8000240:	601a      	str	r2, [r3, #0]

	    while (1)
	    {
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
 8000242:	2301      	movs	r3, #1
 8000244:	425b      	negs	r3, r3
 8000246:	0039      	movs	r1, r7
 8000248:	4806      	ldr	r0, [pc, #24]	@ (8000264 <main+0x44>)
 800024a:	220f      	movs	r2, #15
 800024c:	f001 fc04 	bl	8001a58 <HAL_UART_Transmit>
	        HAL_Delay(1000);  // ogni 1 secondo
 8000250:	23fa      	movs	r3, #250	@ 0xfa
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fa5d 	bl	8000714 <HAL_Delay>
	        HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	e7f1      	b.n	8000242 <main+0x22>
 800025e:	46c0      	nop			@ (mov r8, r8)
 8000260:	080023e8 	.word	0x080023e8
 8000264:	200000e8 	.word	0x200000e8

08000268 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
/* System Clock Configuration */
void SystemClock_Config(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b08d      	sub	sp, #52	@ 0x34
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	2414      	movs	r4, #20
 8000270:	193b      	adds	r3, r7, r4
 8000272:	0018      	movs	r0, r3
 8000274:	231c      	movs	r3, #28
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f002 f87d 	bl	8002378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	003b      	movs	r3, r7
 8000280:	0018      	movs	r0, r3
 8000282:	2314      	movs	r3, #20
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f002 f876 	bl	8002378 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 800028c:	4b18      	ldr	r3, [pc, #96]	@ (80002f0 <SystemClock_Config+0x88>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2207      	movs	r2, #7
 8000292:	4393      	bics	r3, r2
 8000294:	001a      	movs	r2, r3
 8000296:	4b16      	ldr	r3, [pc, #88]	@ (80002f0 <SystemClock_Config+0x88>)
 8000298:	2101      	movs	r1, #1
 800029a:	430a      	orrs	r2, r1
 800029c:	601a      	str	r2, [r3, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	2201      	movs	r2, #1
 80002a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2280      	movs	r2, #128	@ 0x80
 80002a8:	0252      	lsls	r2, r2, #9
 80002aa:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 ff36 	bl	8001120 <HAL_RCC_OscConfig>
 80002b4:	1e03      	subs	r3, r0, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x54>
 80002b8:	f000 f884 	bl	80003c4 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 80002bc:	003b      	movs	r3, r7
 80002be:	2207      	movs	r2, #7
 80002c0:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002c2:	003b      	movs	r3, r7
 80002c4:	2201      	movs	r2, #1
 80002c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002c8:	003b      	movs	r3, r7
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002ce:	003b      	movs	r3, r7
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) Error_Handler();
 80002d4:	003b      	movs	r3, r7
 80002d6:	2101      	movs	r1, #1
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 f905 	bl	80014e8 <HAL_RCC_ClockConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x7e>
 80002e2:	f000 f86f 	bl	80003c4 <Error_Handler>
}
 80002e6:	46c0      	nop			@ (mov r8, r8)
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b00d      	add	sp, #52	@ 0x34
 80002ec:	bd90      	pop	{r4, r7, pc}
 80002ee:	46c0      	nop			@ (mov r8, r8)
 80002f0:	40022000 	.word	0x40022000

080002f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80002f8:	4b18      	ldr	r3, [pc, #96]	@ (800035c <MX_USART1_UART_Init+0x68>)
 80002fa:	4a19      	ldr	r2, [pc, #100]	@ (8000360 <MX_USART1_UART_Init+0x6c>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002fe:	4b17      	ldr	r3, [pc, #92]	@ (800035c <MX_USART1_UART_Init+0x68>)
 8000300:	22e1      	movs	r2, #225	@ 0xe1
 8000302:	0252      	lsls	r2, r2, #9
 8000304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b15      	ldr	r3, [pc, #84]	@ (800035c <MX_USART1_UART_Init+0x68>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b13      	ldr	r3, [pc, #76]	@ (800035c <MX_USART1_UART_Init+0x68>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000312:	4b12      	ldr	r3, [pc, #72]	@ (800035c <MX_USART1_UART_Init+0x68>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b10      	ldr	r3, [pc, #64]	@ (800035c <MX_USART1_UART_Init+0x68>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <MX_USART1_UART_Init+0x68>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <MX_USART1_UART_Init+0x68>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032a:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_USART1_UART_Init+0x68>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000330:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <MX_USART1_UART_Init+0x68>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_USART1_UART_Init+0x68>)
 8000338:	2200      	movs	r2, #0
 800033a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK) Error_Handler();
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <MX_USART1_UART_Init+0x68>)
 800033e:	0018      	movs	r0, r3
 8000340:	f001 fb34 	bl	80019ac <HAL_UART_Init>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <MX_USART1_UART_Init+0x58>
 8000348:	f000 f83c 	bl	80003c4 <Error_Handler>
  HAL_UARTEx_DisableFifoMode(&huart1);
 800034c:	4b03      	ldr	r3, [pc, #12]	@ (800035c <MX_USART1_UART_Init+0x68>)
 800034e:	0018      	movs	r0, r3
 8000350:	f001 ffd8 	bl	8002304 <HAL_UARTEx_DisableFifoMode>
}
 8000354:	46c0      	nop			@ (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	200000e8 	.word	0x200000e8
 8000360:	40013800 	.word	0x40013800

08000364 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */
/* GPIO init function */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	0018      	movs	r0, r3
 800036e:	2314      	movs	r3, #20
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f002 f800 	bl	8002378 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_GPIO_Init+0x54>)
 800037a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800037c:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_GPIO_Init+0x54>)
 800037e:	2108      	movs	r1, #8
 8000380:	430a      	orrs	r2, r1
 8000382:	635a      	str	r2, [r3, #52]	@ 0x34
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_GPIO_Init+0x54>)
 8000386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000388:	2208      	movs	r2, #8
 800038a:	4013      	ands	r3, r2
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	683b      	ldr	r3, [r7, #0]

  // PD2 come input con interrupt
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2204      	movs	r2, #4
 8000394:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4a08      	ldr	r2, [pc, #32]	@ (80003bc <MX_GPIO_Init+0x58>)
 800039a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4a06      	ldr	r2, [pc, #24]	@ (80003c0 <MX_GPIO_Init+0x5c>)
 80003a6:	0019      	movs	r1, r3
 80003a8:	0010      	movs	r0, r2
 80003aa:	f000 fd47 	bl	8000e3c <HAL_GPIO_Init>
}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b006      	add	sp, #24
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			@ (mov r8, r8)
 80003b8:	40021000 	.word	0x40021000
 80003bc:	10310000 	.word	0x10310000
 80003c0:	50000c00 	.word	0x50000c00

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	46c0      	nop			@ (mov r8, r8)
 80003ce:	e7fd      	b.n	80003cc <Error_Handler+0x8>

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <HAL_MspInit+0x44>)
 80003d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003da:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <HAL_MspInit+0x44>)
 80003dc:	2101      	movs	r1, #1
 80003de:	430a      	orrs	r2, r1
 80003e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <HAL_MspInit+0x44>)
 80003e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e6:	2201      	movs	r2, #1
 80003e8:	4013      	ands	r3, r2
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <HAL_MspInit+0x44>)
 80003f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003f2:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <HAL_MspInit+0x44>)
 80003f4:	2180      	movs	r1, #128	@ 0x80
 80003f6:	0549      	lsls	r1, r1, #21
 80003f8:	430a      	orrs	r2, r1
 80003fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <HAL_MspInit+0x44>)
 80003fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000400:	2380      	movs	r3, #128	@ 0x80
 8000402:	055b      	lsls	r3, r3, #21
 8000404:	4013      	ands	r3, r2
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	40021000 	.word	0x40021000

08000418 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b091      	sub	sp, #68	@ 0x44
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	232c      	movs	r3, #44	@ 0x2c
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	0018      	movs	r0, r3
 8000426:	2314      	movs	r3, #20
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f001 ffa4 	bl	8002378 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000430:	2410      	movs	r4, #16
 8000432:	193b      	adds	r3, r7, r4
 8000434:	0018      	movs	r0, r3
 8000436:	231c      	movs	r3, #28
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f001 ff9c 	bl	8002378 <memset>
  if(huart->Instance==USART1)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a2e      	ldr	r2, [pc, #184]	@ (8000500 <HAL_UART_MspInit+0xe8>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d156      	bne.n	80004f8 <HAL_UART_MspInit+0xe0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2201      	movs	r2, #1
 800044e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000450:	193b      	adds	r3, r7, r4
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000456:	193b      	adds	r3, r7, r4
 8000458:	0018      	movs	r0, r3
 800045a:	f001 f9bb 	bl	80017d4 <HAL_RCCEx_PeriphCLKConfig>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000462:	f7ff ffaf 	bl	80003c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000466:	4b27      	ldr	r3, [pc, #156]	@ (8000504 <HAL_UART_MspInit+0xec>)
 8000468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800046a:	4b26      	ldr	r3, [pc, #152]	@ (8000504 <HAL_UART_MspInit+0xec>)
 800046c:	2180      	movs	r1, #128	@ 0x80
 800046e:	01c9      	lsls	r1, r1, #7
 8000470:	430a      	orrs	r2, r1
 8000472:	641a      	str	r2, [r3, #64]	@ 0x40
 8000474:	4b23      	ldr	r3, [pc, #140]	@ (8000504 <HAL_UART_MspInit+0xec>)
 8000476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	01db      	lsls	r3, r3, #7
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b20      	ldr	r3, [pc, #128]	@ (8000504 <HAL_UART_MspInit+0xec>)
 8000484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000486:	4b1f      	ldr	r3, [pc, #124]	@ (8000504 <HAL_UART_MspInit+0xec>)
 8000488:	2101      	movs	r1, #1
 800048a:	430a      	orrs	r2, r1
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
 800048e:	4b1d      	ldr	r3, [pc, #116]	@ (8000504 <HAL_UART_MspInit+0xec>)
 8000490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000492:	2201      	movs	r2, #1
 8000494:	4013      	ands	r3, r2
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800049a:	242c      	movs	r4, #44	@ 0x2c
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2202      	movs	r2, #2
 80004a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2202      	movs	r2, #2
 80004a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2204      	movs	r2, #4
 80004b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	193a      	adds	r2, r7, r4
 80004bc:	23a0      	movs	r3, #160	@ 0xa0
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fcba 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004c8:	0021      	movs	r1, r4
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2280      	movs	r2, #128	@ 0x80
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2202      	movs	r2, #2
 80004d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2201      	movs	r2, #1
 80004e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	187a      	adds	r2, r7, r1
 80004ec:	23a0      	movs	r3, #160	@ 0xa0
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fca2 	bl	8000e3c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80004f8:	46c0      	nop			@ (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b011      	add	sp, #68	@ 0x44
 80004fe:	bd90      	pop	{r4, r7, pc}
 8000500:	40013800 	.word	0x40013800
 8000504:	40021000 	.word	0x40021000

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	e7fd      	b.n	800050c <NMI_Handler+0x4>

08000510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000514:	46c0      	nop			@ (mov r8, r8)
 8000516:	e7fd      	b.n	8000514 <HardFault_Handler+0x4>

08000518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000530:	f000 f8d4 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f852 	bl	80005e8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000550:	4b03      	ldr	r3, [pc, #12]	@ (8000560 <DMA1_Channel1_IRQHandler+0x14>)
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fb76 	bl	8000c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	2000008c 	.word	0x2000008c

08000564 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000568:	4b03      	ldr	r3, [pc, #12]	@ (8000578 <ADC1_IRQHandler+0x14>)
 800056a:	0018      	movs	r0, r3
 800056c:	f000 f924 	bl	80007b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000570:	46c0      	nop			@ (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	20000028 	.word	0x20000028

0800057c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000580:	4b03      	ldr	r3, [pc, #12]	@ (8000590 <SystemInit+0x14>)
 8000582:	2280      	movs	r2, #128	@ 0x80
 8000584:	0512      	lsls	r2, r2, #20
 8000586:	609a      	str	r2, [r3, #8]
#endif
}
 8000588:	46c0      	nop			@ (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000596:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000598:	f7ff fff0 	bl	800057c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800059c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800059e:	e003      	b.n	80005a8 <LoopCopyDataInit>

080005a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80005a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005a6:	3104      	adds	r1, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005a8:	480a      	ldr	r0, [pc, #40]	@ (80005d4 <LoopForever+0xa>)
  ldr r3, =_edata
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <LoopForever+0xe>)
  adds r2, r0, r1
 80005ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005b0:	d3f6      	bcc.n	80005a0 <CopyDataInit>
  ldr r2, =_sbss
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <LoopForever+0x12>)
  b LoopFillZerobss
 80005b4:	e002      	b.n	80005bc <LoopFillZerobss>

080005b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80005b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ba:	3204      	adds	r2, #4

080005bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <LoopForever+0x16>)
  cmp r2, r3
 80005be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005c0:	d3f9      	bcc.n	80005b6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005c2:	f001 fee1 	bl	8002388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c6:	f7ff fe2b 	bl	8000220 <main>

080005ca <LoopForever>:

LoopForever:
    b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   r0, =_estack
 80005cc:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80005d0:	08002478 	.word	0x08002478
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80005dc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80005e0:	2000018c 	.word	0x2000018c

080005e4 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <DMA1_Channel2_3_IRQHandler>
	...

080005e8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	0002      	movs	r2, r0
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	0013      	movs	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	189b      	adds	r3, r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <BSP_PB_IRQHandler+0x2c>)
 8000602:	189b      	adds	r3, r3, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f000 fbcf 	bl	8000da8 <HAL_EXTI_IRQHandler>
}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	2000017c 	.word	0x2000017c

08000618 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f80f 	bl	8000648 <HAL_InitTick>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d003      	beq.n	8000636 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e001      	b.n	800063a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000636:	f7ff fecb 	bl	80003d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
}
 800063e:	0018      	movs	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000658:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <HAL_InitTick+0x88>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <HAL_InitTick+0x8c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <HAL_InitTick+0x88>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	0019      	movs	r1, r3
 800066a:	23fa      	movs	r3, #250	@ 0xfa
 800066c:	0098      	lsls	r0, r3, #2
 800066e:	f7ff fd4b 	bl	8000108 <__udivsi3>
 8000672:	0003      	movs	r3, r0
 8000674:	0019      	movs	r1, r3
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff fd46 	bl	8000108 <__udivsi3>
 800067c:	0003      	movs	r3, r0
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fad3 	bl	8000c2a <HAL_SYSTICK_Config>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d112      	bne.n	80006ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d80a      	bhi.n	80006a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fab2 	bl	8000c00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <HAL_InitTick+0x90>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e00d      	b.n	80006c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e008      	b.n	80006c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e003      	b.n	80006c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	001a      	movs	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <HAL_IncTick+0x20>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	18d2      	adds	r2, r2, r3
 80006ec:	4b03      	ldr	r3, [pc, #12]	@ (80006fc <HAL_IncTick+0x20>)
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000188 	.word	0x20000188

08000700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b02      	ldr	r3, [pc, #8]	@ (8000710 <HAL_GetTick+0x10>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	20000188 	.word	0x20000188

08000714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800071c:	f7ff fff0 	bl	8000700 <HAL_GetTick>
 8000720:	0003      	movs	r3, r0
 8000722:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	d005      	beq.n	800073a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <HAL_Delay+0x44>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	001a      	movs	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	189b      	adds	r3, r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	f7ff ffe0 	bl	8000700 <HAL_GetTick>
 8000740:	0002      	movs	r2, r0
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	429a      	cmp	r2, r3
 800074a:	d8f7      	bhi.n	800073c <HAL_Delay+0x28>
  {
  }
}
 800074c:	46c0      	nop			@ (mov r8, r8)
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	20000008 	.word	0x20000008

0800075c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68da      	ldr	r2, [r3, #12]
 8000768:	23c0      	movs	r3, #192	@ 0xc0
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	4013      	ands	r3, r2
 800076e:	d101      	bne.n	8000774 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000770:	2301      	movs	r3, #1
 8000772:	e000      	b.n	8000776 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000774:	2300      	movs	r3, #0
}
 8000776:	0018      	movs	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}

0800077e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	2203      	movs	r2, #3
 800078c:	4013      	ands	r3, r2
}
 800078e:	0018      	movs	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}

08000796 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	2204      	movs	r2, #4
 80007a4:	4013      	ands	r3, r2
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d101      	bne.n	80007ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80007aa:	2301      	movs	r3, #1
 80007ac:	e000      	b.n	80007b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	2202      	movs	r2, #2
 80007d8:	4013      	ands	r3, r2
 80007da:	d017      	beq.n	800080c <HAL_ADC_IRQHandler+0x54>
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2202      	movs	r2, #2
 80007e0:	4013      	ands	r3, r2
 80007e2:	d013      	beq.n	800080c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e8:	2210      	movs	r2, #16
 80007ea:	4013      	ands	r3, r2
 80007ec:	d106      	bne.n	80007fc <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f2:	2280      	movs	r2, #128	@ 0x80
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	431a      	orrs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f95c 	bl	8000abc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2202      	movs	r2, #2
 800080a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2204      	movs	r2, #4
 8000810:	4013      	ands	r3, r2
 8000812:	d003      	beq.n	800081c <HAL_ADC_IRQHandler+0x64>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2204      	movs	r2, #4
 8000818:	4013      	ands	r3, r2
 800081a:	d107      	bne.n	800082c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	2208      	movs	r2, #8
 8000820:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000822:	d04d      	beq.n	80008c0 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2208      	movs	r2, #8
 8000828:	4013      	ands	r3, r2
 800082a:	d049      	beq.n	80008c0 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000830:	2210      	movs	r2, #16
 8000832:	4013      	ands	r3, r2
 8000834:	d106      	bne.n	8000844 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083a:	2280      	movs	r2, #128	@ 0x80
 800083c:	0092      	lsls	r2, r2, #2
 800083e:	431a      	orrs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff ff87 	bl	800075c <LL_ADC_REG_IsTriggerSourceSWStart>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d02e      	beq.n	80008b0 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7e9b      	ldrb	r3, [r3, #26]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d12a      	bne.n	80008b0 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2208      	movs	r2, #8
 8000862:	4013      	ands	r3, r2
 8000864:	2b08      	cmp	r3, #8
 8000866:	d123      	bne.n	80008b0 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff ff92 	bl	8000796 <LL_ADC_REG_IsConversionOngoing>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d110      	bne.n	8000898 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	685a      	ldr	r2, [r3, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	210c      	movs	r1, #12
 8000882:	438a      	bics	r2, r1
 8000884:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088a:	4a6f      	ldr	r2, [pc, #444]	@ (8000a48 <HAL_ADC_IRQHandler+0x290>)
 800088c:	4013      	ands	r3, r2
 800088e:	2201      	movs	r2, #1
 8000890:	431a      	orrs	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	659a      	str	r2, [r3, #88]	@ 0x58
 8000896:	e00b      	b.n	80008b0 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089c:	2220      	movs	r2, #32
 800089e:	431a      	orrs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008a8:	2201      	movs	r2, #1
 80008aa:	431a      	orrs	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f8ca 	bl	8000a4c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	220c      	movs	r2, #12
 80008be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	2280      	movs	r2, #128	@ 0x80
 80008c4:	4013      	ands	r3, r2
 80008c6:	d012      	beq.n	80008ee <HAL_ADC_IRQHandler+0x136>
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2280      	movs	r2, #128	@ 0x80
 80008cc:	4013      	ands	r3, r2
 80008ce:	d00e      	beq.n	80008ee <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	0252      	lsls	r2, r2, #9
 80008d8:	431a      	orrs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 f8bb 	bl	8000a5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	2380      	movs	r3, #128	@ 0x80
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	d014      	beq.n	8000922 <HAL_ADC_IRQHandler+0x16a>
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	2380      	movs	r3, #128	@ 0x80
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4013      	ands	r3, r2
 8000900:	d00f      	beq.n	8000922 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	0292      	lsls	r2, r2, #10
 800090a:	431a      	orrs	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	0018      	movs	r0, r3
 8000914:	f000 f8c2 	bl	8000a9c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4013      	ands	r3, r2
 800092a:	d014      	beq.n	8000956 <HAL_ADC_IRQHandler+0x19e>
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	2380      	movs	r3, #128	@ 0x80
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4013      	ands	r3, r2
 8000934:	d00f      	beq.n	8000956 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	02d2      	lsls	r2, r2, #11
 800093e:	431a      	orrs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f8b0 	bl	8000aac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2280      	movs	r2, #128	@ 0x80
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	2210      	movs	r2, #16
 800095a:	4013      	ands	r3, r2
 800095c:	d02b      	beq.n	80009b6 <HAL_ADC_IRQHandler+0x1fe>
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2210      	movs	r2, #16
 8000962:	4013      	ands	r3, r2
 8000964:	d027      	beq.n	80009b6 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800096e:	2301      	movs	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	e008      	b.n	8000986 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ff00 	bl	800077e <LL_ADC_REG_GetDMATransfer>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8000982:	2301      	movs	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d110      	bne.n	80009ae <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000990:	2280      	movs	r2, #128	@ 0x80
 8000992:	00d2      	lsls	r2, r2, #3
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800099e:	2202      	movs	r2, #2
 80009a0:	431a      	orrs	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 f85f 	bl	8000a6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2210      	movs	r2, #16
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	2201      	movs	r2, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	d01a      	beq.n	80009f4 <HAL_ADC_IRQHandler+0x23c>
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2201      	movs	r2, #1
 80009c2:	4013      	ands	r3, r2
 80009c4:	d016      	beq.n	80009f4 <HAL_ADC_IRQHandler+0x23c>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	2210      	movs	r2, #16
 80009cc:	4013      	ands	r3, r2
 80009ce:	d105      	bne.n	80009dc <HAL_ADC_IRQHandler+0x224>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d4:	2201      	movs	r2, #1
 80009d6:	431a      	orrs	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 f854 	bl	8000a8c <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	685a      	ldr	r2, [r3, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2101      	movs	r1, #1
 80009f0:	438a      	bics	r2, r1
 80009f2:	605a      	str	r2, [r3, #4]
  }

  /* ========== Check End of Calibration flag ========== */
  if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	011b      	lsls	r3, r3, #4
 80009fa:	4013      	ands	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_ADC_IRQHandler+0x262>
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	011b      	lsls	r3, r3, #4
 8000a04:	4013      	ands	r3, r2
 8000a06:	d008      	beq.n	8000a1a <HAL_ADC_IRQHandler+0x262>
  {
    /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->CalibrationCpltCallback(hadc);
#else
    HAL_ADC_CalibrationCpltCallback(hadc);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f836 	bl	8000a7c <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear end of calibration flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	2380      	movs	r3, #128	@ 0x80
 8000a1e:	019b      	lsls	r3, r3, #6
 8000a20:	4013      	ands	r3, r2
 8000a22:	d00d      	beq.n	8000a40 <HAL_ADC_IRQHandler+0x288>
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	019b      	lsls	r3, r3, #6
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d008      	beq.n	8000a40 <HAL_ADC_IRQHandler+0x288>
  {
    /* Channel configuration ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ChannelConfigReadyCallback(hadc);
#else
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 f84b 	bl	8000acc <HAL_ADCEx_ChannelConfigReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2280      	movs	r2, #128	@ 0x80
 8000a3c:	0192      	lsls	r2, r2, #6
 8000a3e:	601a      	str	r2, [r3, #0]
  }
}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b006      	add	sp, #24
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	fffffefe 	.word	0xfffffefe

08000a4c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000af0:	d828      	bhi.n	8000b44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af2:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb0 <__NVIC_SetPriority+0xd4>)
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	33c0      	adds	r3, #192	@ 0xc0
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	589b      	ldr	r3, [r3, r2]
 8000b02:	1dfa      	adds	r2, r7, #7
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	0011      	movs	r1, r2
 8000b08:	2203      	movs	r2, #3
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	00d2      	lsls	r2, r2, #3
 8000b0e:	21ff      	movs	r1, #255	@ 0xff
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	43d2      	mvns	r2, r2
 8000b16:	401a      	ands	r2, r3
 8000b18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	22ff      	movs	r2, #255	@ 0xff
 8000b20:	401a      	ands	r2, r3
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	2303      	movs	r3, #3
 8000b2a:	4003      	ands	r3, r0
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	481f      	ldr	r0, [pc, #124]	@ (8000bb0 <__NVIC_SetPriority+0xd4>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	33c0      	adds	r3, #192	@ 0xc0
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b42:	e031      	b.n	8000ba8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b44:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb4 <__NVIC_SetPriority+0xd8>)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	400b      	ands	r3, r1
 8000b50:	3b08      	subs	r3, #8
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3306      	adds	r3, #6
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	18d3      	adds	r3, r2, r3
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1dfa      	adds	r2, r7, #7
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	0011      	movs	r1, r2
 8000b64:	2203      	movs	r2, #3
 8000b66:	400a      	ands	r2, r1
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	21ff      	movs	r1, #255	@ 0xff
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	000a      	movs	r2, r1
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	22ff      	movs	r2, #255	@ 0xff
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	2303      	movs	r3, #3
 8000b86:	4003      	ands	r3, r0
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <__NVIC_SetPriority+0xd8>)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	001c      	movs	r4, r3
 8000b94:	230f      	movs	r3, #15
 8000b96:	4023      	ands	r3, r4
 8000b98:	3b08      	subs	r3, #8
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	3306      	adds	r3, #6
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	18c3      	adds	r3, r0, r3
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	601a      	str	r2, [r3, #0]
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b003      	add	sp, #12
 8000bae:	bd90      	pop	{r4, r7, pc}
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	1e5a      	subs	r2, r3, #1
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	045b      	lsls	r3, r3, #17
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d301      	bcc.n	8000bd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e010      	b.n	8000bf2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <SysTick_Config+0x44>)
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	3a01      	subs	r2, #1
 8000bd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd8:	2301      	movs	r3, #1
 8000bda:	425b      	negs	r3, r3
 8000bdc:	2103      	movs	r1, #3
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff ff7c 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <SysTick_Config+0x44>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <SysTick_Config+0x44>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	1c02      	adds	r2, r0, #0
 8000c10:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff ff5d 	bl	8000adc <__NVIC_SetPriority>
}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b004      	add	sp, #16
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ffbf 	bl	8000bb8 <SysTick_Config>
 8000c3a:	0003      	movs	r3, r0
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8000c4c:	4b55      	ldr	r3, [pc, #340]	@ (8000da4 <HAL_DMA_IRQHandler+0x160>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	221c      	movs	r2, #28
 8000c60:	4013      	ands	r3, r2
 8000c62:	2204      	movs	r2, #4
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d027      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x7a>
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	2204      	movs	r2, #4
 8000c72:	4013      	ands	r3, r2
 8000c74:	d023      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	4013      	ands	r3, r2
 8000c80:	d107      	bne.n	8000c92 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	438a      	bics	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000c92:	4b44      	ldr	r3, [pc, #272]	@ (8000da4 <HAL_DMA_IRQHandler+0x160>)
 8000c94:	6859      	ldr	r1, [r3, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	221c      	movs	r2, #28
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	4b40      	ldr	r3, [pc, #256]	@ (8000da4 <HAL_DMA_IRQHandler+0x160>)
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d100      	bne.n	8000cb2 <HAL_DMA_IRQHandler+0x6e>
 8000cb0:	e073      	b.n	8000d9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	0010      	movs	r0, r2
 8000cba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000cbc:	e06d      	b.n	8000d9a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	221c      	movs	r2, #28
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	409a      	lsls	r2, r3
 8000cca:	0013      	movs	r3, r2
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d02e      	beq.n	8000d30 <HAL_DMA_IRQHandler+0xec>
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d02a      	beq.n	8000d30 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2220      	movs	r2, #32
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d10b      	bne.n	8000cfe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2225      	movs	r2, #37	@ 0x25
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000cfe:	4b29      	ldr	r3, [pc, #164]	@ (8000da4 <HAL_DMA_IRQHandler+0x160>)
 8000d00:	6859      	ldr	r1, [r3, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	221c      	movs	r2, #28
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <HAL_DMA_IRQHandler+0x160>)
 8000d10:	430a      	orrs	r2, r1
 8000d12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2224      	movs	r2, #36	@ 0x24
 8000d18:	2100      	movs	r1, #0
 8000d1a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d03a      	beq.n	8000d9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	0010      	movs	r0, r2
 8000d2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000d2e:	e034      	b.n	8000d9a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	221c      	movs	r2, #28
 8000d36:	4013      	ands	r3, r2
 8000d38:	2208      	movs	r2, #8
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4013      	ands	r3, r2
 8000d42:	d02b      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x158>
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2208      	movs	r2, #8
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d027      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	210e      	movs	r1, #14
 8000d58:	438a      	bics	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <HAL_DMA_IRQHandler+0x160>)
 8000d5e:	6859      	ldr	r1, [r3, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	221c      	movs	r2, #28
 8000d66:	4013      	ands	r3, r2
 8000d68:	2201      	movs	r2, #1
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <HAL_DMA_IRQHandler+0x160>)
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2225      	movs	r2, #37	@ 0x25
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2224      	movs	r2, #36	@ 0x24
 8000d84:	2100      	movs	r1, #0
 8000d86:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	0010      	movs	r0, r2
 8000d98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	46c0      	nop			@ (mov r8, r8)
}
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b004      	add	sp, #16
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40020000 	.word	0x40020000

08000da8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	0c1b      	lsrs	r3, r3, #16
 8000db6:	2201      	movs	r2, #1
 8000db8:	4013      	ands	r3, r2
 8000dba:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	221f      	movs	r2, #31
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	015b      	lsls	r3, r3, #5
 8000dd0:	4a18      	ldr	r2, [pc, #96]	@ (8000e34 <HAL_EXTI_IRQHandler+0x8c>)
 8000dd2:	4694      	mov	ip, r2
 8000dd4:	4463      	add	r3, ip
 8000dd6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d009      	beq.n	8000dfc <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	015b      	lsls	r3, r3, #5
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <HAL_EXTI_IRQHandler+0x90>)
 8000e02:	4694      	mov	ip, r2
 8000e04:	4463      	add	r3, ip
 8000e06:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d009      	beq.n	8000e2c <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	4798      	blx	r3
    }
  }
}
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b006      	add	sp, #24
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	4002180c 	.word	0x4002180c
 8000e38:	40021810 	.word	0x40021810

08000e3c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e4a:	e153      	b.n	80010f4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4091      	lsls	r1, r2
 8000e56:	000a      	movs	r2, r1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d100      	bne.n	8000e64 <HAL_GPIO_Init+0x28>
 8000e62:	e144      	b.n	80010ee <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x38>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d125      	bne.n	8000ec0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	58d3      	ldr	r3, [r2, r3]
 8000e80:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	2207      	movs	r2, #7
 8000e86:	4013      	ands	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	0013      	movs	r3, r2
 8000e90:	43da      	mvns	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2107      	movs	r1, #7
 8000ea4:	400b      	ands	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	0013      	movs	r3, r2
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	6979      	ldr	r1, [r7, #20]
 8000ebe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	401a      	ands	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	0013      	movs	r3, r2
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d00b      	beq.n	8000f14 <HAL_GPIO_Init+0xd8>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f08:	2b11      	cmp	r3, #17
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b12      	cmp	r3, #18
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	4013      	ands	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	2201      	movs	r2, #1
 8000f62:	401a      	ands	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d017      	beq.n	8000fae <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4013      	ands	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	2380      	movs	r3, #128	@ 0x80
 8000fb4:	055b      	lsls	r3, r3, #21
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d100      	bne.n	8000fbc <HAL_GPIO_Init+0x180>
 8000fba:	e098      	b.n	80010ee <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000fbc:	4a53      	ldr	r2, [pc, #332]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3318      	adds	r3, #24
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	589b      	ldr	r3, [r3, r2]
 8000fc8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4013      	ands	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	43da      	mvns	r2, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	23a0      	movs	r3, #160	@ 0xa0
 8000fe4:	05db      	lsls	r3, r3, #23
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x1e2>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a48      	ldr	r2, [pc, #288]	@ (8001110 <HAL_GPIO_Init+0x2d4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x1de>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a47      	ldr	r2, [pc, #284]	@ (8001114 <HAL_GPIO_Init+0x2d8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x1da>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a46      	ldr	r2, [pc, #280]	@ (8001118 <HAL_GPIO_Init+0x2dc>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x1d6>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a45      	ldr	r2, [pc, #276]	@ (800111c <HAL_GPIO_Init+0x2e0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x1d2>
 800100a:	2305      	movs	r3, #5
 800100c:	e008      	b.n	8001020 <HAL_GPIO_Init+0x1e4>
 800100e:	2306      	movs	r3, #6
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x1e4>
 8001012:	2303      	movs	r3, #3
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x1e4>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x1e4>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x1e4>
 800101e:	2300      	movs	r3, #0
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	2103      	movs	r1, #3
 8001024:	400a      	ands	r2, r1
 8001026:	00d2      	lsls	r2, r2, #3
 8001028:	4093      	lsls	r3, r2
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4313      	orrs	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001030:	4936      	ldr	r1, [pc, #216]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3318      	adds	r3, #24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800103e:	4a33      	ldr	r2, [pc, #204]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	58d3      	ldr	r3, [r2, r3]
 8001044:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43da      	mvns	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	4013      	ands	r3, r2
 800104e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	025b      	lsls	r3, r3, #9
 8001058:	4013      	ands	r3, r2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001064:	4929      	ldr	r1, [pc, #164]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800106c:	4a27      	ldr	r2, [pc, #156]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 800106e:	2384      	movs	r3, #132	@ 0x84
 8001070:	58d3      	ldr	r3, [r2, r3]
 8001072:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43da      	mvns	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	4013      	ands	r3, r2
 800107c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001092:	491e      	ldr	r1, [pc, #120]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 8001094:	2284      	movs	r2, #132	@ 0x84
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800109a:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43da      	mvns	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4013      	ands	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	2380      	movs	r3, #128	@ 0x80
 80010b0:	035b      	lsls	r3, r3, #13
 80010b2:	4013      	ands	r3, r2
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43da      	mvns	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	039b      	lsls	r3, r3, #14
 80010dc:	4013      	ands	r3, r2
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <HAL_GPIO_Init+0x2d0>)
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	3301      	adds	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	40da      	lsrs	r2, r3
 80010fc:	1e13      	subs	r3, r2, #0
 80010fe:	d000      	beq.n	8001102 <HAL_GPIO_Init+0x2c6>
 8001100:	e6a4      	b.n	8000e4c <HAL_GPIO_Init+0x10>
  }
}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	46c0      	nop			@ (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b006      	add	sp, #24
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021800 	.word	0x40021800
 8001110:	50000400 	.word	0x50000400
 8001114:	50000800 	.word	0x50000800
 8001118:	50000c00 	.word	0x50000c00
 800111c:	50001400 	.word	0x50001400

08001120 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e1d0      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2201      	movs	r2, #1
 8001138:	4013      	ands	r3, r2
 800113a:	d100      	bne.n	800113e <HAL_RCC_OscConfig+0x1e>
 800113c:	e069      	b.n	8001212 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800113e:	4bc8      	ldr	r3, [pc, #800]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2238      	movs	r2, #56	@ 0x38
 8001144:	4013      	ands	r3, r2
 8001146:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d105      	bne.n	800115a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d15d      	bne.n	8001212 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e1bc      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	@ 0x80
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	429a      	cmp	r2, r3
 8001164:	d107      	bne.n	8001176 <HAL_RCC_OscConfig+0x56>
 8001166:	4bbe      	ldr	r3, [pc, #760]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4bbd      	ldr	r3, [pc, #756]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 800116c:	2180      	movs	r1, #128	@ 0x80
 800116e:	0249      	lsls	r1, r1, #9
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e020      	b.n	80011b8 <HAL_RCC_OscConfig+0x98>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	23a0      	movs	r3, #160	@ 0xa0
 800117c:	02db      	lsls	r3, r3, #11
 800117e:	429a      	cmp	r2, r3
 8001180:	d10e      	bne.n	80011a0 <HAL_RCC_OscConfig+0x80>
 8001182:	4bb7      	ldr	r3, [pc, #732]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4bb6      	ldr	r3, [pc, #728]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	02c9      	lsls	r1, r1, #11
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	4bb3      	ldr	r3, [pc, #716]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4bb2      	ldr	r3, [pc, #712]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001196:	2180      	movs	r1, #128	@ 0x80
 8001198:	0249      	lsls	r1, r1, #9
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0x98>
 80011a0:	4baf      	ldr	r3, [pc, #700]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4bae      	ldr	r3, [pc, #696]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80011a6:	49af      	ldr	r1, [pc, #700]	@ (8001464 <HAL_RCC_OscConfig+0x344>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	4bac      	ldr	r3, [pc, #688]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4bab      	ldr	r3, [pc, #684]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80011b2:	49ad      	ldr	r1, [pc, #692]	@ (8001468 <HAL_RCC_OscConfig+0x348>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d014      	beq.n	80011ea <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fa9e 	bl	8000700 <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80011ca:	f7ff fa99 	bl	8000700 <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	@ 0x64
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e17b      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	029b      	lsls	r3, r3, #10
 80011e4:	4013      	ands	r3, r2
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0xaa>
 80011e8:	e013      	b.n	8001212 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	f7ff fa89 	bl	8000700 <HAL_GetTick>
 80011ee:	0003      	movs	r3, r0
 80011f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fa84 	bl	8000700 <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	@ 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e166      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001206:	4b96      	ldr	r3, [pc, #600]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	2380      	movs	r3, #128	@ 0x80
 800120c:	029b      	lsls	r3, r3, #10
 800120e:	4013      	ands	r3, r2
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	d100      	bne.n	800121e <HAL_RCC_OscConfig+0xfe>
 800121c:	e086      	b.n	800132c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121e:	4b90      	ldr	r3, [pc, #576]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2238      	movs	r2, #56	@ 0x38
 8001224:	4013      	ands	r3, r2
 8001226:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d12f      	bne.n	800128e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e14c      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b89      	ldr	r3, [pc, #548]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a8b      	ldr	r2, [pc, #556]	@ (800146c <HAL_RCC_OscConfig+0x34c>)
 8001240:	4013      	ands	r3, r2
 8001242:	0019      	movs	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	021a      	lsls	r2, r3, #8
 800124a:	4b85      	ldr	r3, [pc, #532]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d112      	bne.n	800127c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001256:	4b82      	ldr	r3, [pc, #520]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a85      	ldr	r2, [pc, #532]	@ (8001470 <HAL_RCC_OscConfig+0x350>)
 800125c:	4013      	ands	r3, r2
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	4b7e      	ldr	r3, [pc, #504]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800126a:	4b7d      	ldr	r3, [pc, #500]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	0adb      	lsrs	r3, r3, #11
 8001270:	2207      	movs	r2, #7
 8001272:	4013      	ands	r3, r2
 8001274:	4a7f      	ldr	r2, [pc, #508]	@ (8001474 <HAL_RCC_OscConfig+0x354>)
 8001276:	40da      	lsrs	r2, r3
 8001278:	4b7f      	ldr	r3, [pc, #508]	@ (8001478 <HAL_RCC_OscConfig+0x358>)
 800127a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800127c:	4b7f      	ldr	r3, [pc, #508]	@ (800147c <HAL_RCC_OscConfig+0x35c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff f9e1 	bl	8000648 <HAL_InitTick>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d050      	beq.n	800132c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e122      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d030      	beq.n	80012f8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001296:	4b72      	ldr	r3, [pc, #456]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a75      	ldr	r2, [pc, #468]	@ (8001470 <HAL_RCC_OscConfig+0x350>)
 800129c:	4013      	ands	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80012aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80012b0:	2180      	movs	r1, #128	@ 0x80
 80012b2:	0049      	lsls	r1, r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fa22 	bl	8000700 <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fa1d 	bl	8000700 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e0ff      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d4:	4b62      	ldr	r3, [pc, #392]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4013      	ands	r3, r2
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a61      	ldr	r2, [pc, #388]	@ (800146c <HAL_RCC_OscConfig+0x34c>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	021a      	lsls	r2, r3, #8
 80012f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80012f2:	430a      	orrs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	e019      	b.n	800132c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80012f8:	4b59      	ldr	r3, [pc, #356]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b58      	ldr	r3, [pc, #352]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80012fe:	4960      	ldr	r1, [pc, #384]	@ (8001480 <HAL_RCC_OscConfig+0x360>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff f9fc 	bl	8000700 <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800130e:	f7ff f9f7 	bl	8000700 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e0d9      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001320:	4b4f      	ldr	r3, [pc, #316]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4013      	ands	r3, r2
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2208      	movs	r2, #8
 8001332:	4013      	ands	r3, r2
 8001334:	d042      	beq.n	80013bc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001336:	4b4a      	ldr	r3, [pc, #296]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2238      	movs	r2, #56	@ 0x38
 800133c:	4013      	ands	r3, r2
 800133e:	2b18      	cmp	r3, #24
 8001340:	d105      	bne.n	800134e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d138      	bne.n	80013bc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0c2      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d019      	beq.n	800138a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001356:	4b42      	ldr	r3, [pc, #264]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001358:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800135a:	4b41      	ldr	r3, [pc, #260]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 800135c:	2101      	movs	r1, #1
 800135e:	430a      	orrs	r2, r1
 8001360:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001362:	f7ff f9cd 	bl	8000700 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800136c:	f7ff f9c8 	bl	8000700 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e0aa      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800137e:	4b38      	ldr	r3, [pc, #224]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001382:	2202      	movs	r2, #2
 8001384:	4013      	ands	r3, r2
 8001386:	d0f1      	beq.n	800136c <HAL_RCC_OscConfig+0x24c>
 8001388:	e018      	b.n	80013bc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800138a:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 800138c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800138e:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001390:	2101      	movs	r1, #1
 8001392:	438a      	bics	r2, r1
 8001394:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff f9b3 	bl	8000700 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80013a0:	f7ff f9ae 	bl	8000700 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e090      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80013b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d1f1      	bne.n	80013a0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2204      	movs	r2, #4
 80013c2:	4013      	ands	r3, r2
 80013c4:	d100      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2a8>
 80013c6:	e084      	b.n	80014d2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c8:	230f      	movs	r3, #15
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80013d0:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2238      	movs	r2, #56	@ 0x38
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b20      	cmp	r3, #32
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d000      	beq.n	80013e6 <HAL_RCC_OscConfig+0x2c6>
 80013e4:	e075      	b.n	80014d2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e074      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x2e0>
 80013f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80013f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	430a      	orrs	r2, r1
 80013fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013fe:	e01c      	b.n	800143a <HAL_RCC_OscConfig+0x31a>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x302>
 8001408:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 800140a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 800140e:	2104      	movs	r1, #4
 8001410:	430a      	orrs	r2, r1
 8001412:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001416:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 800141a:	2101      	movs	r1, #1
 800141c:	430a      	orrs	r2, r1
 800141e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x31a>
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001424:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001428:	2101      	movs	r1, #1
 800142a:	438a      	bics	r2, r1
 800142c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001430:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <HAL_RCC_OscConfig+0x340>)
 8001434:	2104      	movs	r1, #4
 8001436:	438a      	bics	r2, r1
 8001438:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d028      	beq.n	8001494 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff f95d 	bl	8000700 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800144a:	e01d      	b.n	8001488 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff f958 	bl	8000700 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <HAL_RCC_OscConfig+0x364>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d915      	bls.n	8001488 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e039      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
 8001460:	40021000 	.word	0x40021000
 8001464:	fffeffff 	.word	0xfffeffff
 8001468:	fffbffff 	.word	0xfffbffff
 800146c:	ffff80ff 	.word	0xffff80ff
 8001470:	ffffc7ff 	.word	0xffffc7ff
 8001474:	02dc6c00 	.word	0x02dc6c00
 8001478:	20000000 	.word	0x20000000
 800147c:	20000004 	.word	0x20000004
 8001480:	fffffeff 	.word	0xfffffeff
 8001484:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <HAL_RCC_OscConfig+0x3bc>)
 800148a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d0dc      	beq.n	800144c <HAL_RCC_OscConfig+0x32c>
 8001492:	e013      	b.n	80014bc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff f934 	bl	8000700 <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800149c:	e009      	b.n	80014b2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149e:	f7ff f92f 	bl	8000700 <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <HAL_RCC_OscConfig+0x3c0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e010      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_RCC_OscConfig+0x3bc>)
 80014b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014bc:	230f      	movs	r3, #15
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d105      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_RCC_OscConfig+0x3bc>)
 80014c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014ca:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <HAL_RCC_OscConfig+0x3bc>)
 80014cc:	4905      	ldr	r1, [pc, #20]	@ (80014e4 <HAL_RCC_OscConfig+0x3c4>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b006      	add	sp, #24
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	00001388 	.word	0x00001388
 80014e4:	efffffff 	.word	0xefffffff

080014e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0df      	b.n	80016bc <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b71      	ldr	r3, [pc, #452]	@ (80016c4 <HAL_RCC_ClockConfig+0x1dc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2207      	movs	r2, #7
 8001502:	4013      	ands	r3, r2
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d91e      	bls.n	8001548 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b6e      	ldr	r3, [pc, #440]	@ (80016c4 <HAL_RCC_ClockConfig+0x1dc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2207      	movs	r2, #7
 8001510:	4393      	bics	r3, r2
 8001512:	0019      	movs	r1, r3
 8001514:	4b6b      	ldr	r3, [pc, #428]	@ (80016c4 <HAL_RCC_ClockConfig+0x1dc>)
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800151c:	f7ff f8f0 	bl	8000700 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001524:	e009      	b.n	800153a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001526:	f7ff f8eb 	bl	8000700 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4a65      	ldr	r2, [pc, #404]	@ (80016c8 <HAL_RCC_ClockConfig+0x1e0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0c0      	b.n	80016bc <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800153a:	4b62      	ldr	r3, [pc, #392]	@ (80016c4 <HAL_RCC_ClockConfig+0x1dc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2207      	movs	r2, #7
 8001540:	4013      	ands	r3, r2
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d1ee      	bne.n	8001526 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2202      	movs	r2, #2
 800154e:	4013      	ands	r3, r2
 8001550:	d017      	beq.n	8001582 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2204      	movs	r2, #4
 8001558:	4013      	ands	r3, r2
 800155a:	d008      	beq.n	800156e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800155c:	4b5b      	ldr	r3, [pc, #364]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a5b      	ldr	r2, [pc, #364]	@ (80016d0 <HAL_RCC_ClockConfig+0x1e8>)
 8001562:	401a      	ands	r2, r3
 8001564:	4b59      	ldr	r3, [pc, #356]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 8001566:	21b0      	movs	r1, #176	@ 0xb0
 8001568:	0109      	lsls	r1, r1, #4
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156e:	4b57      	ldr	r3, [pc, #348]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4a58      	ldr	r2, [pc, #352]	@ (80016d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001574:	4013      	ands	r3, r2
 8001576:	0019      	movs	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	4b53      	ldr	r3, [pc, #332]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d04b      	beq.n	8001624 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001594:	4b4d      	ldr	r3, [pc, #308]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	4013      	ands	r3, r2
 800159e:	d11f      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e08b      	b.n	80016bc <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ac:	4b47      	ldr	r3, [pc, #284]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	d113      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e07f      	b.n	80016bc <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80015c4:	4b41      	ldr	r3, [pc, #260]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 80015c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d108      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e074      	b.n	80016bc <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015d2:	4b3e      	ldr	r3, [pc, #248]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 80015d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e06d      	b.n	80016bc <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015e0:	4b3a      	ldr	r3, [pc, #232]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2207      	movs	r2, #7
 80015e6:	4393      	bics	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4b37      	ldr	r3, [pc, #220]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f4:	f7ff f884 	bl	8000700 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fc:	e009      	b.n	8001612 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	f7ff f87f 	bl	8000700 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4a2f      	ldr	r2, [pc, #188]	@ (80016c8 <HAL_RCC_ClockConfig+0x1e0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e054      	b.n	80016bc <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4b2e      	ldr	r3, [pc, #184]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2238      	movs	r2, #56	@ 0x38
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	429a      	cmp	r2, r3
 8001622:	d1ec      	bne.n	80015fe <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001624:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <HAL_RCC_ClockConfig+0x1dc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2207      	movs	r2, #7
 800162a:	4013      	ands	r3, r2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d21e      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <HAL_RCC_ClockConfig+0x1dc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2207      	movs	r2, #7
 8001638:	4393      	bics	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <HAL_RCC_ClockConfig+0x1dc>)
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001644:	f7ff f85c 	bl	8000700 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800164c:	e009      	b.n	8001662 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800164e:	f7ff f857 	bl	8000700 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <HAL_RCC_ClockConfig+0x1e0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e02c      	b.n	80016bc <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001662:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_RCC_ClockConfig+0x1dc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2207      	movs	r2, #7
 8001668:	4013      	ands	r3, r2
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2204      	movs	r2, #4
 8001676:	4013      	ands	r3, r2
 8001678:	d009      	beq.n	800168e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4a16      	ldr	r2, [pc, #88]	@ (80016d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001680:	4013      	ands	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 800168a:	430a      	orrs	r2, r1
 800168c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800168e:	f000 f82b 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 8001692:	0001      	movs	r1, r0
 8001694:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_RCC_ClockConfig+0x1e4>)
 8001696:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	220f      	movs	r2, #15
 800169c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_RCC_ClockConfig+0x1f4>)
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016a4:	221f      	movs	r2, #31
 80016a6:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016a8:	000a      	movs	r2, r1
 80016aa:	40da      	lsrs	r2, r3
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f8>)
 80016ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <HAL_RCC_ClockConfig+0x1fc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7fe ffc7 	bl	8000648 <HAL_InitTick>
 80016ba:	0003      	movs	r3, r0
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	b004      	add	sp, #16
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000
 80016c8:	00001388 	.word	0x00001388
 80016cc:	40021000 	.word	0x40021000
 80016d0:	ffff84ff 	.word	0xffff84ff
 80016d4:	fffff0ff 	.word	0xfffff0ff
 80016d8:	ffff8fff 	.word	0xffff8fff
 80016dc:	080023f8 	.word	0x080023f8
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x78>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2238      	movs	r2, #56	@ 0x38
 80016f4:	4013      	ands	r3, r2
 80016f6:	d10f      	bne.n	8001718 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x78>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0adb      	lsrs	r3, r3, #11
 80016fe:	2207      	movs	r2, #7
 8001700:	4013      	ands	r3, r2
 8001702:	2201      	movs	r2, #1
 8001704:	409a      	lsls	r2, r3
 8001706:	0013      	movs	r3, r2
 8001708:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	4815      	ldr	r0, [pc, #84]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x7c>)
 800170e:	f7fe fcfb 	bl	8000108 <__udivsi3>
 8001712:	0003      	movs	r3, r0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	e01e      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x78>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2238      	movs	r2, #56	@ 0x38
 800171e:	4013      	ands	r3, r2
 8001720:	2b08      	cmp	r3, #8
 8001722:	d102      	bne.n	800172a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001724:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	e015      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x78>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2238      	movs	r2, #56	@ 0x38
 8001730:	4013      	ands	r3, r2
 8001732:	2b20      	cmp	r3, #32
 8001734:	d103      	bne.n	800173e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	e00b      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x78>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2238      	movs	r2, #56	@ 0x38
 8001744:	4013      	ands	r3, r2
 8001746:	2b18      	cmp	r3, #24
 8001748:	d103      	bne.n	8001752 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800174a:	23fa      	movs	r3, #250	@ 0xfa
 800174c:	01db      	lsls	r3, r3, #7
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	e001      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	b002      	add	sp, #8
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	02dc6c00 	.word	0x02dc6c00

08001768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800176c:	f7ff ffbc 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 8001770:	0001      	movs	r1, r0
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_RCC_GetHCLKFreq+0x30>)
 8001774:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	220f      	movs	r2, #15
 800177a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <HAL_RCC_GetHCLKFreq+0x34>)
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001782:	221f      	movs	r2, #31
 8001784:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001786:	000a      	movs	r2, r1
 8001788:	40da      	lsrs	r2, r3
 800178a:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <HAL_RCC_GetHCLKFreq+0x38>)
 800178c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800178e:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <HAL_RCC_GetHCLKFreq+0x38>)
 8001790:	681b      	ldr	r3, [r3, #0]
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	080023f8 	.word	0x080023f8
 80017a0:	20000000 	.word	0x20000000

080017a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80017a8:	f7ff ffde 	bl	8001768 <HAL_RCC_GetHCLKFreq>
 80017ac:	0001      	movs	r1, r0
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	0b1b      	lsrs	r3, r3, #12
 80017b4:	2207      	movs	r2, #7
 80017b6:	401a      	ands	r2, r3
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	58d3      	ldr	r3, [r2, r3]
 80017be:	221f      	movs	r2, #31
 80017c0:	4013      	ands	r3, r2
 80017c2:	40d9      	lsrs	r1, r3
 80017c4:	000b      	movs	r3, r1
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	08002438 	.word	0x08002438

080017d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80017dc:	2313      	movs	r3, #19
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80017e4:	2312      	movs	r3, #18
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2240      	movs	r2, #64	@ 0x40
 80017f2:	4013      	ands	r3, r2
 80017f4:	d100      	bne.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80017f6:	e079      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f8:	2011      	movs	r0, #17
 80017fa:	183b      	adds	r3, r7, r0
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001800:	4b63      	ldr	r3, [pc, #396]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	055b      	lsls	r3, r3, #21
 8001808:	4013      	ands	r3, r2
 800180a:	d110      	bne.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	4b60      	ldr	r3, [pc, #384]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800180e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001810:	4b5f      	ldr	r3, [pc, #380]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001812:	2180      	movs	r1, #128	@ 0x80
 8001814:	0549      	lsls	r1, r1, #21
 8001816:	430a      	orrs	r2, r1
 8001818:	63da      	str	r2, [r3, #60]	@ 0x3c
 800181a:	4b5d      	ldr	r3, [pc, #372]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800181c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	055b      	lsls	r3, r3, #21
 8001822:	4013      	ands	r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001828:	183b      	adds	r3, r7, r0
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800182e:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001830:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001832:	23c0      	movs	r3, #192	@ 0xc0
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4013      	ands	r3, r2
 8001838:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d019      	beq.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	429a      	cmp	r2, r3
 8001848:	d014      	beq.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800184a:	4b51      	ldr	r3, [pc, #324]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800184c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184e:	4a51      	ldr	r2, [pc, #324]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001850:	4013      	ands	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001854:	4b4e      	ldr	r3, [pc, #312]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001856:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001858:	4b4d      	ldr	r3, [pc, #308]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800185a:	2180      	movs	r1, #128	@ 0x80
 800185c:	0249      	lsls	r1, r1, #9
 800185e:	430a      	orrs	r2, r1
 8001860:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001862:	4b4b      	ldr	r3, [pc, #300]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001864:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001866:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001868:	494b      	ldr	r1, [pc, #300]	@ (8001998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800186a:	400a      	ands	r2, r1
 800186c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800186e:	4b48      	ldr	r3, [pc, #288]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	d016      	beq.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7fe ff40 	bl	8000700 <HAL_GetTick>
 8001880:	0003      	movs	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001884:	e00c      	b.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7fe ff3b 	bl	8000700 <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4a42      	ldr	r2, [pc, #264]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d904      	bls.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001896:	2313      	movs	r3, #19
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2203      	movs	r2, #3
 800189c:	701a      	strb	r2, [r3, #0]
          break;
 800189e:	e004      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d0ed      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80018aa:	2313      	movs	r3, #19
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10a      	bne.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018b4:	4b36      	ldr	r3, [pc, #216]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b8:	4a36      	ldr	r2, [pc, #216]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699a      	ldr	r2, [r3, #24]
 80018c2:	4b33      	ldr	r3, [pc, #204]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018c8:	e005      	b.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018ca:	2312      	movs	r3, #18
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	2213      	movs	r2, #19
 80018d0:	18ba      	adds	r2, r7, r2
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018d6:	2311      	movs	r3, #17
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018e6:	492e      	ldr	r1, [pc, #184]	@ (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	d009      	beq.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018f6:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fa:	2203      	movs	r2, #3
 80018fc:	4393      	bics	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001906:	430a      	orrs	r2, r1
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2202      	movs	r2, #2
 8001910:	4013      	ands	r3, r2
 8001912:	d009      	beq.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001914:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001918:	4a22      	ldr	r2, [pc, #136]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800191a:	4013      	ands	r3, r2
 800191c:	0019      	movs	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001924:	430a      	orrs	r2, r1
 8001926:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2220      	movs	r2, #32
 800192e:	4013      	ands	r3, r2
 8001930:	d008      	beq.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001932:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	0899      	lsrs	r1, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001940:	430a      	orrs	r2, r1
 8001942:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2204      	movs	r2, #4
 800194a:	4013      	ands	r3, r2
 800194c:	d009      	beq.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001952:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001954:	4013      	ands	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800195e:	430a      	orrs	r2, r1
 8001960:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2280      	movs	r2, #128	@ 0x80
 8001968:	4013      	ands	r3, r2
 800196a:	d009      	beq.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	22e0      	movs	r2, #224	@ 0xe0
 8001972:	4393      	bics	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001980:	2312      	movs	r3, #18
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	781b      	ldrb	r3, [r3, #0]
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b006      	add	sp, #24
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	40021000 	.word	0x40021000
 8001994:	fffffcff 	.word	0xfffffcff
 8001998:	fffeffff 	.word	0xfffeffff
 800199c:	00001388 	.word	0x00001388
 80019a0:	efffffff 	.word	0xefffffff
 80019a4:	ffffcfff 	.word	0xffffcfff
 80019a8:	ffff3fff 	.word	0xffff3fff

080019ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e046      	b.n	8001a4c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2288      	movs	r2, #136	@ 0x88
 80019c2:	589b      	ldr	r3, [r3, r2]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2284      	movs	r2, #132	@ 0x84
 80019cc:	2100      	movs	r1, #0
 80019ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7fe fd20 	bl	8000418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2288      	movs	r2, #136	@ 0x88
 80019dc:	2124      	movs	r1, #36	@ 0x24
 80019de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2101      	movs	r1, #1
 80019ec:	438a      	bics	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 fa4e 	bl	8001e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 f8cc 	bl	8001ba0 <UART_SetConfig>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e01c      	b.n	8001a4c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	490d      	ldr	r1, [pc, #52]	@ (8001a54 <HAL_UART_Init+0xa8>)
 8001a1e:	400a      	ands	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	212a      	movs	r1, #42	@ 0x2a
 8001a2e:	438a      	bics	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 fadd 	bl	8002004 <UART_CheckIdleState>
 8001a4a:	0003      	movs	r3, r0
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b002      	add	sp, #8
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	ffffb7ff 	.word	0xffffb7ff

08001a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	1dbb      	adds	r3, r7, #6
 8001a66:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2288      	movs	r2, #136	@ 0x88
 8001a6c:	589b      	ldr	r3, [r3, r2]
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	d000      	beq.n	8001a74 <HAL_UART_Transmit+0x1c>
 8001a72:	e090      	b.n	8001b96 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_UART_Transmit+0x2a>
 8001a7a:	1dbb      	adds	r3, r7, #6
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e088      	b.n	8001b98 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	2380      	movs	r3, #128	@ 0x80
 8001a8c:	015b      	lsls	r3, r3, #5
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d109      	bne.n	8001aa6 <HAL_UART_Transmit+0x4e>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d001      	beq.n	8001aa6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e078      	b.n	8001b98 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2290      	movs	r2, #144	@ 0x90
 8001aaa:	2100      	movs	r1, #0
 8001aac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2288      	movs	r2, #136	@ 0x88
 8001ab2:	2121      	movs	r1, #33	@ 0x21
 8001ab4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ab6:	f7fe fe23 	bl	8000700 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1dba      	adds	r2, r7, #6
 8001ac2:	2154      	movs	r1, #84	@ 0x54
 8001ac4:	8812      	ldrh	r2, [r2, #0]
 8001ac6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1dba      	adds	r2, r7, #6
 8001acc:	2156      	movs	r1, #86	@ 0x56
 8001ace:	8812      	ldrh	r2, [r2, #0]
 8001ad0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	2380      	movs	r3, #128	@ 0x80
 8001ad8:	015b      	lsls	r3, r3, #5
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d108      	bne.n	8001af0 <HAL_UART_Transmit+0x98>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	e003      	b.n	8001af8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001af8:	e030      	b.n	8001b5c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	0013      	movs	r3, r2
 8001b04:	2200      	movs	r2, #0
 8001b06:	2180      	movs	r1, #128	@ 0x80
 8001b08:	f000 fb26 	bl	8002158 <UART_WaitOnFlagUntilTimeout>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2288      	movs	r2, #136	@ 0x88
 8001b14:	2120      	movs	r1, #32
 8001b16:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e03d      	b.n	8001b98 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10b      	bne.n	8001b3a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	001a      	movs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	05d2      	lsls	r2, r2, #23
 8001b2e:	0dd2      	lsrs	r2, r2, #23
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3302      	adds	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	e007      	b.n	8001b4a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	3301      	adds	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2256      	movs	r2, #86	@ 0x56
 8001b4e:	5a9b      	ldrh	r3, [r3, r2]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b299      	uxth	r1, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2256      	movs	r2, #86	@ 0x56
 8001b5a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2256      	movs	r2, #86	@ 0x56
 8001b60:	5a9b      	ldrh	r3, [r3, r2]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1c8      	bne.n	8001afa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	0013      	movs	r3, r2
 8001b72:	2200      	movs	r2, #0
 8001b74:	2140      	movs	r1, #64	@ 0x40
 8001b76:	f000 faef 	bl	8002158 <UART_WaitOnFlagUntilTimeout>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2288      	movs	r2, #136	@ 0x88
 8001b82:	2120      	movs	r1, #32
 8001b84:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e006      	b.n	8001b98 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2288      	movs	r2, #136	@ 0x88
 8001b8e:	2120      	movs	r1, #32
 8001b90:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
  }
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b008      	add	sp, #32
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ba8:	231e      	movs	r3, #30
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4aab      	ldr	r2, [pc, #684]	@ (8001e7c <UART_SetConfig+0x2dc>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4aa6      	ldr	r2, [pc, #664]	@ (8001e80 <UART_SetConfig+0x2e0>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a9d      	ldr	r2, [pc, #628]	@ (8001e84 <UART_SetConfig+0x2e4>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	220f      	movs	r2, #15
 8001c24:	4393      	bics	r3, r2
 8001c26:	0019      	movs	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a93      	ldr	r2, [pc, #588]	@ (8001e88 <UART_SetConfig+0x2e8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d127      	bne.n	8001c8e <UART_SetConfig+0xee>
 8001c3e:	4b93      	ldr	r3, [pc, #588]	@ (8001e8c <UART_SetConfig+0x2ec>)
 8001c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c42:	2203      	movs	r2, #3
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d017      	beq.n	8001c7a <UART_SetConfig+0xda>
 8001c4a:	d81b      	bhi.n	8001c84 <UART_SetConfig+0xe4>
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d00a      	beq.n	8001c66 <UART_SetConfig+0xc6>
 8001c50:	d818      	bhi.n	8001c84 <UART_SetConfig+0xe4>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <UART_SetConfig+0xbc>
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d00a      	beq.n	8001c70 <UART_SetConfig+0xd0>
 8001c5a:	e013      	b.n	8001c84 <UART_SetConfig+0xe4>
 8001c5c:	231f      	movs	r3, #31
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e021      	b.n	8001caa <UART_SetConfig+0x10a>
 8001c66:	231f      	movs	r3, #31
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	e01c      	b.n	8001caa <UART_SetConfig+0x10a>
 8001c70:	231f      	movs	r3, #31
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2204      	movs	r2, #4
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e017      	b.n	8001caa <UART_SetConfig+0x10a>
 8001c7a:	231f      	movs	r3, #31
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	2208      	movs	r2, #8
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e012      	b.n	8001caa <UART_SetConfig+0x10a>
 8001c84:	231f      	movs	r3, #31
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2210      	movs	r2, #16
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	e00d      	b.n	8001caa <UART_SetConfig+0x10a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7f      	ldr	r2, [pc, #508]	@ (8001e90 <UART_SetConfig+0x2f0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d104      	bne.n	8001ca2 <UART_SetConfig+0x102>
 8001c98:	231f      	movs	r3, #31
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e003      	b.n	8001caa <UART_SetConfig+0x10a>
 8001ca2:	231f      	movs	r3, #31
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	2380      	movs	r3, #128	@ 0x80
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d000      	beq.n	8001cb8 <UART_SetConfig+0x118>
 8001cb6:	e06f      	b.n	8001d98 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8001cb8:	231f      	movs	r3, #31
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d01f      	beq.n	8001d02 <UART_SetConfig+0x162>
 8001cc2:	dc22      	bgt.n	8001d0a <UART_SetConfig+0x16a>
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d017      	beq.n	8001cf8 <UART_SetConfig+0x158>
 8001cc8:	dc1f      	bgt.n	8001d0a <UART_SetConfig+0x16a>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <UART_SetConfig+0x134>
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d005      	beq.n	8001cde <UART_SetConfig+0x13e>
 8001cd2:	e01a      	b.n	8001d0a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001cd4:	f7ff fd66 	bl	80017a4 <HAL_RCC_GetPCLK1Freq>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	61bb      	str	r3, [r7, #24]
        break;
 8001cdc:	e01c      	b.n	8001d18 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001cde:	4b6b      	ldr	r3, [pc, #428]	@ (8001e8c <UART_SetConfig+0x2ec>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	3301      	adds	r3, #1
 8001cea:	0019      	movs	r1, r3
 8001cec:	4869      	ldr	r0, [pc, #420]	@ (8001e94 <UART_SetConfig+0x2f4>)
 8001cee:	f7fe fa0b 	bl	8000108 <__udivsi3>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	61bb      	str	r3, [r7, #24]
        break;
 8001cf6:	e00f      	b.n	8001d18 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001cf8:	f7ff fcf6 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	61bb      	str	r3, [r7, #24]
        break;
 8001d00:	e00a      	b.n	8001d18 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	61bb      	str	r3, [r7, #24]
        break;
 8001d08:	e006      	b.n	8001d18 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001d0e:	231e      	movs	r3, #30
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
        break;
 8001d16:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d100      	bne.n	8001d20 <UART_SetConfig+0x180>
 8001d1e:	e097      	b.n	8001e50 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d24:	4b5c      	ldr	r3, [pc, #368]	@ (8001e98 <UART_SetConfig+0x2f8>)
 8001d26:	0052      	lsls	r2, r2, #1
 8001d28:	5ad3      	ldrh	r3, [r2, r3]
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	69b8      	ldr	r0, [r7, #24]
 8001d2e:	f7fe f9eb 	bl	8000108 <__udivsi3>
 8001d32:	0003      	movs	r3, r0
 8001d34:	005a      	lsls	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	085b      	lsrs	r3, r3, #1
 8001d3c:	18d2      	adds	r2, r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	0019      	movs	r1, r3
 8001d44:	0010      	movs	r0, r2
 8001d46:	f7fe f9df 	bl	8000108 <__udivsi3>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d91c      	bls.n	8001d8e <UART_SetConfig+0x1ee>
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	025b      	lsls	r3, r3, #9
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d217      	bcs.n	8001d8e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	200e      	movs	r0, #14
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	210f      	movs	r1, #15
 8001d68:	438a      	bics	r2, r1
 8001d6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	2207      	movs	r2, #7
 8001d74:	4013      	ands	r3, r2
 8001d76:	b299      	uxth	r1, r3
 8001d78:	183b      	adds	r3, r7, r0
 8001d7a:	183a      	adds	r2, r7, r0
 8001d7c:	8812      	ldrh	r2, [r2, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	183a      	adds	r2, r7, r0
 8001d88:	8812      	ldrh	r2, [r2, #0]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	e060      	b.n	8001e50 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001d8e:	231e      	movs	r3, #30
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e05b      	b.n	8001e50 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001d98:	231f      	movs	r3, #31
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d01f      	beq.n	8001de2 <UART_SetConfig+0x242>
 8001da2:	dc22      	bgt.n	8001dea <UART_SetConfig+0x24a>
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d017      	beq.n	8001dd8 <UART_SetConfig+0x238>
 8001da8:	dc1f      	bgt.n	8001dea <UART_SetConfig+0x24a>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <UART_SetConfig+0x214>
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d005      	beq.n	8001dbe <UART_SetConfig+0x21e>
 8001db2:	e01a      	b.n	8001dea <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001db4:	f7ff fcf6 	bl	80017a4 <HAL_RCC_GetPCLK1Freq>
 8001db8:	0003      	movs	r3, r0
 8001dba:	61bb      	str	r3, [r7, #24]
        break;
 8001dbc:	e01c      	b.n	8001df8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001dbe:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <UART_SetConfig+0x2ec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	3301      	adds	r3, #1
 8001dca:	0019      	movs	r1, r3
 8001dcc:	4831      	ldr	r0, [pc, #196]	@ (8001e94 <UART_SetConfig+0x2f4>)
 8001dce:	f7fe f99b 	bl	8000108 <__udivsi3>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	61bb      	str	r3, [r7, #24]
        break;
 8001dd6:	e00f      	b.n	8001df8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001dd8:	f7ff fc86 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]
        break;
 8001de0:	e00a      	b.n	8001df8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	61bb      	str	r3, [r7, #24]
        break;
 8001de8:	e006      	b.n	8001df8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001dee:	231e      	movs	r3, #30
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
        break;
 8001df6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d028      	beq.n	8001e50 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e02:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <UART_SetConfig+0x2f8>)
 8001e04:	0052      	lsls	r2, r2, #1
 8001e06:	5ad3      	ldrh	r3, [r2, r3]
 8001e08:	0019      	movs	r1, r3
 8001e0a:	69b8      	ldr	r0, [r7, #24]
 8001e0c:	f7fe f97c 	bl	8000108 <__udivsi3>
 8001e10:	0003      	movs	r3, r0
 8001e12:	001a      	movs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	18d2      	adds	r2, r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0019      	movs	r1, r3
 8001e22:	0010      	movs	r0, r2
 8001e24:	f7fe f970 	bl	8000108 <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	d90a      	bls.n	8001e48 <UART_SetConfig+0x2a8>
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	025b      	lsls	r3, r3, #9
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d205      	bcs.n	8001e48 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	e003      	b.n	8001e50 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001e48:	231e      	movs	r3, #30
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	226a      	movs	r2, #106	@ 0x6a
 8001e54:	2101      	movs	r1, #1
 8001e56:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2268      	movs	r2, #104	@ 0x68
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8001e6c:	231e      	movs	r3, #30
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	781b      	ldrb	r3, [r3, #0]
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b008      	add	sp, #32
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	cfff69f3 	.word	0xcfff69f3
 8001e80:	ffffcfff 	.word	0xffffcfff
 8001e84:	11fff4ff 	.word	0x11fff4ff
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40004400 	.word	0x40004400
 8001e94:	02dc6c00 	.word	0x02dc6c00
 8001e98:	08002458 	.word	0x08002458

08001e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00b      	beq.n	8001ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe0 <UART_AdvFeatureConfig+0x144>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d00b      	beq.n	8001ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a43      	ldr	r2, [pc, #268]	@ (8001fe4 <UART_AdvFeatureConfig+0x148>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	2202      	movs	r2, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d00b      	beq.n	8001f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a3b      	ldr	r2, [pc, #236]	@ (8001fe8 <UART_AdvFeatureConfig+0x14c>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	2204      	movs	r2, #4
 8001f10:	4013      	ands	r3, r2
 8001f12:	d00b      	beq.n	8001f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a34      	ldr	r2, [pc, #208]	@ (8001fec <UART_AdvFeatureConfig+0x150>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f30:	2210      	movs	r2, #16
 8001f32:	4013      	ands	r3, r2
 8001f34:	d00b      	beq.n	8001f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff0 <UART_AdvFeatureConfig+0x154>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f52:	2220      	movs	r2, #32
 8001f54:	4013      	ands	r3, r2
 8001f56:	d00b      	beq.n	8001f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4a25      	ldr	r2, [pc, #148]	@ (8001ff4 <UART_AdvFeatureConfig+0x158>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	2240      	movs	r2, #64	@ 0x40
 8001f76:	4013      	ands	r3, r2
 8001f78:	d01d      	beq.n	8001fb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff8 <UART_AdvFeatureConfig+0x15c>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	035b      	lsls	r3, r3, #13
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d10b      	bne.n	8001fb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a15      	ldr	r2, [pc, #84]	@ (8001ffc <UART_AdvFeatureConfig+0x160>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d00b      	beq.n	8001fd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8002000 <UART_AdvFeatureConfig+0x164>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]
  }
}
 8001fd8:	46c0      	nop			@ (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	ffff7fff 	.word	0xffff7fff
 8001fe4:	fffdffff 	.word	0xfffdffff
 8001fe8:	fffeffff 	.word	0xfffeffff
 8001fec:	fffbffff 	.word	0xfffbffff
 8001ff0:	ffffefff 	.word	0xffffefff
 8001ff4:	ffffdfff 	.word	0xffffdfff
 8001ff8:	ffefffff 	.word	0xffefffff
 8001ffc:	ff9fffff 	.word	0xff9fffff
 8002000:	fff7ffff 	.word	0xfff7ffff

08002004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b092      	sub	sp, #72	@ 0x48
 8002008:	af02      	add	r7, sp, #8
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2290      	movs	r2, #144	@ 0x90
 8002010:	2100      	movs	r1, #0
 8002012:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002014:	f7fe fb74 	bl	8000700 <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2208      	movs	r2, #8
 8002024:	4013      	ands	r3, r2
 8002026:	2b08      	cmp	r3, #8
 8002028:	d12d      	bne.n	8002086 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800202a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800202c:	2280      	movs	r2, #128	@ 0x80
 800202e:	0391      	lsls	r1, r2, #14
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4a47      	ldr	r2, [pc, #284]	@ (8002150 <UART_CheckIdleState+0x14c>)
 8002034:	9200      	str	r2, [sp, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	f000 f88e 	bl	8002158 <UART_WaitOnFlagUntilTimeout>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d022      	beq.n	8002086 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002040:	f3ef 8310 	mrs	r3, PRIMASK
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002048:	63bb      	str	r3, [r7, #56]	@ 0x38
 800204a:	2301      	movs	r3, #1
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800204e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002050:	f383 8810 	msr	PRIMASK, r3
}
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2180      	movs	r1, #128	@ 0x80
 8002062:	438a      	bics	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800206a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206c:	f383 8810 	msr	PRIMASK, r3
}
 8002070:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2288      	movs	r2, #136	@ 0x88
 8002076:	2120      	movs	r1, #32
 8002078:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2284      	movs	r2, #132	@ 0x84
 800207e:	2100      	movs	r1, #0
 8002080:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e060      	b.n	8002148 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2204      	movs	r2, #4
 800208e:	4013      	ands	r3, r2
 8002090:	2b04      	cmp	r3, #4
 8002092:	d146      	bne.n	8002122 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002096:	2280      	movs	r2, #128	@ 0x80
 8002098:	03d1      	lsls	r1, r2, #15
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4a2c      	ldr	r2, [pc, #176]	@ (8002150 <UART_CheckIdleState+0x14c>)
 800209e:	9200      	str	r2, [sp, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f000 f859 	bl	8002158 <UART_WaitOnFlagUntilTimeout>
 80020a6:	1e03      	subs	r3, r0, #0
 80020a8:	d03b      	beq.n	8002122 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80020aa:	f3ef 8310 	mrs	r3, PRIMASK
 80020ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80020b0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b4:	2301      	movs	r3, #1
 80020b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f383 8810 	msr	PRIMASK, r3
}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4922      	ldr	r1, [pc, #136]	@ (8002154 <UART_CheckIdleState+0x150>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f383 8810 	msr	PRIMASK, r3
}
 80020da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80020dc:	f3ef 8310 	mrs	r3, PRIMASK
 80020e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80020e2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80020e6:	2301      	movs	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f383 8810 	msr	PRIMASK, r3
}
 80020f0:	46c0      	nop			@ (mov r8, r8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	438a      	bics	r2, r1
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002104:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f383 8810 	msr	PRIMASK, r3
}
 800210c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	228c      	movs	r2, #140	@ 0x8c
 8002112:	2120      	movs	r1, #32
 8002114:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2284      	movs	r2, #132	@ 0x84
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e012      	b.n	8002148 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2288      	movs	r2, #136	@ 0x88
 8002126:	2120      	movs	r1, #32
 8002128:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	228c      	movs	r2, #140	@ 0x8c
 800212e:	2120      	movs	r1, #32
 8002130:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2284      	movs	r2, #132	@ 0x84
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b010      	add	sp, #64	@ 0x40
 800214e:	bd80      	pop	{r7, pc}
 8002150:	01ffffff 	.word	0x01ffffff
 8002154:	fffffedf 	.word	0xfffffedf

08002158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002168:	e051      	b.n	800220e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3301      	adds	r3, #1
 800216e:	d04e      	beq.n	800220e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002170:	f7fe fac6 	bl	8000700 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	429a      	cmp	r2, r3
 800217e:	d302      	bcc.n	8002186 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e051      	b.n	800222e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2204      	movs	r2, #4
 8002192:	4013      	ands	r3, r2
 8002194:	d03b      	beq.n	800220e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b80      	cmp	r3, #128	@ 0x80
 800219a:	d038      	beq.n	800220e <UART_WaitOnFlagUntilTimeout+0xb6>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b40      	cmp	r3, #64	@ 0x40
 80021a0:	d035      	beq.n	800220e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2208      	movs	r2, #8
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d111      	bne.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2208      	movs	r2, #8
 80021b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 f83c 	bl	8002238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2290      	movs	r2, #144	@ 0x90
 80021c4:	2108      	movs	r1, #8
 80021c6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2284      	movs	r2, #132	@ 0x84
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e02c      	b.n	800222e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	401a      	ands	r2, r3
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d112      	bne.n	800220e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2280      	movs	r2, #128	@ 0x80
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f81f 	bl	8002238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2290      	movs	r2, #144	@ 0x90
 80021fe:	2120      	movs	r1, #32
 8002200:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2284      	movs	r2, #132	@ 0x84
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e00f      	b.n	800222e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	4013      	ands	r3, r2
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	425a      	negs	r2, r3
 800221e:	4153      	adcs	r3, r2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	001a      	movs	r2, r3
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d09e      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08e      	sub	sp, #56	@ 0x38
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002240:	f3ef 8310 	mrs	r3, PRIMASK
 8002244:	617b      	str	r3, [r7, #20]
  return(result);
 8002246:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
 800224a:	2301      	movs	r3, #1
 800224c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f383 8810 	msr	PRIMASK, r3
}
 8002254:	46c0      	nop			@ (mov r8, r8)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4926      	ldr	r1, [pc, #152]	@ (80022fc <UART_EndRxTransfer+0xc4>)
 8002262:	400a      	ands	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f383 8810 	msr	PRIMASK, r3
}
 8002270:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002272:	f3ef 8310 	mrs	r3, PRIMASK
 8002276:	623b      	str	r3, [r7, #32]
  return(result);
 8002278:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800227a:	633b      	str	r3, [r7, #48]	@ 0x30
 800227c:	2301      	movs	r3, #1
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	f383 8810 	msr	PRIMASK, r3
}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	491b      	ldr	r1, [pc, #108]	@ (8002300 <UART_EndRxTransfer+0xc8>)
 8002294:	400a      	ands	r2, r1
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229e:	f383 8810 	msr	PRIMASK, r3
}
 80022a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d118      	bne.n	80022de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022ac:	f3ef 8310 	mrs	r3, PRIMASK
 80022b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80022b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022b6:	2301      	movs	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f383 8810 	msr	PRIMASK, r3
}
 80022c0:	46c0      	nop			@ (mov r8, r8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2110      	movs	r1, #16
 80022ce:	438a      	bics	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f383 8810 	msr	PRIMASK, r3
}
 80022dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	228c      	movs	r2, #140	@ 0x8c
 80022e2:	2120      	movs	r1, #32
 80022e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b00e      	add	sp, #56	@ 0x38
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	fffffedf 	.word	0xfffffedf
 8002300:	effffffe 	.word	0xeffffffe

08002304 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2284      	movs	r2, #132	@ 0x84
 8002310:	5c9b      	ldrb	r3, [r3, r2]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_UARTEx_DisableFifoMode+0x16>
 8002316:	2302      	movs	r3, #2
 8002318:	e027      	b.n	800236a <HAL_UARTEx_DisableFifoMode+0x66>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2284      	movs	r2, #132	@ 0x84
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2288      	movs	r2, #136	@ 0x88
 8002326:	2124      	movs	r1, #36	@ 0x24
 8002328:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	438a      	bics	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002346:	4013      	ands	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2288      	movs	r2, #136	@ 0x88
 800235c:	2120      	movs	r1, #32
 800235e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2284      	movs	r2, #132	@ 0x84
 8002364:	2100      	movs	r1, #0
 8002366:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	dfffffff 	.word	0xdfffffff

08002378 <memset>:
 8002378:	0003      	movs	r3, r0
 800237a:	1882      	adds	r2, r0, r2
 800237c:	4293      	cmp	r3, r2
 800237e:	d100      	bne.n	8002382 <memset+0xa>
 8002380:	4770      	bx	lr
 8002382:	7019      	strb	r1, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	e7f9      	b.n	800237c <memset+0x4>

08002388 <__libc_init_array>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	2600      	movs	r6, #0
 800238c:	4c0c      	ldr	r4, [pc, #48]	@ (80023c0 <__libc_init_array+0x38>)
 800238e:	4d0d      	ldr	r5, [pc, #52]	@ (80023c4 <__libc_init_array+0x3c>)
 8002390:	1b64      	subs	r4, r4, r5
 8002392:	10a4      	asrs	r4, r4, #2
 8002394:	42a6      	cmp	r6, r4
 8002396:	d109      	bne.n	80023ac <__libc_init_array+0x24>
 8002398:	2600      	movs	r6, #0
 800239a:	f000 f819 	bl	80023d0 <_init>
 800239e:	4c0a      	ldr	r4, [pc, #40]	@ (80023c8 <__libc_init_array+0x40>)
 80023a0:	4d0a      	ldr	r5, [pc, #40]	@ (80023cc <__libc_init_array+0x44>)
 80023a2:	1b64      	subs	r4, r4, r5
 80023a4:	10a4      	asrs	r4, r4, #2
 80023a6:	42a6      	cmp	r6, r4
 80023a8:	d105      	bne.n	80023b6 <__libc_init_array+0x2e>
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
 80023ac:	00b3      	lsls	r3, r6, #2
 80023ae:	58eb      	ldr	r3, [r5, r3]
 80023b0:	4798      	blx	r3
 80023b2:	3601      	adds	r6, #1
 80023b4:	e7ee      	b.n	8002394 <__libc_init_array+0xc>
 80023b6:	00b3      	lsls	r3, r6, #2
 80023b8:	58eb      	ldr	r3, [r5, r3]
 80023ba:	4798      	blx	r3
 80023bc:	3601      	adds	r6, #1
 80023be:	e7f2      	b.n	80023a6 <__libc_init_array+0x1e>
 80023c0:	08002470 	.word	0x08002470
 80023c4:	08002470 	.word	0x08002470
 80023c8:	08002474 	.word	0x08002474
 80023cc:	08002470 	.word	0x08002470

080023d0 <_init>:
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d6:	bc08      	pop	{r3}
 80023d8:	469e      	mov	lr, r3
 80023da:	4770      	bx	lr

080023dc <_fini>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr
